/* auto-generated by genmsg_cpp from /home/jeff/ros/ua-ros-pkg/ua_experimental/ultraspeech/msg/SaveFile.msg.  Do not edit! */
package ros.pkg.ultraspeech.msg;


import java.nio.ByteBuffer;

public  class SaveFile extends ros.communication.Message
{

  public ros.pkg.roslib.msg.Header header;
  public java.lang.String filepath;

  public SaveFile() {
 super();
    header = new ros.pkg.roslib.msg.Header();
    filepath = new java.lang.String();

  }
  public static java.lang.String __s_getDataType() { return "ultraspeech/SaveFile"; }
  public static java.lang.String __s_getMD5Sum() { return "02eadefcd88df0f76162b21327c4bd37"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "Header header\n" + 
    "string filepath\n" + 
    "\n" + 
    "================================================================================\n" + 
    "MSG: roslib/Header\n" + 
    "# Standard metadata for higher-level stamped data types.\n" + 
    "# This is generally used to communicate timestamped data \n" + 
    "# in a particular coordinate frame.\n" + 
    "# \n" + 
    "# sequence ID: consecutively increasing ID \n" + 
    "uint32 seq\n" + 
    "#Two-integer timestamp that is expressed as:\n" + 
    "# * stamp.secs: seconds (stamp_secs) since epoch\n" + 
    "# * stamp.nsecs: nanoseconds since stamp_secs\n" + 
    "# time-handling sugar is provided by the client library\n" + 
    "time stamp\n" + 
    "#Frame this data is associated with\n" + 
    "# 0: no frame\n" + 
    "# 1: global frame\n" + 
    "string frame_id\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public SaveFile clone() {
    SaveFile clone = (SaveFile)super.clone();
      header = (ros.pkg.roslib.msg.Header)header.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("header", "ros.pkg.roslib.msg.Header");
     m.put("filepath", "java.lang.String");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      s.add("ros.pkg.roslib.msg.Header");
     return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof SaveFile)) throw new RuntimeException("Invalid Type");
    SaveFile __m2 = (SaveFile) __m;
    header = __m2.header;
    filepath = __m2.filepath;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += header.serializationLength(); // header
    __l += 4 + filepath.length(); // filepath
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    ros.pkg.roslib.msg.Header _ser_header = header;
    boolean __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    boolean __reset_timestamp = header.stamp.isZero();
    if (__reset_timestamp)
      _ser_header.stamp = ros.Ros.getInstance().now();
     header.serialize(bb, seq);
    Serialization.writeString(bb, filepath);
  }
  public void deserialize(ByteBuffer bb)  {
     header.deserialize(bb);
    filepath = Serialization.readString(bb);
  }
}

