/* auto-generated by genmsg_cpp from /home/dhewlett/ros/ua-ros-pkg/ua_experimental/time_series/msg/Interval.msg.  Do not edit! */
package ros.pkg.time_series.msg;


import java.nio.ByteBuffer;

public  class Interval extends ros.communication.Message
{

  public java.lang.String proposition;
  public int start;
  public int end;

  public Interval() {
 super();
    proposition = new java.lang.String();

  }
  public static java.lang.String __s_getDataType() { return "time_series/Interval"; }
  public static java.lang.String __s_getMD5Sum() { return "9042ed8bcbe14f5bb1675caa59fa655e"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "string proposition\n" + 
    "int32 start\n" + 
    "int32 end\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public Interval clone() {
    Interval clone = (Interval)super.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("proposition", "java.lang.String");
     m.put("start", "int");
     m.put("end", "int");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof Interval)) throw new RuntimeException("Invalid Type");
    Interval __m2 = (Interval) __m;
    proposition = __m2.proposition;
    start = __m2.start;
    end = __m2.end;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += 4 + proposition.length(); // proposition
    __l += 4; // start
    __l += 4; // end
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    Serialization.writeString(bb, proposition);
    bb.putInt(start);
    bb.putInt(end);
  }
  public void deserialize(ByteBuffer bb)  {
    proposition = Serialization.readString(bb);
    start = bb.getInt();
    end = bb.getInt();
  }
}

