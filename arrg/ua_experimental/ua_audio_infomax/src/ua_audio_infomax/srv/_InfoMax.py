"""autogenerated by genmsg_py from InfoMaxRequest.msg. Do not edit."""
import roslib.message
import struct


class InfoMaxRequest(roslib.message.Message):
  _md5sum = "9e8b1a42d19a04837cac8e933db89a77"
  _type = "ua_audio_infomax/InfoMaxRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


string[] objectNames


string[] actionNames
int32 actionID


"""
  __slots__ = ['objectNames','actionNames','actionID']
  _slot_types = ['string[]','string[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       objectNames,actionNames,actionID
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InfoMaxRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objectNames is None:
        self.objectNames = []
      if self.actionNames is None:
        self.actionNames = []
      if self.actionID is None:
        self.actionID = 0
    else:
      self.objectNames = []
      self.actionNames = []
      self.actionID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.objectNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.objectNames:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.actionNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.actionNames:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_i.pack(self.actionID))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objectNames = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.objectNames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actionNames = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.actionNames.append(val1)
      start = end
      end += 4
      (self.actionID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.objectNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.objectNames:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.actionNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.actionNames:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_i.pack(self.actionID))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objectNames = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.objectNames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actionNames = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.actionNames.append(val1)
      start = end
      end += 4
      (self.actionID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genmsg_py from InfoMaxResponse.msg. Do not edit."""
import roslib.message
import struct


class InfoMaxResponse(roslib.message.Message):
  _md5sum = "3e4cef1859cf72dce231cb0f841c5639"
  _type = "ua_audio_infomax/InfoMaxResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

float64[] beliefs
int32 location


"""
  __slots__ = ['beliefs','location']
  _slot_types = ['float64[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       beliefs,location
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InfoMaxResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.beliefs is None:
        self.beliefs = []
      if self.location is None:
        self.location = 0
    else:
      self.beliefs = []
      self.location = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.beliefs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.beliefs))
      buff.write(_struct_i.pack(self.location))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.beliefs = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.location,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.beliefs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.beliefs.tostring())
      buff.write(_struct_i.pack(self.location))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.beliefs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.location,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
class InfoMax(roslib.message.ServiceDefinition):
  _type          = 'ua_audio_infomax/InfoMax'
  _md5sum = '796ea21d4f970e10e46e5cd3084ae919'
  _request_class  = InfoMaxRequest
  _response_class = InfoMaxResponse
