/* Auto-generated by genmsg_cpp for file /home/ghost/ros/ua-ros-pkg/ua_experimental/ua_audio_infomax/srv/InfoMax.srv */
#ifndef UA_AUDIO_INFOMAX_SERVICE_INFOMAX_H
#define UA_AUDIO_INFOMAX_SERVICE_INFOMAX_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace ua_audio_infomax
{
template <class ContainerAllocator>
struct InfoMaxRequest_ : public ros::Message
{
  typedef InfoMaxRequest_<ContainerAllocator> Type;

  InfoMaxRequest_()
  : objectNames()
  , actionNames()
  , actionID(0)
  {
  }

  InfoMaxRequest_(const ContainerAllocator& _alloc)
  : objectNames(_alloc)
  , actionNames(_alloc)
  , actionID(0)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _objectNames_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  objectNames;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _actionNames_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  actionNames;

  typedef int32_t _actionID_type;
  int32_t actionID;


  ROSCPP_DEPRECATED uint32_t get_objectNames_size() const { return (uint32_t)objectNames.size(); }
  ROSCPP_DEPRECATED void set_objectNames_size(uint32_t size) { objectNames.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_objectNames_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->objectNames; }
  ROSCPP_DEPRECATED void set_objectNames_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->objectNames = vec; }
  ROSCPP_DEPRECATED uint32_t get_actionNames_size() const { return (uint32_t)actionNames.size(); }
  ROSCPP_DEPRECATED void set_actionNames_size(uint32_t size) { actionNames.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_actionNames_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->actionNames; }
  ROSCPP_DEPRECATED void set_actionNames_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->actionNames = vec; }
private:
  static const char* __s_getDataType_() { return "ua_audio_infomax/InfoMaxRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9e8b1a42d19a04837cac8e933db89a77"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "796ea21d4f970e10e46e5cd3084ae919"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
string[] objectNames\n\
\n\
\n\
string[] actionNames\n\
int32 actionID\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, objectNames);
    ros::serialization::serialize(stream, actionNames);
    ros::serialization::serialize(stream, actionID);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, objectNames);
    ros::serialization::deserialize(stream, actionNames);
    ros::serialization::deserialize(stream, actionID);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(objectNames);
    size += ros::serialization::serializationLength(actionNames);
    size += ros::serialization::serializationLength(actionID);
    return size;
  }

  typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct InfoMaxRequest
typedef  ::ua_audio_infomax::InfoMaxRequest_<std::allocator<void> > InfoMaxRequest;

typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxRequest> InfoMaxRequestPtr;
typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxRequest const> InfoMaxRequestConstPtr;


template <class ContainerAllocator>
struct InfoMaxResponse_ : public ros::Message
{
  typedef InfoMaxResponse_<ContainerAllocator> Type;

  InfoMaxResponse_()
  : beliefs()
  , location(0)
  {
  }

  InfoMaxResponse_(const ContainerAllocator& _alloc)
  : beliefs(_alloc)
  , location(0)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _beliefs_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  beliefs;

  typedef int32_t _location_type;
  int32_t location;


  ROSCPP_DEPRECATED uint32_t get_beliefs_size() const { return (uint32_t)beliefs.size(); }
  ROSCPP_DEPRECATED void set_beliefs_size(uint32_t size) { beliefs.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_beliefs_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->beliefs; }
  ROSCPP_DEPRECATED void set_beliefs_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->beliefs = vec; }
private:
  static const char* __s_getDataType_() { return "ua_audio_infomax/InfoMaxResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3e4cef1859cf72dce231cb0f841c5639"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "796ea21d4f970e10e46e5cd3084ae919"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
float64[] beliefs\n\
int32 location\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, beliefs);
    ros::serialization::serialize(stream, location);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, beliefs);
    ros::serialization::deserialize(stream, location);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(beliefs);
    size += ros::serialization::serializationLength(location);
    return size;
  }

  typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct InfoMaxResponse
typedef  ::ua_audio_infomax::InfoMaxResponse_<std::allocator<void> > InfoMaxResponse;

typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxResponse> InfoMaxResponsePtr;
typedef boost::shared_ptr< ::ua_audio_infomax::InfoMaxResponse const> InfoMaxResponseConstPtr;

struct InfoMax
{

typedef InfoMaxRequest Request;
typedef InfoMaxResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct InfoMax
} // namespace ua_audio_infomax

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9e8b1a42d19a04837cac8e933db89a77";
  }

  static const char* value(const  ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9e8b1a42d19a0483ULL;
  static const uint64_t static_value2 = 0x7cac8e933db89a77ULL;
};

template<class ContainerAllocator>
struct DataType< ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ua_audio_infomax/InfoMaxRequest";
  }

  static const char* value(const  ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
string[] objectNames\n\
\n\
\n\
string[] actionNames\n\
int32 actionID\n\
\n\
\n\
";
  }

  static const char* value(const  ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e4cef1859cf72dce231cb0f841c5639";
  }

  static const char* value(const  ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3e4cef1859cf72dcULL;
  static const uint64_t static_value2 = 0xe231cb0f841c5639ULL;
};

template<class ContainerAllocator>
struct DataType< ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ua_audio_infomax/InfoMaxResponse";
  }

  static const char* value(const  ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
float64[] beliefs\n\
int32 location\n\
\n\
\n\
";
  }

  static const char* value(const  ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objectNames);
    stream.next(m.actionNames);
    stream.next(m.actionID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InfoMaxRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.beliefs);
    stream.next(m.location);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InfoMaxResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ua_audio_infomax::InfoMax> {
  static const char* value() 
  {
    return "796ea21d4f970e10e46e5cd3084ae919";
  }

  static const char* value(const ua_audio_infomax::InfoMax&) { return value(); } 
};

template<>
struct DataType<ua_audio_infomax::InfoMax> {
  static const char* value() 
  {
    return "ua_audio_infomax/InfoMax";
  }

  static const char* value(const ua_audio_infomax::InfoMax&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "796ea21d4f970e10e46e5cd3084ae919";
  }

  static const char* value(const ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ua_audio_infomax/InfoMax";
  }

  static const char* value(const ua_audio_infomax::InfoMaxRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "796ea21d4f970e10e46e5cd3084ae919";
  }

  static const char* value(const ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ua_audio_infomax/InfoMax";
  }

  static const char* value(const ua_audio_infomax::InfoMaxResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UA_AUDIO_INFOMAX_SERVICE_INFOMAX_H

