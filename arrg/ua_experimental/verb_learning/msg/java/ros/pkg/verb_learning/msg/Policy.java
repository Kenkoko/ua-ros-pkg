/* auto-generated by genmsg_cpp from /home/dhewlett/ros/ua-ros-pkg/ua_experimental/verb_learning/msg/Policy.msg.  Do not edit! */
package ros.pkg.verb_learning.msg;


import java.nio.ByteBuffer;

public  class Policy extends ros.communication.Message
{

  public ros.pkg.oomdp_msgs.msg.MDPState[] states;
  public java.lang.String[] actions;
  public static final java.lang.String TERMINATE = "TERMINATE";

  public Policy() {
 super();
  states = new ros.pkg.oomdp_msgs.msg.MDPState[0];
  actions = new java.lang.String[0];

  }
  public static java.lang.String __s_getDataType() { return "verb_learning/Policy"; }
  public static java.lang.String __s_getMD5Sum() { return "f68057dfd4038ad023343dc67f4be4e9"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "oomdp_msgs/MDPState[] states\n" + 
    "string[] actions\n" + 
    "string TERMINATE=TERMINATE\n" + 
    "================================================================================\n" + 
    "MSG: oomdp_msgs/MDPState\n" + 
    "MDPObjectState[] object_states\n" + 
    "Relation[] relations\n" + 
    "\n" + 
    "================================================================================\n" + 
    "MSG: oomdp_msgs/MDPObjectState\n" + 
    "string class_name\n" + 
    "string name\n" + 
    "string[] attributes\n" + 
    "string[] values\n" + 
    "\n" + 
    "================================================================================\n" + 
    "MSG: oomdp_msgs/Relation\n" + 
    "string relation\n" + 
    "string[] obj_names\n" + 
    "bool value\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public Policy clone() {
    Policy clone = (Policy)super.clone();
      states =  (ros.pkg.oomdp_msgs.msg.MDPState[])(clone.states.clone());
      for (int i = 0; i < states.length; i++) states[i] = (ros.pkg.oomdp_msgs.msg.MDPState)states[i].clone();
      actions =  (java.lang.String[])(clone.actions.clone());
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("states", "ros.pkg.oomdp_msgs.msg.MDPState[]");
     m.put("actions", "java.lang.String[]");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      s.add("ros.pkg.oomdp_msgs.msg.MDPState");
     return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof Policy)) throw new RuntimeException("Invalid Type");
    Policy __m2 = (Policy) __m;
    states = __m2.states;
    actions = __m2.actions;
    }

  int calc_states_array_serialization_len() {
    int l = 0;
    for (int i = 0; i < states.length; i++) 
      l += states[i].serializationLength();
    return l;
  }
  int calc_actions_array_serialization_len() {
    int l = 0;
    for (int i = 0; i < actions.length; i++) 
      l += 4 + actions[i].length();
    return l;
  }
  public int serializationLength() 
  {
    int __l = 0;
    __l += 4 + calc_states_array_serialization_len(); // states
    __l += 4 + calc_actions_array_serialization_len(); // actions
    __l += 0; // TERMINATE
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    bb.putInt(states.length);
    for (ros.pkg.oomdp_msgs.msg.MDPState x : states)
      x.serialize(bb, seq);
    bb.putInt(actions.length);
    for (java.lang.String x : actions)
      Serialization.writeString(bb, x);
  }
  public void deserialize(ByteBuffer bb)  {
     int states_len = bb.getInt();
    states = new ros.pkg.oomdp_msgs.msg.MDPState[states_len];
    for(int i = 0; i < states_len; i++)
      {states[i] = new ros.pkg.oomdp_msgs.msg.MDPState(); states[i].deserialize(bb); }
     int actions_len = bb.getInt();
    actions = new java.lang.String[actions_len];
    for(int i = 0; i < actions_len; i++)
      actions[i] = Serialization.readString(bb);
  }
}

