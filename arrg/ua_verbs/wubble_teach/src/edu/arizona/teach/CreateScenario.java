/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreateScenario.java
 *
 * Created on Nov 15, 2010, 4:39:59 PM
 */
package edu.arizona.teach;

import edu.arizona.teach.MainWindow;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;
import javax.swing.JTable;
import ros.NodeHandle;
import ros.Ros;
import edu.arizona.verbs.shared.OOMDPObjectState;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import ros.RosException;
import ros.ServiceClient;
import ros.pkg.oomdp_msgs.msg.MDPClassDescription;
import ros.pkg.oomdp_msgs.msg.MDPObjectState;
import ros.pkg.oomdp_msgs.srv.DescribeMDP;
import ros.pkg.oomdp_msgs.srv.InitializeEnvironment;

/**
 *
 * @author diana
 */
public class CreateScenario extends javax.swing.JFrame {

    //I'm declaring/initializing an arraylist of objectStates here because NB won't let me declare it
    //in the private vars list
    ArrayList<MDPObjectState> stateList = new ArrayList<MDPObjectState>();
    MainWindow myView;

    /** Creates new form CreateScenario */
    public CreateScenario(MainWindow thisView) {
        myView = thisView;
        initComponents();
    }

    public CreateScenario() {
        // myView = thisView;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox5 = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.arizona.teach.WubbleTeach.class).getContext().getResourceMap(CreateScenario.class);
        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox4.setName("jComboBox4"); // NOI18N

        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("CreateScenario"); // NOI18N
        getContentPane().setLayout(null);

        jPanel4.setName("jPanel4"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(333, 333, 333))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 350, 50);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(null);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 10, 60, 30);

        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setFont(resourceMap.getFont("jTable1.font")); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Type", "Item Attributes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(25);
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N

        jButton4.setFont(resourceMap.getFont("jButton4.font")); // NOI18N
        jButton4.setForeground(resourceMap.getColor("jButton4.foreground")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setFont(resourceMap.getFont("jButton3.font")); // NOI18N
        jButton3.setForeground(resourceMap.getColor("jButton3.foreground")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(-10, 230, 370, 168);

        jTextField1.setForeground(resourceMap.getColor("jTextField1.foreground")); // NOI18N
        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setCaretColor(resourceMap.getColor("jTextField1.caretColor")); // NOI18N
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.setVerifyInputWhenFocusTarget(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1);
        jTextField1.setBounds(60, 10, 280, 30);

        jPanel5.setBackground(resourceMap.getColor("jPanel5.background")); // NOI18N
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setLayout(null);

        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setForeground(resourceMap.getColor("jButton1.foreground")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1);
        jButton1.setBounds(0, 150, 100, 30);

        jButton2.setFont(resourceMap.getFont("jButton2.font")); // NOI18N
        jButton2.setForeground(resourceMap.getColor("jButton2.foreground")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton2);
        jButton2.setBounds(160, 150, 180, 30);

        jComboBox5.setEditable(true);
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "scroll down to select a scenario item", "robot", "object", "location" }));
        jComboBox5.setName("jComboBox5"); // NOI18N
        jComboBox5.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox5PopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                jComboBox5PopupMenuCanceled(evt);
            }
        });
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });
        jPanel5.add(jComboBox5);
        jComboBox5.setBounds(20, 10, 310, 20);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setName("jTable2"); // NOI18N
        jScrollPane2.setViewportView(jTable2);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 340, 110);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(0, 50, 340, 190);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(20, 50, 360, 410);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ArrayList<String> scenarioItems = new ArrayList<String>();
    /* Add item to scenario p*/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel displayModel = (DefaultTableModel) jTable1.getModel();    //table showing created items
        DefaultTableModel itemModel = (DefaultTableModel) jTable2.getModel();   //table holding item attributes
        if (itemModel.getColumnCount() > 0) {
            String objName = (String) itemModel.getValueAt(0, 1);
            //name of new item
            String objType = (String) itemModel.getValueAt(1, 1); //type of new item
            scenarioItems.add(objName);
            scenarioItems.add(objType);
            String attrString = "";                               //will hold item's attributes for GUI display
            int numAttributes = jTable2.getRowCount() - 1;    //total number of attributes of new item
            //String[] attributeArray = new String[numAttributes];    //holds type of attribute
            //String[] valueArray = new String[numAttributes];        //holds value of attribute
            ArrayList<String> attributeArray = new ArrayList<String>();
            ArrayList<String> valueArray = new ArrayList<String>();
            for (int i = 0; i < numAttributes; i++) {       //fill attribute/value arrays with data from table
                attributeArray.add((String) jTable2.getValueAt(i + 1, 0));
                valueArray.add((String) jTable2.getValueAt(i + 1, 1));
                attrString += attributeArray.get(i) + "=" + valueArray.get(i) + "; "; //for GUI
            }

            OOMDPObjectState os = new OOMDPObjectState(objType, objName);   //make new OOMDPObjectState
            os.setAttributes(attributeArray, valueArray);
            String[] newItem = {os.getName(), os.getClassName(), attrString};   //for displayModel in GUI

            //convert to ros attributes, fill out fields when call initializer
            MDPObjectState s = new MDPObjectState();
            s.name = os.getName();
            s.class_name = os.getClassName();
            s.attributes = os.getAttributes();
            s.values = os.getValues();

            stateList.add(s);              //add new MDPObjectState to list of scenario objects
            ScenarioBank sb = new ScenarioBank();
            sb.addScene(s.name, stateList);
            //convert to ros attributes, fill out fields when call initializer
            //InitializeEnvironment.Request req = new InitializeEnvironment.Request();
            //req.object_states = new MDPObjectState[1];
            //req.object_states[0] = s;
            displayModel.addRow(newItem);
            jComboBox5.setSelectedIndex(0);
        } else {
            System.out.println("There are no items to add.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /* Select scenario item and its attributes */
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        int itemIndex = jComboBox5.getSelectedIndex();
        DefaultTableModel itemModel = (DefaultTableModel) jTable2.getModel();   //table to hold item attributes

        itemModel.setColumnCount(0);    //Clear columns/rows from previous selection
        itemModel.setNumRows(0);
        itemModel.addColumn(new String("Attribute Type"));
        itemModel.addColumn(new String("Attribute Value"));


        //match selection to scenario items available in ros
        ServiceClient<DescribeMDP.Request, DescribeMDP.Response, DescribeMDP> sc = WubbleTeach.nh.serviceClient("environment/describe_mdp", new DescribeMDP());
        DescribeMDP.Request req = new DescribeMDP.Request();
        try {
            DescribeMDP.Response resp = sc.call(req);
            if (itemIndex >= 1) {
                MDPClassDescription thisItem = resp.description.classes.get(itemIndex - 1);   //ros prototype for chosen item
                itemModel.addRow(new String[]{"Item Type", thisItem.name});
                itemModel.addRow(new String[]{"Name"});

                 //   System.out.println("In createScenario: " + thisItem.name);  //print avail item and its attributes
                int r = 0;
                for (String a : thisItem.attributes) {
                    itemModel.addRow(new String[]{a});
                    //System.out.println(a);
                }   //else if itemIndex == 0 do nothing
            }
        } catch (RosException ex) {
            Logger.getLogger(WubbleTeach.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox5ActionPerformed

    /* Save scenario */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//5/7/11 Changed from > 1
        if (stateList.size() >= 1) {
            InitializeEnvironment.Request req = new InitializeEnvironment.Request();
            //        req.object_states = new MDPObjectState[1];
            req.object_states = new ArrayList<MDPObjectState>();   //fill environment with recently created items
            for (int i = 0; i < stateList.size(); i++) {
                req.object_states.add(stateList.get(i));
            }

            File wubble_scenarios = new File("__wubble_scenarios__"); //create/call parent file for all scenarios
            wubble_scenarios.mkdir();

            String thisScene = jTextField1.getText(); //create parent file for scene's items
            File scene = new File(wubble_scenarios, thisScene); //set wubble_scenarios as this scene's parent
            scene.mkdir();
            System.out.println("I just made a new file called " + scene.getName());
            try {
                for (int i = 0; i < req.object_states.size(); i++) {
                    MDPObjectState stateMsg = req.object_states.get(i);
                    //System.out.println(stateMsg.name + stateMsg.class_name
                    //               + Arrays.toString(stateMsg.attributes)
                    //             + Arrays.toString(stateMsg.values));
                    int len = stateMsg.serializationLength();
                    // System.out.println(len);
                    ByteBuffer bb = ByteBuffer.allocate(len);
                    //System.out.println(bb.toString());
                    stateMsg.serialize(bb, 0);
                    //System.out.println(bb.toString());

                    // Create a writable file channel for this item
                    File tester = new File(scene, stateMsg.name);   //set this scene as the parent
                    FileChannel wChannel = new FileOutputStream(tester, false).getChannel();
                    // Write the ByteBuffer contaents; the bytes between the ByteBuffer's
                    // position and the limit is written to the file
                    bb.position(0);
                    wChannel.write(bb);
                    // Close the file
                    wChannel.close();
                }
                loadEnvironment(scene.getName());
                if (myView != null) {
                    myView.setParams(scenarioItems);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            ServiceClient<InitializeEnvironment.Request, InitializeEnvironment.Response, InitializeEnvironment> sc = WubbleTeach.nh.serviceClient("verb_learning/initialize_environment", new InitializeEnvironment());

            try {
                sc.call(req);
            } catch (RosException ex) {
                Logger.getLogger(WubbleTeach.class.getName()).log(Level.SEVERE, null, ex);
            }

            File abc = new File("__wubble_scenarios__");
            System.out.println("Hopefully this shows all scenarios: ");
            File[] scenes = abc.listFiles();
            for (File g : scenes) {
                System.out.println(g.getName() + " with ");
                File[] objs = g.listFiles();
                for (File h : objs) {
                    System.out.println(h.getName());
                }
            }

            DefaultTableModel dispModel = (DefaultTableModel) jTable1.getModel();  //table describing this scenario
            dispModel.setColumnCount(0);    //Clear GUI table
            jTextField1.setText(null);
            myView.setScenarioName(thisScene);
            myView.makeChooseVerb();
            this.setVisible(false);
        } else {
            System.out.println("There is no scenario to save.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
}//GEN-LAST:event_jTextField1ActionPerformed
    /* CANCEL this scenario creation */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextField1.setText("");
        cancelItems();
        cancelScenario();
        this.setVisible(false);         //Make sure this saves a pre-existing scenario but not a new one;
        //same for items
    }//GEN-LAST:event_jButton4ActionPerformed
    /* CANCEL button for items */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cancelItems();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox5PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox5PopupMenuWillBecomeVisible
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5PopupMenuWillBecomeVisible

    private void jComboBox5PopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox5PopupMenuCanceled
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5PopupMenuCanceled

    /*CANCEL these items */
    public void cancelItems() {
        jComboBox5.setSelectedIndex(0); //put item combo box at beginning
        DefaultTableModel itemModel = (DefaultTableModel) jTable2.getModel();   //table to hold item attributes
        itemModel.setColumnCount(0);    //Clear columns/rows from abbreviated selection
        itemModel.setNumRows(0);
        itemModel.addColumn(new String("Attribute Type"));
        itemModel.addColumn(new String("Attribute Value"));
    }

    /* CANCEL the items in this scenario */
    public void cancelScenario() {
        for (int i = 0; i < jTable1.getModel().getRowCount(); i++) {
            for (int j = 0; j <= 2; j++) {
                jTable1.setValueAt("", i, j);
            }
        }
    }

    /* load environment */
    public void loadEnvironment(String scenarioName) {
        try {
            File thisScenario = new File("__wubble_scenarios__", scenarioName);
            File[] theseObjects = thisScenario.listFiles();
            System.out.println("loadEnv scene: " + thisScenario.getName());
            for (File f : theseObjects) {
                System.out.println("loadEnv: " + f.getName());
            }
            for (File o : theseObjects) {
                File objectFile = new File(thisScenario, o.getName());
                FileChannel wChannel = new FileInputStream(objectFile).getChannel();
                // Write the ByteBuffer contents; the bytes between the ByteBuffer's
                // position and the limit is written to the file
                System.out.println(wChannel.size());
                ByteBuffer bb = ByteBuffer.allocate((int) wChannel.size());
                wChannel.read(bb);
                // Close the file
                wChannel.close();
                bb.position(0);

                MDPObjectState lazarus = new MDPObjectState();
                lazarus.deserialize(bb);
                System.out.println(lazarus);

                System.out.println(lazarus.name);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CreateScenario().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
