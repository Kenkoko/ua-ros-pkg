<launch>
    <param name="/use_sim_time" value="true" />

    <!-- start gazebo with an empty plane -->
<!--    <node name="gazebo" pkg="gazebo" type="gazebo" -->
<!--          args="$(find gazebo_worlds)/worlds/empty.world"-->
<!--          respawn="false" output="screen" />-->

    <node name="gazebo" pkg="gazebo" type="gazebo" 
          args="$(find wubble_environments)/worlds/empty_with_blocks.world"
          respawn="false" output="screen" />

    <!-- send wubble robot XML to param server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find wubble_description)/urdf/wubble2.urdf.xacro'" />

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_robot" pkg="gazebo" type="spawn_model"
          args="-unpause
                -param robot_description
                -urdf
                -z 0.01
                -model wubble2"
          respawn="false" output="screen" />

    <!-- Controller Manager configuration -->
    <param name="pr2_controller_manager/joint_state_publish_rate" value="100.0" />

    <!-- WubbleArm Controllers -->
<!--    <rosparam file="$(find wubble_arm_description)/controllers/wubble_arm_controllers.yaml" command="load" />-->
<!--    <node name="wubble_arm_controller_spawner" pkg="pr2_controller_manager" type="spawner"-->
<!--          args="shoulder_pitch_controller-->
<!--                shoulder_yaw_controller-->
<!--                shoulder_roll_controller-->
<!--                elbow_pitch_controller-->
<!--                wrist_roll_controller-->
<!--                wrist_pitch_controller-->
<!--                wrist_yaw_controller-->
<!--                gripper_left_finger_controller-->
<!--                gripper_right_finger_controller"-->
<!--          respawn="false" output="screen" />-->

    <!-- Laser Controllers -->
    <rosparam file="$(find wubble_description)/controllers/wubble2_laser_controllers.yaml" command="load" />
    <node name="laser_controllers_spawner" pkg="pr2_controller_manager" type="spawner"
          args="neck_laser_tilt_controller
                neck_laser_traj_controller"
          respawn="false" output="screen" />

    <!-- set laser tilt rate -->
    <node pkg="pr2_mechanism_controllers" type="send_periodic_cmd_srv.py" name="laser_tilt_controller_3dnav_params"
          args="neck_laser_traj_controller linear 3 0.9 0.6" />

    <!-- Head Controllers -->
    <rosparam file="$(find wubble_description)/controllers/wubble2_head_controllers.yaml" command="load" />
    <node name="head_controllers_spawner" pkg="pr2_controller_manager" type="spawner"
          args="head_pan_controller
                head_tilt_controller"
          respawn="false" output="screen" />

    <!-- Arm Trajectory Controller -->
    <rosparam command="load" file="$(find wubble_description)/params/w2_arm_controllers.yaml" />
    <node name="default_controllers_spawner" pkg="pr2_controller_manager" type="spawner" args="l_arm_controller" />

    <!-- start robot state publisher -->
    <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" respawn="true" output="screen" >
        <param name="publish_frequency" type="double" value="50.0" />
        <param name="tf_prefix" type="string" value="" />
    </node>

    <!-- start arm kinematics services (IK and FK) -->
<!--    <node pkg="arm_kinematics" type="arm_kinematics" name="arm_kinematics" respawn="true" output="screen" >-->
<!--        <param name="root_name" value="L0_base_link" />-->
<!--        <param name="tip_name" value="L7_wrist_yaw_link" />-->
<!--    </node>-->

<!--    <include file="$(find wubble_arm_kinematics)/launch/wubble_ik_larm_node.launch" />-->

    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="true" output="screen" >
        <param name="odom_frame_id" value="odom"/>
    </node>

    <!-- an empty map so navigation will still work -->
    <node name="map_node" pkg="map_server" type="map_server" 
          args="$(find wubble_environments)/Media/materials/textures/empty_map.yaml"
          respawn="true" output="screen" />
          
    <!-- Throttle the voxel grid that is being published for rviz -->
    <node ns="move_base_node/local_costmap" 
          name="voxel_grid_throttle" pkg="topic_tools" type="throttle" 
          args="messages voxel_grid 3.0 voxel_grid_throttled" />

    <!-- for moving -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
        <rosparam file="$(find wubble_description)/params/move_base_params.yaml" command="load" />
        <rosparam file="$(find wubble_description)/params/w2_costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find wubble_description)/params/w2_costmap_common_params.yaml" command="load" ns="local_costmap" />
        
        <rosparam file="$(find wubble_description)/params/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find wubble_description)/params/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find wubble_description)/params/base_local_planner_params.yaml" command="load" />
    </node>

    <!-- Filter for base laser shadowing/veiling -->
    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" name="base_shadow_filter" >
        <remap from="scan" to="base_scan/scan" />
        <remap from="cloud_filtered" to="base_scan/shadow_filtered" />
        <param name="target_frame" value="base_footprint" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find wubble_description)/params/shadow_filter.yaml" />
    </node>

    <!-- Filter for base laser scans that hit the body of the robot -->
    <node pkg="robot_self_filter" type="self_filter" name="base_laser_self_filter" respawn="true" output="screen" >
        <remap from="cloud_in" to="base_scan/shadow_filtered" />
        <remap from="cloud_out" to="base_scan/marking" />
        <param name="sensor_frame" type="string" value="base_scan_link" />
        <rosparam file="$(find wubble_description)/params/w2_base_self_filter.yaml" command="load" />
    </node>

    <!-- Laser Filters -->
    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" name="neck_shadow_filter">
        <remap from="scan" to="neck_scan/scan" />
        <remap from="cloud_filtered" to="neck_scan/shadow_filtered" />
        <param name="target_frame" value="base_footprint" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find wubble_description)/params/shadow_filter.yaml" />
    </node>

    <!-- need to clear known objects from scans -->
    <node pkg="planning_environment" type="clear_known_objects" name="laser_clear_objects" output="screen">
        <remap from="cloud_in" to="neck_scan/shadow_filtered" />
        <remap from="cloud_out" to="neck_scan/cloud_known" />
        <param name="sensor_frame" type="string" value="neck_scan_link" />
        <param name="fixed_frame" type="string" value="base_link" />
        <param name="object_padd" type="double" value="0.02" />
        <param name="object_scale" type="double" value="1.0" />
    </node>

    <node pkg="robot_self_filter" type="self_filter" name="laser_self_filter" respawn="true" output="screen">
        <remap from="cloud_in" to="neck_scan/cloud_known" />
        <remap from="cloud_out" to="neck_scan/self_filtered" />
        <param name="sensor_frame" value="neck_scan_link" />
        <rosparam file="$(find wubble_description)/params/w2_self_filter.yaml" command="load" />
    </node>

    <!-- displaying known model markers -->
    <node pkg="planning_environment" name="display_planner_collision_model_environment_server" type="display_planner_collision_model" respawn="false" output="screen">
        <param name="skip_collision_map" type="bool" value="false" />
        <param name="prefix" type="string" value="/environment_server_left_arm" />
    </node>

    <node pkg="planning_environment" name="display_planner_collision_model_ik" type="display_planner_collision_model" respawn="false" output="screen">
        <param name="skip_collision_map" type="bool" value="false" />
        <param name="prefix" type="string" value="/arm_kinematics" />
    </node>

    <!-- assemble pointcloud into a full world view -->
    <node pkg="laser_assembler" type="point_cloud_assembler" output="screen"  name="point_cloud_assembler">
        <remap from="cloud" to="neck_scan/self_filtered"/>
        <param name="tf_cache_time_secs" type="double" value="10.0" />
        <param name="tf_tolerance_secs" type="double" value="0.0" />
        <param name="max_clouds" type="int" value="400" />
        <param name="ignore_laser_skew" type="bool" value="true" />
        <param name="fixed_frame" type="string" value="base_link" />
    </node>

    <node pkg="pr2_arm_navigation_perception" type="pr2_laser_snapshotter" output="screen" name="snapshotter">
        <remap from="laser_scanner_signal" to="neck_laser_traj_controller/laser_scanner_signal"/>
        <remap from="build_cloud" to="point_cloud_assembler/build_cloud" />
        <remap from="full_cloud" to="full_cloud_filtered" />
    </node>

    <!-- send parameters for collision checking for Wubble2; this includes parameters for the self filter -->
    <rosparam command="load" ns="robot_description_collision" file="$(find wubble_description)/params/w2_collision_checks_arm.yaml" />

    <!-- send parameters needed for motion planning -->
    <rosparam command="load" ns="robot_description_planning" file="$(find wubble_description)/params/w2_planning_groups.yaml" />

    <node pkg="collision_map" type="collision_map_self_occ_node" name="collision_map_self_occ_node" respawn="true" output="screen">
        <param name="self_see_default_padding" type="double" value="0.04" />
        <param name="self_see_default_scale" type="double" value="1.0" />
         
        <rosparam command="load" file="$(find wubble_description)/params/w2_self_filter.yaml" />
        
        <!-- if someone asks for a stable map, publish the static map on the dynamic
        map topic and no longer publish dynamic maps -->
        <param name="publish_static_over_dynamic_map" type="bool" value="true" />
        
        <!-- we do not want a separate map with occlusions alone -->
        <param name="publish_occlusion" type="bool" value="true" />
        <param name="fixed_frame" type="string" value="base_link" />
        
        <!-- define a box of size 2x3x4 around (1.1,  0, 0) in the robot frame -->
        <param name="robot_frame" type="string" value="base_link" />
        
        <param name="origin_x" type="double" value="1.1" />
        <param name="origin_y" type="double" value="0.0" />
        <param name="origin_z" type="double" value="0.0" />
        
        <param name="dimension_x" type="double" value="1.0" />
        <param name="dimension_y" type="double" value="1.5" />
        <param name="dimension_z" type="double" value="2.0" />
        
        <!-- set the resolution (1.0 cm) -->
        <param name="resolution" type="double" value="0.01" />
        
        <!-- cloud sources -->
        <rosparam command="load" file="$(find wubble_description)/params/w2_collision_map_sources.yaml" />
    </node>

    <node pkg="planning_environment" type="environment_server" output="screen" name="environment_server_left_arm">
        <remap from="collision_map" to="collision_map_occ" />
        <remap from="collision_map_update" to="collision_map_occ_update" />
        
        <param name="group" type="string" value="left_arm" />
        <param name="allow_valid_collisions" type="bool" value="false" />
        
        <param name="collision_map_safety_timeout" type="double" value="100000.0" />
        <param name="joint_states_safety_timeout" type="double" value="1.0" />
        <param name="bounding_planes" type="string" value="0 0 1 -0.01" />
        
        <param name="pointcloud_padd" type="double" value="0.00" />
        
        <rosparam command="load" file="$(find wubble_description)/params/w2_environment_server_padding.yaml" />
    </node>

    <node pkg="ompl_planning" type="motion_planner" name="ompl_planning" respawn="true" output="screen">
        <remap from="robot_description" to="robot_description" />  
        <remap from="collision_map" to="collision_map_occ" />
        <remap from="collision_map_update" to="collision_map_occ_update" />
        
        <!-- if we are moving the base, it is best to maintain the map in a fixed frame since identified objects that are being published
         are not necessarily updated -->
        <!--    <param name="planner_frame_id" type="string" value="odom_combined" /> -->
        
        <!-- planner configs -->
        <rosparam command="load" file="$(find wubble_description)/params/w2_ompl_planning_configs.yaml" />
        
        <param name="state_delay" type="double" value="0.01" />
        <param name="pointcloud_padd" type="double" value="0.00" />
        
        <param name="refresh_interval_collision_map" type="double" value="5.0" />
        <param name="refresh_interval_kinematic_state" type="double" value="1.0" />
        <param name="bounding_planes" type="string" value="0 0 1 -0.01" />
        <param name="verbose_collisions" type="bool" value="false" />
        
        <rosparam command="load" file="$(find wubble_description)/params/w2_robot_padding.yaml" />
    </node>

    <node pkg="ompl_search" type="search_state" name="ompl_search" respawn="true" output="screen">
        <remap from="robot_description" to="robot_description" />
        <remap from="collision_map" to="collision_map_occ" />
        <remap from="collision_map_update" to="collision_map_occ_update" />    
        <!-- if we are moving the base, it is best to maintain the map in a fixed frame since identified objects that are being published
             are not necessarily updated -->
        <!--    <param name="planner_frame_id" type="string" value="odom_combined" /> -->
        <!-- planner configs -->
        <rosparam command="load" file="$(find wubble_description)/params/w2_ompl_planning_configs.yaml" />
        
        <param name="pointcloud_padd" type="double" value="0.00" />
        
        <param name="refresh_interval_collision_map" type="double" value="5.0" />
        <param name="refresh_interval_kinematic_state" type="double" value="1.0" />
        <param name="bounding_planes" type="string" value="0 0 1 -0.01" />
        <param name="verbose_collisions" type="bool" value="false" />
        
        <rosparam command="load" file="$(find wubble_description)/params/w2_robot_padding.yaml" />
    </node>

    <node pkg="trajectory_filter_server" name="trajectory_filter" type="trajectory_filter_server" output="screen">
        <rosparam command="load" file="$(find wubble_description)/params/w2_joint_limits.yaml"/>
        <rosparam command="load" file="$(find wubble_description)/params/w2_filters.yaml"/>
        
        <remap from="robot_description" to="robot_description" />
        <remap from="collision_map" to="collision_map_occ" />
        <remap from="collision_map_update" to="collision_map_occ_update" />
        <param name="refresh_interval_collision_map" type="double" value="0.0" />
        <param name="refresh_interval_kinematic_state" type="double" value="1.0" />
        <param name="bounding_planes" type="string" value="0 0 1 -0.01" />
        <param name="compute_contacts" type="bool" value="false" />
        
        <param name="pointcloud_padd" type="double" value="0.00" />
        
        <rosparam command="load" file="$(find wubble_description)/params/w2_robot_padding.yaml" />
    </node>

    <!-- load collision free ik -->
    <include file="$(find wubble_arm_kinematics_constraint_aware)/launch/left_arm_collision_free_ik.launch"/>

    <!-- move_arm -->
    <node pkg="move_arm" type="move_arm_simple_action" output="screen" name="move_left_arm">
        <remap from="robot_description" to="robot_description" />
        <remap from="joint_state" to="joint_states" />
        <remap from="arm_ik" to="wubble_left_arm_kinematics/get_constraint_aware_ik" />
        <remap from="arm_fk" to="wubble_left_arm_kinematics/get_fk" />
        <remap from="filter_trajectory" to="trajectory_filter/filter_trajectory_with_constraints" />
        
        <remap from="get_trajectory_validity" to="environment_server_left_arm/get_trajectory_validity" />
        <remap from="get_environment_safety" to="environment_server_left_arm/get_environment_safety" />
        <remap from="get_execution_safety" to="environment_server_left_arm/get_execution_safety" />
        <remap from="get_joints_in_group" to="environment_server_left_arm/get_joints_in_group" />
        <remap from="get_robot_state" to="environment_server_left_arm/get_robot_state" />
        <remap from="get_state_validity" to="environment_server_left_arm/get_state_validity" />
        
        <param name="group" type="string" value="left_arm" />
        <param name="ik_allowed_time" type="double" value="2.0" />
        <param name="trajectory_filter_allowed_time" type="double" value="2.0" />
        <param name="group" type="string" value="left_arm" />
        <param name="controller_action_name" type="string" value="/l_arm_controller/joint_trajectory_action" />
    </node>
</launch>

