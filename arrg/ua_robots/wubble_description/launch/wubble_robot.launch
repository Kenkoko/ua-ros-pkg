<launch>

    <!-- send the wubble robot XML to param server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find wubble_description)/urdf/wubble.urdf.xacro'" />

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_erratic" pkg="gazebo_tools" type="gazebo_model" args="-z 0.01 -p robot_description spawn robot_description" respawn="false" output="screen" />

    <!-- Differential Drive and Odometry -->
    <node name="diffdrive" pkg="wubble_plugins" type="gazebo_ros_diffdrive" respawn="true" output="screen"/>
    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="true" output="screen" >
        <param name="odom_frame_id" value="odom"/>
    </node>

    <include file="$(find pr2_controller_manager)/controller_manager.launch" />

    <!-- Laser and Camera Controllers -->
    <rosparam file="$(find wubble_description)/controllers/erratic_controllers.yaml" command="load" />
    <node name="laser_camera_controller_spawner" pkg="pr2_controller_manager" type="spawner" 
          args="head_pan_controller head_tilt_controller laser_tilt_controller" output="screen" />

    <!-- SmartArm Controllers -->
    <rosparam file="$(find smart_arm_description)/controllers/smart_arm_controllers.yaml" command="load" />
    <node name="smart_arm_controller_spawner" pkg="pr2_controller_manager" type="spawner" 
          args="shoulder_pan_controller shoulder_tilt_controller elbow_tilt_controller wrist_rotate_controller finger_left_controller finger_right_controller" output="screen" />

    <!-- Actions for Head, Laser, Arm, and Gripper -->
    <node name="wubble_head_action" pkg="wubble_actions" type="wubble_head_action.py" output="screen" />
    <node name="hokuyo_laser_action" pkg="wubble_actions" type="hokuyo_laser_action.py" output="screen" />
    <node name="smart_arm_action" pkg="wubble_actions" type="smart_arm_action.py" output="screen" />
    <node name="smart_arm_gripper_action" pkg="wubble_actions" type="smart_arm_gripper_action.py" output="screen" />

    <!-- enable navigation -->
    <include file="$(find wubble_description)/launch/wubble_move_base.launch" />

    <!-- enable stereo vision -->
    <group ns="stereo/">
        <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
            <param name="num_disp" type="int" value="128"/>
        </node>
    </group>

    <!-- put arm in initial position (already being done in arm & gripper actions) -->
    <!--node name="make_cobra_pose" pkg="smart_arm_description" type="make_cobra_pose.py"  output="screen" /-->

    <!-- filter the robot's arm out of the stereo cloud -->
    <node pkg="robot_self_filter" type="self_filter" name="stereo_self_filter" respawn="true" output="screen">
        <!-- The topic for the input cloud -->
        <remap from="cloud_in" to="/stereo/points" />
        <!-- The topic for the output cloud -->
        <remap from="cloud_out" to="/stereo/self_filtered" />
        <!-- The frame of the sensor used to obtain the data to be
        filtered; This parameter is optional. If it is not specified,
        shadow points will be considered outside -->
<!--        <param name="sensor_frame" type="string" value="laser_tilt_link" />-->
        <!-- Minimum distance to sensor (for point not to be considered inside) -->
        <param name="min_sensor_dist" type="double" value="0.01" />
        <!-- The padding to be added for the body parts the robot can see -->
        <param name="self_see_padd" type="double" value="0.02" />
        <!-- The scaling to be added for the body parts the robot can see -->
        <param name="self_see_scale" type="double" value="1.0" />
        <!-- The names of the links the sensor can see -->
        <param  name="self_see_links" type="string" 
                value= "arm_base_link
                        arm_elbow_tilt_link
                        arm_left_finger_link
                        arm_right_finger_link
                        arm_shoulder_pan_link
                        arm_wrist_rotate_link" />
    </node>

    <!-- Laser Filters -->

<!--    <node pkg="pr2_robot_actions" type="set_laser_tilt" name="action_set_laser_tilt" />-->

<!--    <node pkg="topic_tools" type="throttle" name="tilt_scan_throttle" args="messages tilt_scan 3.0 tilt_scan_throttled" />-->
<!--    <node pkg="topic_tools" type="throttle" name="tilt_scan_filtered_throttle" args="messages tilt_scan_filtered 3.0 tilt_scan_filtered_throttled" />-->
    
    <!-- The old tilting laser code was deleted/deprecated, this is the new way -->
<!--    <rosparam command="load" file="$(find wubble_robots)/pr2_laser_tilt_controller.yaml" />-->
<!--    <node pkg="pr2_mechanism_controllers" type="send_periodic_cmd_srv.py" name="laser_commander" args="laser_tilt_controller linear 10 .75 .25" />-->
<!--    <node pkg="pr2_controller_manager" type="spawner" name="laser_tilt_c_spawner" args="" />    -->

<!--    <node pkg="2dnav_pr2" type="navstack_tilt_profile.py" args="laser_tilt_controller" name="send_navstack_tilt_profile" />-->

    <!-- Filter for tilt laser shadowing/veiling -->
<!--    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" name="tilt_shadow_filter">-->
<!--        <remap from="scan" to="tilt_scan" />-->
<!--        <remap from="cloud_filtered" to="tilt_scan_shadow_filtered" />-->
<!--        <param name="target_frame" value="base_link" />-->
<!--        <param name="high_fidelity" value="true" />-->
<!--        <rosparam command="load" file="$(find 2dnav_pr2)/config/shadow_filter.yaml" />-->
<!--        <rosparam command="load" file="$(find 2dnav_pr2)/config/point_cloud_footprint_filter.yaml" />-->
<!--    </node>-->

</launch>

