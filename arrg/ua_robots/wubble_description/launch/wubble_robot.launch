<launch>
    <!-- Launch erratic base with tilting laser and navigation -->
    <include file="$(find wubble_description)/launch/wubble_robot_base.launch" />
    
    <!-- Head Controllers -->
    <rosparam file="$(find wubble_description)/controllers/wubble_head_controller.yaml" command="load" />
    <node name="head_controller_spawner" pkg="pr2_controller_manager" type="spawner" 
          args="head_pan_controller head_tilt_controller" output="screen" />
          
    <!-- SmartArm Controllers -->
    <rosparam file="$(find smart_arm_description)/controllers/smart_arm_controllers.yaml" command="load" />
    <node name="smart_arm_controller_spawner" pkg="pr2_controller_manager" type="spawner" 
          args="shoulder_pan_controller shoulder_tilt_controller elbow_tilt_controller wrist_rotate_controller finger_left_controller finger_right_controller" output="screen" />
          
    <!-- SmartArm Inverse Kinematics -->
    <node name="smart_arm_ik_service" pkg="smart_arm_kinematics" type="smart_arm_ik_service" output="screen" />
    
    <!-- Actions for Head, Base, Laser, Arm, and Gripper -->
    <node name="wubble_head_action" pkg="wubble_actions" type="wubble_head_action.py" output="screen" />
    <node name="erratic_base_action" pkg="wubble_actions" type="erratic_base_action.py" output="screen" />
    <node name="laser_action" pkg="wubble_actions" type="hokuyo_laser_action.py" output="screen" />
    <node name="smart_arm_action" pkg="wubble_actions" type="smart_arm_action.py" output="screen" />
    <node name="smart_arm_gripper_action" pkg="wubble_actions" type="smart_arm_gripper_action.py" output="screen" />
    
    <!-- enable stereo vision -->
    <group ns="stereo">
        <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
            <param name="num_disp" type="int" value="128"/>
        </node>
    </group>
    
    <!-- filter the robot (its arm, at least) out of the stereo cloud -->
    <node pkg="robot_self_filter" type="self_filter" name="stereo_self_filter" respawn="true" output="screen">
        <!-- The topic for the input cloud -->
        <remap from="cloud_in" to="/stereo/points" />
        <!-- The topic for the output cloud -->
        <remap from="cloud_out" to="/stereo/self_filtered" />
        <!-- The frame of the sensor used to obtain the data to be
        filtered; This parameter is optional. If it is not specified,
        shadow points will be considered outside -->
        <param name="sensor_frame" type="string" value="/stereo_optical_frame" />
        <rosparam file="$(find wubble_description)/params/self_filter.yaml" command="load" />
    </node>
    
    <node pkg="robot_self_filter" type="self_filter" name="laser_self_filter" respawn="true" output="screen">
        <!-- The topic for the input cloud -->
        <remap from="cloud_in" to="/tilt_scan_shadow_filtered" />
        <!-- The topic for the output cloud -->
        <remap from="cloud_out" to="/tilt_scan_self_filtered" />
        <!-- The frame of the sensor used to obtain the data to be
        filtered; This parameter is optional. If it is not specified,
        shadow points will be considered outside -->
        <param name="sensor_frame" type="string" value="/laser_link" />
        <rosparam file="$(find wubble_description)/params/self_filter.yaml" command="load" />
    </node>
</launch>

