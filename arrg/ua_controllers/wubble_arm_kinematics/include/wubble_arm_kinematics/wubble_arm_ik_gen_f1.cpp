/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 36 generated on 2011-03-02 13:11:41.325066
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKsin(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=((x2)*(x3));
x5=IKcos(j[1]);
x6=IKcos(j[2]);
x7=((x0)*(x5)*(x6));
x8=IKcos(j[3]);
x9=IKsin(j[1]);
x10=IKcos(j[5]);
x11=IKsin(j[4]);
x12=((x4)+(((-1.00000000000000)*(x7))));
x13=((x1)*(x12));
x14=((x0)*(x8)*(x9));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=((x11)*(x15));
x17=IKcos(j[4]);
x18=((x2)*(x6));
x19=((x0)*(x3)*(x5));
x20=((x19)+(x18));
x21=((-1.00000000000000)*(x20));
x22=((x17)*(x21));
x23=((x16)+(x22));
x24=IKsin(j[5]);
x25=((x0)*(x1)*(x9));
x26=((x7)+(((-1.00000000000000)*(x4))));
x27=((x26)*(x8));
x28=IKsin(j[6]);
x29=IKcos(j[6]);
x30=((x10)*(x23));
x31=((((-1.00000000000000)*(x27)))+(x25));
x32=((x24)*(x31));
x33=((x32)+(x30));
x34=((-1.00000000000000)*(x33));
x35=((0.0290000000000000)*(x7));
x36=((0.0290000000000000)*(x4));
x37=((x5)*(x8));
x38=((x1)*(x6)*(x9));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x1)*(x5));
x41=((x6)*(x8)*(x9));
x42=((x40)+(x41));
x43=((x11)*(x39));
x44=((x17)*(x3)*(x9));
x45=((((-1.00000000000000)*(x44)))+(x43));
x46=((-1.00000000000000)*(x42));
x47=((x0)*(x3));
x48=((x18)*(x5));
x49=((x48)+(x47));
x50=((x1)*(x2)*(x9));
x51=((x49)*(x8));
x52=((x50)+(((-1.00000000000000)*(x51))));
x53=((-1.00000000000000)*(x49));
x54=((x1)*(x53));
x55=((x2)*(x8)*(x9));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x11)*(x56));
x58=((x0)*(x6));
x59=((x4)*(x5));
x60=((x58)+(((-1.00000000000000)*(x59))));
x61=((x17)*(x60));
x62=((x57)+(x61));
x63=((x59)+(((-1.00000000000000)*(x58))));
x64=((x11)*(x63));
x65=((x17)*(x56));
x66=((x64)+(x65));
x67=((x24)*(x52));
x68=((x10)*(x62));
x69=((x67)+(x68));
x70=((0.0290000000000000)*(x47));
x71=((0.0290000000000000)*(x48));
eerot[0]=((((x23)*(x24)))+(((x10)*(((((-1.00000000000000)*(x25)))+(x27))))));
eerot[1]=((((x28)*(x34)))+(((x29)*(((((x11)*(x20)))+(((x15)*(x17))))))));
eerot[2]=((((x29)*(x34)))+(((x28)*(((((-1.00000000000000)*(x11)*(x20)))+(((-1.00000000000000)*(x15)*(x17))))))));
eetrans[0]=((0.0290000000000000)+(((x24)*(((((0.270500000000000)*(x16)))+(((0.270500000000000)*(x22)))))))+(((x1)*(((((-1.00000000000000)*(x35)))+(x36)))))+(((x10)*(((((-0.270500000000000)*(x25)))+(((0.270500000000000)*(x27)))))))+(((-1.00000000000000)*(x36)))+(((-0.239400000000000)*(x0)*(x9)))+(x35)+(((0.0690000000000000)*(x0)))+(((-0.0290000000000000)*(x2)))+(((x8)*(((((0.153000000000000)*(x7)))+(((-0.153000000000000)*(x4)))))))+(((-0.153000000000000)*(x25)))+(((-0.0290000000000000)*(x14))));
eerot[3]=((((x10)*(x42)))+(((x24)*(x45))));
eerot[4]=((((-1.00000000000000)*(x28)*(((((x10)*(((((-1.00000000000000)*(x44)))+(x43)))))+(((x24)*(x46)))))))+(((x29)*(((((x17)*(x39)))+(((x11)*(x3)*(x9))))))));
eerot[5]=((((x28)*(((((-1.00000000000000)*(x11)*(x3)*(x9)))+(((-1.00000000000000)*(x17)*(x39)))))))+(((x29)*(((((-1.00000000000000)*(x10)*(x45)))+(((-1.00000000000000)*(x24)*(x46))))))));
eetrans[1]=((0.0580000000000000)+(((0.0290000000000000)*(x37)))+(((0.0290000000000000)*(x6)*(x9)))+(((0.153000000000000)*(x40)))+(((0.153000000000000)*(x41)))+(((0.239400000000000)*(x5)))+(((-0.0290000000000000)*(x38)))+(((x10)*(((((0.270500000000000)*(x41)))+(((0.270500000000000)*(x40)))))))+(((x24)*(((((-0.270500000000000)*(x44)))+(((0.270500000000000)*(x43))))))));
eerot[6]=((((-1.00000000000000)*(x24)*(x62)))+(((x10)*(x52))));
eerot[7]=((((-1.00000000000000)*(x29)*(x66)))+(((x28)*(x69))));
eerot[8]=((((x29)*(x69)))+(((x28)*(x66))));
eetrans[2]=((((-0.0690000000000000)*(x2)))+(((-1.00000000000000)*(x71)))+(((-1.00000000000000)*(x70)))+(((x24)*(((((-0.270500000000000)*(x61)))+(((-0.270500000000000)*(x57)))))))+(((0.239400000000000)*(x2)*(x9)))+(((x10)*(((((0.270500000000000)*(x50)))+(((-0.270500000000000)*(x51)))))))+(((-0.0290000000000000)*(x0)))+(((x8)*(((((-0.153000000000000)*(x47)))+(((-0.153000000000000)*(x48)))))))+(((0.0290000000000000)*(x55)))+(((0.153000000000000)*(x50)))+(((x1)*(((x71)+(x70))))));
}

class IKSolver {
public:
IKReal j4, cj4, sj4, htj4,
j6, cj6, sj6, htj6,
j7, cj7, sj7, htj7,
j8, cj8, sj8, htj8,
j9, cj9, sj9, htj9,
j10, cj10, sj10, htj10,
j5, cj5, sj5, htj5,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((-0.0290000000000000)+(((-0.270500000000000)*(r00)))+(px));
new_r10=r22;
new_r11=((-1.00000000000000)*(r21));
new_r12=((-1.00000000000000)*(r20));
new_py=((((0.270500000000000)*(r20)))+(((-1.00000000000000)*(pz))));
new_r20=((-1.00000000000000)*(r12));
new_r21=r11;
new_r22=r10;
new_pz=((-0.0580000000000000)+(((-0.270500000000000)*(r10)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(px)*(px);
IKReal x1=(py)*(py);
IKReal x2=(sj5)*(sj5)*(sj5)*(sj5);
IKReal x3=(px)*(px)*(px)*(px);
IKReal x4=(sj5)*(sj5);
IKReal x5=(py)*(py)*(py)*(py);
IKReal x6=(sj5)*(sj5)*(sj5);
dummyeval[0]=((((-5.89739378793288)*(sj5)*(x5)))+(((-5.89739378793288)*(sj5)*(x3)))+(((x0)*(x1)))+(((27.7253728758319)*(x3)*(x4)))+(((-61.2197900770126)*(sj5)*(x3)*(x4)))+(((27.7253728758319)*(x4)*(x5)))+(((-11.7947875758658)*(sj5)*(x0)*(x1)))+(((0.500000000000000)*(x5)))+(((0.500000000000000)*(x3)))+(((-61.2197900770126)*(sj5)*(x4)*(x5)))+(((55.4507457516639)*(x0)*(x1)*(x4)))+(((53.8807237216371)*(x2)*(x5)))+(((53.8807237216371)*(x2)*(x3)))+(((-122.439580154025)*(sj5)*(x0)*(x1)*(x4)))+(((107.761447443274)*(x0)*(x1)*(x2))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j7evalpoly[1];
IKReal x7=(sj5)*(sj5)*(sj5)*(sj5);
IKReal x8=(px)*(px)*(px)*(px);
IKReal x9=(py)*(py)*(py)*(py);
IKReal x10=(sj5)*(sj5);
IKReal x11=(px)*(px);
IKReal x12=(py)*(py);
IKReal x13=(sj5)*(sj5)*(sj5);
IKReal x14=(pp)*(pp);
IKReal x15=(cj5)*(cj5);
IKReal x16=(pz)*(pz);
IKReal x17=(px)*(px)*(px)*(px)*(px)*(px);
IKReal x18=(py)*(py)*(py)*(py)*(py)*(py);
IKReal x19=(cj5)*(cj5)*(cj5);
IKReal x20=(pz)*(pz)*(pz);
IKReal x21=(pp)*(pp)*(pp);
IKReal x22=(cj5)*(cj5)*(cj5)*(cj5);
IKReal x23=(pz)*(pz)*(pz)*(pz);
IKReal x24=(pp)*(pp)*(pp)*(pp);
op[0]=((((215.522894886549)*(x11)*(x12)*(x7)))+(((-23.5895751517315)*(sj5)*(x11)*(x12)))+(x9)+(x8)+(((110.901491503328)*(x10)*(x11)*(x12)))+(((-244.879160308050)*(sj5)*(x10)*(x11)*(x12)))+(((-11.7947875758658)*(sj5)*(x8)))+(((-11.7947875758658)*(sj5)*(x9)))+(((107.761447443274)*(x7)*(x8)))+(((107.761447443274)*(x7)*(x9)))+(((55.4507457516639)*(x10)*(x9)))+(((55.4507457516639)*(x10)*(x8)))+(((-122.439580154025)*(sj5)*(x10)*(x8)))+(((-122.439580154025)*(sj5)*(x10)*(x9)))+(((2.00000000000000)*(x11)*(x12))));
op[1]=((((51.3298623098525)*(cj5)*(pz)*(sj5)*(x9)))+(((51.3298623098525)*(cj5)*(pz)*(sj5)*(x8)))+(((150.128169444462)*(x7)*(x9)))+(((150.128169444462)*(x7)*(x8)))+(((240.000938139291)*(cj5)*(pz)*(sj5)*(x10)*(x9)))+(((240.000938139291)*(cj5)*(pz)*(sj5)*(x10)*(x8)))+(((-14.8809442271354)*(sj5)*(x9)))+(((-14.8809442271354)*(sj5)*(x8)))+(((74.9706951551607)*(x10)*(x9)))+(((74.9706951551607)*(x10)*(x8)))+(((-4.78350515463918)*(cj5)*(pz)*(x9)))+(((-4.78350515463918)*(cj5)*(pz)*(x8)))+(((-195.177546359714)*(cj5)*(pz)*(x10)*(x8)))+(((-195.177546359714)*(cj5)*(pz)*(x10)*(x9)))+(((-643.307099178069)*(pp)*(x10)*(x11)*(x12)))+(((1293.82371451895)*(pp)*(sj5)*(x10)*(x9)))+(((1293.82371451895)*(pp)*(sj5)*(x10)*(x8)))+(((1.14517113402062)*(x9)))+(((1.14517113402062)*(x8)))+(((-321.653549589034)*(pp)*(x10)*(x9)))+(((-321.653549589034)*(pp)*(x10)*(x8)))+(((2587.64742903791)*(pp)*(sj5)*(x10)*(x11)*(x12)))+(((300.256338888923)*(x11)*(x12)*(x7)))+(((58.9185747358270)*(pp)*(sj5)*(x11)*(x12)))+(((149.941390310321)*(x10)*(x11)*(x12)))+(((-9.56701030927835)*(cj5)*(pz)*(x11)*(x12)))+(((-1739.13723289341)*(pp)*(x7)*(x8)))+(((-1739.13723289341)*(pp)*(x7)*(x9)))+(((2.29034226804124)*(x11)*(x12)))+(((-29.7618884542707)*(sj5)*(x11)*(x12)))+(((102.659724619705)*(cj5)*(pz)*(sj5)*(x11)*(x12)))+(((-340.581792329347)*(sj5)*(x10)*(x11)*(x12)))+(((29.4592873679135)*(pp)*(sj5)*(x8)))+(((29.4592873679135)*(pp)*(sj5)*(x9)))+(((-170.290896164674)*(sj5)*(x10)*(x9)))+(((-170.290896164674)*(sj5)*(x10)*(x8)))+(((-3478.27446578682)*(pp)*(x11)*(x12)*(x7)))+(((-390.355092719428)*(cj5)*(pz)*(x10)*(x11)*(x12)))+(((480.001876278581)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x12))));
op[2]=((((-42.2276258050802)*(cj5)*(pz)*(x8)))+(((-42.2276258050802)*(cj5)*(pz)*(x9)))+(((90448.4589327454)*(x11)*(x12)*(x14)*(x7)))+(((-24963.7746654377)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x11)*(x12)))+(((6.24801526722075)*(x11)*(x12)))+(((520.118918341759)*(pp)*(sj5)*(x11)*(x12)))+(((-213.935142797231)*(sj5)*(x10)*(x8)))+(((-213.935142797231)*(sj5)*(x10)*(x9)))+(((260.059459170880)*(pp)*(sj5)*(x8)))+(((260.059459170880)*(pp)*(sj5)*(x9)))+(((-194.150530754401)*(sj5)*(x10)*(x12)*(x8)))+(((-1030.56394144974)*(cj5)*(pz)*(x10)*(x9)))+(((-1030.56394144974)*(cj5)*(pz)*(x10)*(x8)))+(((-2172.59364386700)*(cj5)*(pp)*(pz)*(sj5)*(x11)*(x12)))+(((1062.99884341433)*(cj5)*(pz)*(sj5)*(x10)*(x9)))+(((1062.99884341433)*(cj5)*(pz)*(sj5)*(x10)*(x8)))+(((2830.76704562842)*(x10)*(x14)*(x8)))+(((2830.76704562842)*(x10)*(x14)*(x9)))+(((314.774136682689)*(x12)*(x7)*(x8)))+(((-1083.35894449430)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((-62.8429960041410)*(sj5)*(x11)*(x12)))+(((-4720.71613992192)*(pp)*(x10)*(x11)*(x12)))+(((-541.679472247150)*(sj5)*(x15)*(x16)*(x8)))+(((-541.679472247150)*(sj5)*(x15)*(x16)*(x9)))+(((354.956074193049)*(cj5)*(pz)*(sj5)*(x8)))+(((354.956074193049)*(cj5)*(pz)*(sj5)*(x9)))+(((176.389414390477)*(x11)*(x12)*(x15)*(x16)))+(((-7807.81488189660)*(pp)*(x7)*(x8)))+(((-7807.81488189660)*(pp)*(x7)*(x9)))+(((-12481.8873327189)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x8)))+(((-12481.8873327189)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x9)))+(((104.924712227563)*(x11)*(x7)*(x8)))+(((11.5226527549697)*(x10)*(x11)*(x8)))+(((-24173.4859089232)*(sj5)*(x10)*(x14)*(x8)))+(((-24173.4859089232)*(sj5)*(x10)*(x14)*(x9)))+(((-64.7168435848005)*(sj5)*(x10)*(x12)*(x9)))+(((34.5679582649092)*(x10)*(x12)*(x8)))+(((-2061.12788289947)*(cj5)*(pz)*(x10)*(x11)*(x12)))+(((104.924712227563)*(x12)*(x7)*(x9)))+(((11.5226527549697)*(x10)*(x12)*(x9)))+(((-48346.9718178463)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((-84.4552516101605)*(cj5)*(pz)*(x11)*(x12)))+(((709.912148386098)*(cj5)*(pz)*(sj5)*(x11)*(x12)))+(((-64.7168435848005)*(sj5)*(x10)*(x11)*(x8)))+(((-427.870285594462)*(sj5)*(x10)*(x11)*(x12)))+(((121.832714932974)*(x10)*(x9)))+(((121.832714932974)*(x10)*(x8)))+(((7730.11725711220)*(cj5)*(pp)*(pz)*(x10)*(x9)))+(((7730.11725711220)*(cj5)*(pp)*(pz)*(x10)*(x8)))+(((7234.65510568591)*(pp)*(sj5)*(x10)*(x9)))+(((7234.65510568591)*(pp)*(sj5)*(x10)*(x8)))+(((34.5679582649092)*(x10)*(x11)*(x9)))+(((88.1947071952386)*(x15)*(x16)*(x9)))+(((88.1947071952386)*(x15)*(x16)*(x8)))+(((243.665429865947)*(x10)*(x11)*(x12)))+(((15460.2345142244)*(cj5)*(pp)*(pz)*(x10)*(x11)*(x12)))+(((14469.3102113718)*(pp)*(sj5)*(x10)*(x11)*(x12)))+(((2125.99768682865)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x12)))+(((5661.53409125685)*(x10)*(x11)*(x12)*(x14)))+(((314.774136682689)*(x11)*(x7)*(x9)))+(((140.766652045629)*(x7)*(x9)))+(((140.766652045629)*(x7)*(x8)))+(((-31.4214980020705)*(sj5)*(x8)))+(((-31.4214980020705)*(sj5)*(x9)))+(((-1086.29682193350)*(cj5)*(pp)*(pz)*(sj5)*(x9)))+(((-1086.29682193350)*(cj5)*(pp)*(pz)*(sj5)*(x8)))+(((-15615.6297637932)*(pp)*(x11)*(x12)*(x7)))+(((-2360.35806996096)*(pp)*(x10)*(x8)))+(((-2360.35806996096)*(pp)*(x10)*(x9)))+(((281.533304091257)*(x11)*(x12)*(x7)))+(((3.12400763361037)*(x9)))+(((3.12400763361037)*(x8)))+(((45224.2294663727)*(x14)*(x7)*(x8)))+(((45224.2294663727)*(x14)*(x7)*(x9)))+(((756.325513730039)*(x10)*(x15)*(x16)*(x8)))+(((756.325513730039)*(x10)*(x15)*(x16)*(x9)))+(((1512.65102746008)*(x10)*(x11)*(x12)*(x15)*(x16)))+(((-194.150530754401)*(sj5)*(x10)*(x11)*(x9))));
op[3]=((((-268.591883161562)*(x11)*(x7)*(x9)))+(((127640.250313797)*(cj5)*(pz)*(sj5)*(x10)*(x14)*(x8)))+(((127640.250313797)*(cj5)*(pz)*(sj5)*(x10)*(x14)*(x9)))+(((150.943723171738)*(sj5)*(x10)*(x11)*(x9)))+(((88.8400203546939)*(cj5)*(pz)*(x10)*(x11)*(x9)))+(((54213.4940170733)*(pp)*(sj5)*(x10)*(x14)*(x8)))+(((54213.4940170733)*(pp)*(sj5)*(x10)*(x14)*(x9)))+(((-394.515889042406)*(cj5)*(pz)*(x11)*(x12)*(x15)*(x16)))+(((141.670655755128)*(x15)*(x16)*(x9)))+(((141.670655755128)*(x15)*(x16)*(x8)))+(((-44359.5956480159)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x11)*(x12)))+(((180.434284161833)*(pp)*(sj5)*(x8)))+(((180.434284161833)*(pp)*(sj5)*(x9)))+(((7288.89584360747)*(pp)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((-143.127267351871)*(cj5)*(pz)*(sj5)*(x10)*(x12)*(x9)))+(((-89.5306277205206)*(x11)*(x7)*(x8)))+(((124.812920852288)*(x11)*(x12)*(x7)))+(((-47531.8773051720)*(cj5)*(pz)*(x10)*(x11)*(x12)*(x14)))+(((-429.381802055614)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x9)))+(((-18651.5086545495)*(pp)*(x10)*(x15)*(x16)*(x9)))+(((-18651.5086545495)*(pp)*(x10)*(x15)*(x16)*(x8)))+(((1037.15411124545)*(pp)*(x12)*(x7)*(x9)))+(((-182.374193873435)*(pp)*(sj5)*(x10)*(x11)*(x8)))+(((-308309.783366660)*(pp)*(x14)*(x7)*(x9)))+(((-308309.783366660)*(pp)*(x14)*(x7)*(x8)))+(((150.943723171738)*(sj5)*(x10)*(x12)*(x8)))+(((1037.15411124545)*(pp)*(x11)*(x7)*(x8)))+(((1492.42771251915)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x12)))+(((-10635.6323135383)*(pp)*(x11)*(x12)*(x7)))+(((-37303.0173090990)*(pp)*(x10)*(x11)*(x12)*(x15)*(x16)))+(((-22179.7978240080)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x9)))+(((-22179.7978240080)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x8)))+(((-1744.96166495963)*(cj5)*(pp)*(pz)*(sj5)*(x8)))+(((-1744.96166495963)*(cj5)*(pp)*(pz)*(sj5)*(x9)))+(((-21.2683008729137)*(x10)*(x11)*(x9)))+(((-547.122581620304)*(pp)*(sj5)*(x10)*(x11)*(x9)))+(((-268.591883161562)*(x12)*(x7)*(x8)))+(((-29.2983437644808)*(cj5)*(pz)*(x8)))+(((-29.2983437644808)*(cj5)*(pz)*(x9)))+(((-429.381802055614)*(cj5)*(pz)*(sj5)*(x10)*(x12)*(x8)))+(((-23765.9386525860)*(cj5)*(pz)*(x10)*(x14)*(x8)))+(((-23765.9386525860)*(cj5)*(pz)*(x10)*(x14)*(x9)))+(((132.473269402244)*(x10)*(x11)*(x12)))+(((26167.5779547951)*(cj5)*(pp)*(pz)*(x10)*(x11)*(x12)))+(((5689.56571342908)*(x10)*(x14)*(x9)))+(((5689.56571342908)*(x10)*(x14)*(x8)))+(((537.128380082149)*(cj5)*(pz)*(sj5)*(x11)*(x12)))+(((-143.127267351871)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x8)))+(((11379.1314268582)*(x10)*(x11)*(x12)*(x14)))+(((953.387576343857)*(cj5)*(pz)*(sj5)*(x15)*(x16)*(x9)))+(((953.387576343857)*(cj5)*(pz)*(sj5)*(x15)*(x16)*(x8)))+(((3111.46233373634)*(pp)*(x11)*(x7)*(x9)))+(((-547.122581620304)*(pp)*(sj5)*(x10)*(x12)*(x8)))+(((255280.500627595)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((29.6133401182313)*(cj5)*(pz)*(x10)*(x11)*(x8)))+(((3111.46233373634)*(pp)*(x12)*(x7)*(x8)))+(((-1757.32947182576)*(pp)*(x10)*(x8)))+(((-1757.32947182576)*(pp)*(x10)*(x9)))+(((-182.374193873435)*(pp)*(sj5)*(x10)*(x12)*(x9)))+(((66.2366347011222)*(x10)*(x8)))+(((66.2366347011222)*(x10)*(x9)))+(((29.6133401182313)*(cj5)*(pz)*(x10)*(x12)*(x9)))+(((10657.6555347505)*(pp)*(sj5)*(x10)*(x11)*(x12)))+(((79843.0092632467)*(x14)*(x7)*(x8)))+(((79843.0092632467)*(x14)*(x7)*(x9)))+(((-89.5306277205206)*(x12)*(x7)*(x9)))+(((108426.988034147)*(pp)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((62.4064604261441)*(x7)*(x9)))+(((62.4064604261441)*(x7)*(x8)))+(((-616619.566733320)*(pp)*(x11)*(x12)*(x14)*(x7)))+(((1906.77515268771)*(cj5)*(pz)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((-3514.65894365152)*(pp)*(x10)*(x11)*(x12)))+(((-7.08943362430458)*(x10)*(x12)*(x9)))+(((283.341311510256)*(x11)*(x12)*(x15)*(x16)))+(((-44687.9359047408)*(sj5)*(x10)*(x14)*(x9)))+(((-44687.9359047408)*(sj5)*(x10)*(x14)*(x8)))+(((5328.82776737525)*(pp)*(sj5)*(x10)*(x8)))+(((5328.82776737525)*(pp)*(sj5)*(x10)*(x9)))+(((-217.515216874657)*(sj5)*(x10)*(x11)*(x12)))+(((3259.62491804870)*(x10)*(x11)*(x12)*(x15)*(x16)))+(((-779.112578796226)*(cj5)*(pz)*(x10)*(x9)))+(((-779.112578796226)*(cj5)*(pz)*(x10)*(x8)))+(((-197.257944521203)*(cj5)*(pz)*(x15)*(x16)*(x8)))+(((-197.257944521203)*(cj5)*(pz)*(x15)*(x16)*(x9)))+(((-5317.81615676917)*(pp)*(x7)*(x9)))+(((-5317.81615676917)*(pp)*(x7)*(x8)))+(((-34.4953932954612)*(sj5)*(x11)*(x12)))+(((-1558.22515759245)*(cj5)*(pz)*(x10)*(x11)*(x12)))+(((-7.08943362430458)*(x10)*(x11)*(x8)))+(((-3489.92332991926)*(cj5)*(pp)*(pz)*(sj5)*(x11)*(x12)))+(((50.3145743905794)*(sj5)*(x10)*(x12)*(x9)))+(((-58.5966875289616)*(cj5)*(pz)*(x11)*(x12)))+(((3644.44792180373)*(pp)*(sj5)*(x15)*(x16)*(x8)))+(((3644.44792180373)*(pp)*(sj5)*(x15)*(x16)*(x9)))+(((360.868568323666)*(pp)*(sj5)*(x11)*(x12)))+(((3.20207416233479)*(x11)*(x12)))+(((746.213856259577)*(cj5)*(pz)*(sj5)*(x10)*(x9)))+(((746.213856259577)*(cj5)*(pz)*(sj5)*(x10)*(x8)))+(((1.60103708116739)*(x8)))+(((1.60103708116739)*(x9)))+(((-89375.8718094816)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((268.564190041074)*(cj5)*(pz)*(sj5)*(x9)))+(((268.564190041074)*(cj5)*(pz)*(sj5)*(x8)))+(((-1005.45390868975)*(sj5)*(x15)*(x16)*(x8)))+(((-1005.45390868975)*(sj5)*(x15)*(x16)*(x9)))+(((159686.018526493)*(x11)*(x12)*(x14)*(x7)))+(((-108.757608437329)*(sj5)*(x10)*(x9)))+(((-108.757608437329)*(sj5)*(x10)*(x8)))+(((88.8400203546939)*(cj5)*(pz)*(x10)*(x12)*(x8)))+(((1629.81245902435)*(x10)*(x15)*(x16)*(x8)))+(((1629.81245902435)*(x10)*(x15)*(x16)*(x9)))+(((13083.7889773975)*(cj5)*(pp)*(pz)*(x10)*(x9)))+(((13083.7889773975)*(cj5)*(pp)*(pz)*(x10)*(x8)))+(((50.3145743905794)*(sj5)*(x10)*(x11)*(x8)))+(((-17.2476966477306)*(sj5)*(x9)))+(((-17.2476966477306)*(sj5)*(x8)))+(((-21.2683008729137)*(x10)*(x12)*(x8)))+(((-2010.90781737950)*(sj5)*(x11)*(x12)*(x15)*(x16))));
op[4]=((((340.000365019113)*(pp)*(sj5)*(x8)))+(((340.000365019113)*(pp)*(sj5)*(x9)))+(((39.4645343154866)*(x11)*(x12)*(x7)))+(((233655.671410646)*(x11)*(x12)*(x14)*(x7)))+(((733.389685272887)*(cj5)*(pz)*(x10)*(x12)*(x8)))+(((-553.445054708324)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x8)))+(((819515.125951241)*(x10)*(x11)*(x12)*(x14)*(x15)*(x16)))+(((38.3250117560116)*(x7)*((x8)*(x8))))+(((-510.574829624678)*(x10)*(x11)*(x15)*(x16)*(x8)))+(((3386650.05104156)*(x24)*(x7)*(x8)))+(((3386650.05104156)*(x24)*(x7)*(x9)))+(((-1505.53041425173)*(pp)*(sj5)*(x10)*(x12)*(x9)))+(((-32787.3500061328)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x8)))+(((-32787.3500061328)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x9)))+(((6288.76530598050)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x12)*(x9)))+(((-1531.72448887403)*(x10)*(x12)*(x15)*(x16)*(x8)))+(((-1660.33516412497)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x9)))+(((-4516.59124275520)*(pp)*(sj5)*(x10)*(x12)*(x8)))+(((-41.2142946290723)*(x10)*(x12)*(x9)))+(((-286.882381814718)*(x12)*(x7)*(x9)))+(((1010.28771601658)*(x11)*(x12)*(x15)*(x16)))+(((-3738861.65634988)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((6773300.10208312)*(x11)*(x12)*(x24)*(x7)))+(((-14.3692050446005)*(sj5)*(x9)))+(((-14.3692050446005)*(sj5)*(x8)))+(((-192361.533674180)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((-96180.7668370900)*(sj5)*(x10)*(x14)*(x8)))+(((-96180.7668370900)*(sj5)*(x10)*(x14)*(x9)))+(((-392383.842305454)*(cj5)*(pz)*(x10)*(x11)*(x12)*(x14)))+(((-2188.95454880807)*(sj5)*(x15)*(x16)*(x9)))+(((-2188.95454880807)*(sj5)*(x15)*(x16)*(x8)))+(((201.362280435178)*(sj5)*(x10)*(x12)*(x9)))+(((-83780.4119954881)*(cj5)*(pp)*(pz)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((-4126.10155479374)*(pp)*(x10)*(x11)*(x12)))+(((417.990219444758)*(cj5)*(pz)*(sj5)*(x10)*(x8)))+(((417.990219444758)*(cj5)*(pz)*(sj5)*(x10)*(x9)))+(((-55.2081752126687)*(cj5)*(pz)*(x9)))+(((-55.2081752126687)*(cj5)*(pz)*(x8)))+(((-46.7742877347762)*(sj5)*(x10)*(x9)))+(((-46.7742877347762)*(sj5)*(x10)*(x8)))+(((41996.0240536310)*(x10)*(x11)*(x12)*(x14)))+(((-860.647145444155)*(x11)*(x7)*(x9)))+(((-1869430.82817494)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x14)*(x9)))+(((-1869430.82817494)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x14)*(x8)))+(((604.086841305533)*(sj5)*(x10)*(x12)*(x8)))+(((655.831747599145)*(cj5)*(pz)*(sj5)*(x11)*(x12)))+(((-71611.1488551596)*(pp)*(x10)*(x15)*(x16)*(x9)))+(((-71611.1488551596)*(pp)*(x10)*(x15)*(x16)*(x8)))+(((-41890.2059977441)*(cj5)*(pp)*(pz)*(sj5)*(x15)*(x16)*(x9)))+(((-41890.2059977441)*(cj5)*(pp)*(pz)*(sj5)*(x15)*(x16)*(x8)))+(((-196191.921152727)*(cj5)*(pz)*(x10)*(x14)*(x8)))+(((-196191.921152727)*(cj5)*(pz)*(x10)*(x14)*(x9)))+(((11801.4641622536)*(pp)*(x12)*(x7)*(x8)))+(((-41.2142946290723)*(x10)*(x11)*(x8)))+(((-123.642883887217)*(x10)*(x11)*(x9)))+(((3933.82138741786)*(pp)*(x12)*(x7)*(x9)))+(((60171.0918951596)*(pp)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((505.143858008290)*(x15)*(x16)*(x8)))+(((505.143858008290)*(x15)*(x16)*(x9)))+(((79.5910487363137)*(x10)*(x11)*(x12)))+(((-68356.1446302228)*(x11)*(x14)*(x7)*(x9)))+(((487271.033779921)*(cj5)*(pz)*(sj5)*(x10)*(x14)*(x9)))+(((487271.033779921)*(cj5)*(pz)*(sj5)*(x10)*(x14)*(x8)))+(((2587.39724101276)*(x10)*(x15)*(x16)*(x8)))+(((2587.39724101276)*(x10)*(x15)*(x16)*(x9)))+(((-110.416350425337)*(cj5)*(pz)*(x11)*(x12)))+(((-664.939636144526)*(cj5)*(pz)*(x10)*(x9)))+(((-664.939636144526)*(cj5)*(pz)*(x10)*(x8)))+(((733.389685272887)*(cj5)*(pz)*(x10)*(x11)*(x9)))+(((-1505.53041425173)*(pp)*(sj5)*(x10)*(x11)*(x8)))+(((244.463228424296)*(cj5)*(pz)*(x10)*(x12)*(x9)))+(((409757.562975620)*(x10)*(x14)*(x15)*(x16)*(x9)))+(((409757.562975620)*(x10)*(x14)*(x15)*(x16)*(x8)))+(((18866.2959179415)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x11)*(x9)))+(((30085.5459475798)*(pp)*(sj5)*(x15)*(x16)*(x8)))+(((30085.5459475798)*(pp)*(sj5)*(x15)*(x16)*(x9)))+(((19.7322671577433)*(x7)*(x9)))+(((19.7322671577433)*(x7)*(x8)))+(((-510.574829624678)*(x10)*(x12)*(x15)*(x16)*(x9)))+(((-2742.03225184295)*(pp)*(x7)*(x9)))+(((-2742.03225184295)*(pp)*(x7)*(x8)))+(((-22785.3815434076)*(x11)*(x14)*(x7)*(x8)))+(((-6221.87186764941)*(cj5)*(pp)*(pz)*(sj5)*(x8)))+(((-6221.87186764941)*(cj5)*(pp)*(pz)*(sj5)*(x9)))+(((-4516.59124275520)*(pp)*(sj5)*(x10)*(x11)*(x9)))+(((447541.740265081)*(pp)*(sj5)*(x10)*(x14)*(x8)))+(((447541.740265081)*(pp)*(sj5)*(x10)*(x14)*(x9)))+(((604.086841305533)*(sj5)*(x10)*(x11)*(x9)))+(((1700.49952173451)*(x22)*(x23)*(x8)))+(((1700.49952173451)*(x22)*(x23)*(x9)))+(((6288.76530598050)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x11)*(x8)))+(((18866.2959179415)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x12)*(x8)))+(((1.95461846196552)*(x9)))+(((1.95461846196552)*(x8)))+(((-12443.7437352988)*(cj5)*(pp)*(pz)*(sj5)*(x11)*(x12)))+(((-1660.33516412497)*(cj5)*(pz)*(sj5)*(x10)*(x12)*(x8)))+(((27639.0883167021)*(cj5)*(pp)*(pz)*(x10)*(x9)))+(((27639.0883167021)*(cj5)*(pp)*(pz)*(x10)*(x8)))+(((3933.82138741786)*(pp)*(x11)*(x7)*(x8)))+(((4246.01445013141)*(pp)*(sj5)*(x10)*(x8)))+(((4246.01445013141)*(pp)*(sj5)*(x10)*(x9)))+(((55278.1766334042)*(cj5)*(pp)*(pz)*(x10)*(x11)*(x12)))+(((7373.12531861125)*(cj5)*(pz)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((-123.642883887217)*(x10)*(x12)*(x8)))+(((39.7955243681568)*(x10)*(x8)))+(((39.7955243681568)*(x10)*(x9)))+(((-2338776.09240063)*(pp)*(x11)*(x12)*(x14)*(x7)))+(((-93.5485754695523)*(sj5)*(x10)*(x11)*(x12)))+(((-22785.3815434076)*(x12)*(x14)*(x7)*(x9)))+(((835.980438889517)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x12)))+(((-68356.1446302228)*(x12)*(x14)*(x7)*(x8)))+(((-3256.79668402593)*(cj5)*(pz)*(x11)*(x12)*(x15)*(x16)))+(((-1531.72448887403)*(x10)*(x11)*(x15)*(x16)*(x9)))+(((974542.067559842)*(cj5)*(pz)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((11801.4641622536)*(pp)*(x11)*(x7)*(x9)))+(((-1169388.04620032)*(pp)*(x14)*(x7)*(x9)))+(((-1169388.04620032)*(pp)*(x14)*(x7)*(x8)))+(((-553.445054708324)*(cj5)*(pz)*(sj5)*(x10)*(x12)*(x9)))+(((-5484.06450368590)*(pp)*(x11)*(x12)*(x7)))+(((3686.56265930563)*(cj5)*(pz)*(sj5)*(x15)*(x16)*(x8)))+(((3686.56265930563)*(cj5)*(pz)*(sj5)*(x15)*(x16)*(x9)))+(((895083.480530162)*(pp)*(sj5)*(x10)*(x11)*(x12)*(x14)))+(((201.362280435178)*(sj5)*(x10)*(x11)*(x8)))+(((680.000730038226)*(pp)*(sj5)*(x11)*(x12)))+(((5174.79448202551)*(x10)*(x11)*(x12)*(x15)*(x16)))+(((116827.835705323)*(x14)*(x7)*(x9)))+(((116827.835705323)*(x14)*(x7)*(x8)))+(((229.950070536070)*(x7)*(x8)*(x9)))+(((-286.882381814718)*(x11)*(x7)*(x8)))+(((38.3250117560116)*(x7)*((x9)*(x9))))+(((3400.99904346902)*(x11)*(x12)*(x22)*(x23)))+(((244.463228424296)*(cj5)*(pz)*(x10)*(x11)*(x8)))+(((-65574.7000122656)*(cj5)*(pp)*(pz)*(sj5)*(x10)*(x11)*(x12)))+(((327.915873799572)*(cj5)*(pz)*(sj5)*(x9)))+(((327.915873799572)*(cj5)*(pz)*(sj5)*(x8)))+(((-2063.05077739687)*(pp)*(x10)*(x8)))+(((-2063.05077739687)*(pp)*(x10)*(x9)))+(((-143222.297710319)*(pp)*(x10)*(x11)*(x12)*(x15)*(x16)))+(((-28.7384100892011)*(sj5)*(x11)*(x12)))+(((-1329.87927228905)*(cj5)*(pz)*(x10)*(x11)*(x12)))+(((153.300047024046)*(x11)*(x12)*(x7)*(x9)))+(((153.300047024046)*(x11)*(x12)*(x7)*(x8)))+(((-1628.39834201297)*(cj5)*(pz)*(x15)*(x16)*(x8)))+(((-1628.39834201297)*(cj5)*(pz)*(x15)*(x16)*(x9)))+(((8492.02890026282)*(pp)*(sj5)*(x10)*(x11)*(x12)))+(((3.90923692393104)*(x11)*(x12)))+(((20998.0120268155)*(x10)*(x14)*(x9)))+(((20998.0120268155)*(x10)*(x14)*(x8)))+(((-4377.90909761613)*(sj5)*(x11)*(x12)*(x15)*(x16)))+(((-860.647145444155)*(x12)*(x7)*(x8))));
polyroots4(op,zeror,numroots);
IKReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IKReal cj7 = zeror[ij7];
IKReal x25=x12;
IKReal x26=x11;
IKReal x27=x10;
IKReal x28=x14;
IKReal x29=x15;
IKReal x30=x16;
tempj7array[0]=IKatan2(((((IKabs(((((cj7)*(((((-0.000198848592000000)*(x25)))+(((-0.000198848592000000)*(x26)))+(((-0.00325795216896000)*(x26)*(x27)))+(((0.00153395699520000)*(sj5)*(x26)))+(((0.00153395699520000)*(sj5)*(x25)))+(((-0.00325795216896000)*(x25)*(x27)))))))+(((-0.0197545344000000)*(cj5)*(pz)*(sj5)*(x26)))+(((-0.0197545344000000)*(cj5)*(pz)*(sj5)*(x25)))+(((0.00844552587744000)*(sj5)*(x25)))+(((0.00844552587744000)*(sj5)*(x26)))+(((-0.0422280000000000)*(pp)*(sj5)*(x26)))+(((-0.0422280000000000)*(pp)*(sj5)*(x25)))+(((0.143148800000000)*(pp)*(x25)*(x27)))+(((-0.0123570853959680)*(x26)*(x27)))+(((0.00685684800000000)*(cj5)*(pz)*(x26)))+(((0.00685684800000000)*(cj5)*(pz)*(x25)))+(((0.143148800000000)*(pp)*(x26)*(x27)))+(((-0.0123570853959680)*(x25)*(x27)))+(((-0.00164152941120000)*(x25)))+(((-0.00164152941120000)*(x26))))) != 0)?((IKReal)1/(((((cj7)*(((((-0.000198848592000000)*(x25)))+(((-0.000198848592000000)*(x26)))+(((-0.00325795216896000)*(x26)*(x27)))+(((0.00153395699520000)*(sj5)*(x26)))+(((0.00153395699520000)*(sj5)*(x25)))+(((-0.00325795216896000)*(x25)*(x27)))))))+(((-0.0197545344000000)*(cj5)*(pz)*(sj5)*(x26)))+(((-0.0197545344000000)*(cj5)*(pz)*(sj5)*(x25)))+(((0.00844552587744000)*(sj5)*(x25)))+(((0.00844552587744000)*(sj5)*(x26)))+(((-0.0422280000000000)*(pp)*(sj5)*(x26)))+(((-0.0422280000000000)*(pp)*(sj5)*(x25)))+(((0.143148800000000)*(pp)*(x25)*(x27)))+(((-0.0123570853959680)*(x26)*(x27)))+(((0.00685684800000000)*(cj5)*(pz)*(x26)))+(((0.00685684800000000)*(cj5)*(pz)*(x25)))+(((0.143148800000000)*(pp)*(x26)*(x27)))+(((-0.0123570853959680)*(x25)*(x27)))+(((-0.00164152941120000)*(x25)))+(((-0.00164152941120000)*(x26)))))):(IKReal)1.0e30))*(((((-0.00336400000000000)*(x27)*((x25)*(x25))))+(((-0.00672800000000000)*(x25)*(x26)*(x27)))+(((0.0224080000000000)*(x26)*(x29)*(x30)))+(((-0.0107289504000000)*(cj5)*(pz)*(x25)))+(((-0.0107289504000000)*(cj5)*(pz)*(x26)))+(((0.0125906332210496)*(x26)*(x27)))+(((0.00180880423488000)*(x26)))+(((0.00180880423488000)*(x25)))+(((-0.172646720000000)*(pp)*(x26)*(x27)))+(((-0.00336400000000000)*(x27)*((x26)*(x26))))+((((cj7)*(cj7))*(((((-0.00460491355072000)*(x25)*(x27)))+(((-0.000505703744000000)*(x25)))+(((-0.000505703744000000)*(x26)))+(((-0.00460491355072000)*(x26)*(x27)))+(((0.00284027912640000)*(sj5)*(x25)))+(((0.00284027912640000)*(sj5)*(x26)))))))+(((cj7)*(((((-0.00129966400000000)*(cj5)*(pz)*(x25)))+(((-0.00129966400000000)*(cj5)*(pz)*(x26)))+(((0.00392930122982400)*(x25)*(x27)))+(((0.00800400000000000)*(pp)*(sj5)*(x25)))+(((0.00800400000000000)*(pp)*(sj5)*(x26)))+(((-0.00220819538592000)*(sj5)*(x25)))+(((-0.00220819538592000)*(sj5)*(x26)))+(((0.00628153920000000)*(cj5)*(pz)*(sj5)*(x26)))+(((0.00628153920000000)*(cj5)*(pz)*(sj5)*(x25)))+(((-0.0455184000000000)*(pp)*(x25)*(x27)))+(((0.00392930122982400)*(x26)*(x27)))+(((0.000311139561600000)*(x26)))+(((0.000311139561600000)*(x25)))+(((-0.0455184000000000)*(pp)*(x26)*(x27)))))))+(((0.0224080000000000)*(x25)*(x29)*(x30)))+(((x25)*(x27)*(x28)))+(((0.0660744000000000)*(pp)*(sj5)*(x25)))+(((0.0660744000000000)*(pp)*(sj5)*(x26)))+(((0.0242894793600000)*(cj5)*(pz)*(sj5)*(x25)))+(((0.0242894793600000)*(cj5)*(pz)*(sj5)*(x26)))+(((-0.00883734512198400)*(sj5)*(x25)))+(((-0.00883734512198400)*(sj5)*(x26)))+(((x26)*(x27)*(x28)))+(((0.0125906332210496)*(x25)*(x27)))+(((-0.276000000000000)*(cj5)*(pp)*(pz)*(sj5)*(x26)))+(((-0.276000000000000)*(cj5)*(pp)*(pz)*(sj5)*(x25)))+(((-0.172646720000000)*(pp)*(x25)*(x27)))))), cj7);
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
bool valid = true;
for( int kj7 = 0; kj7 < numsolutions; ++kj7)
{
    if( IKabs(cj7array[kj7]-cj7array[numsolutions]) < 0.0001 && IKabs(sj7array[kj7]-sj7array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

IKReal x31=x12;
IKReal x32=x11;
IKReal x33=x10;
j7evalpoly[0]=((((0.143148800000000)*(pp)*(x32)*(x33)))+(((0.00685684800000000)*(cj5)*(pz)*(x31)))+(((0.00685684800000000)*(cj5)*(pz)*(x32)))+(((0.00844552587744000)*(sj5)*(x32)))+(((0.00844552587744000)*(sj5)*(x31)))+(((0.143148800000000)*(pp)*(x31)*(x33)))+(((-0.00164152941120000)*(x32)))+(((-0.00164152941120000)*(x31)))+(((-0.0422280000000000)*(pp)*(sj5)*(x32)))+(((-0.0422280000000000)*(pp)*(sj5)*(x31)))+(((-0.0197545344000000)*(cj5)*(pz)*(sj5)*(x32)))+(((-0.0197545344000000)*(cj5)*(pz)*(sj5)*(x31)))+(((cj7)*(((((0.00153395699520000)*(sj5)*(x32)))+(((0.00153395699520000)*(sj5)*(x31)))+(((-0.000198848592000000)*(x31)))+(((-0.000198848592000000)*(x32)))+(((-0.00325795216896000)*(x32)*(x33)))+(((-0.00325795216896000)*(x31)*(x33)))))))+(((-0.0123570853959680)*(x32)*(x33)))+(((-0.0123570853959680)*(x31)*(x33))));
if( IKabs(j7evalpoly[0]) < 0.0000001000000000  )
{
    continue;
}
{
IKReal dummyeval[2];
IKReal x34=x11;
IKReal x35=((sj5)*(x34));
IKReal x36=x12;
IKReal x37=((sj5)*(x36));
IKReal x38=((x37)+(x35));
dummyeval[0]=x38;
dummyeval[1]=x38;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((-1.00000000000000)*(pz)))+(((0.153000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x39=((0.0580000000000000)*(py));
IKReal x40=((0.138000000000000)*(px));
IKReal x41=((x39)+(x40));
IKReal x42=((0.138000000000000)*(py));
IKReal x43=((0.0580000000000000)*(px));
IKReal x44=((((-1.00000000000000)*(x43)))+(x42));
IKReal x45=(x44)*(x44);
IKReal x46=(x41)*(x41);
IKReal x47=((x46)+(x45));
if( (x47) < (IKReal)-0.00001 )
    continue;
IKReal x48=IKsqrt(x47);
IKReal x49=IKabs(x48);
IKReal x50=((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30);
IKReal x51=((0.0227592000000000)*(cj7));
IKReal x52=((0.0715744000000000)*(sj7));
IKReal x53=((0.0768013600000000)+(x51)+(x52));
IKReal x54=((x53)+(((-1.00000000000000)*(pp))));
IKReal x55=((x50)*(x54));
if( (x55) < -1.0001 || (x55) > 1.0001 )
    continue;
IKReal x56=IKasin(x55);
IKReal x57=IKatan2(x41, x44);
j4array[0]=((((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x57))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(x56)+(((-1.00000000000000)*(x57))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[2];
IKReal x58=((5.27586206896552)*(cj7));
IKReal x59=((1.00000000000000)+(x58));
IKReal x60=((x59)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x60;
dummyeval[1]=x60;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x61=((5.27586206896552)*(cj7));
dummyeval[0]=((1.00000000000000)+(x61)+(((-1.00000000000000)*(sj7))));
dummyeval[1]=((1.00000000000000)+(((-34.4827586206897)*(cj4)*(py)))+(((-181.926278240190)*(cj4)*(cj7)*(py)))+(((181.926278240190)*(cj7)*(px)*(sj4)))+(((34.4827586206897)*(cj4)*(py)*(sj7)))+(x61)+(((34.4827586206897)*(px)*(sj4)))+(((-1.00000000000000)*(sj7)))+(((-34.4827586206897)*(px)*(sj4)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x62=((5.27586206896552)*(cj7));
dummyeval[0]=((1.00000000000000)+(((-76.4617691154423)*(cj4)*(cj7)*(px)))+(((-14.4927536231884)*(py)*(sj4)))+(((-76.4617691154423)*(cj7)*(py)*(sj4)))+(((14.4927536231884)*(py)*(sj4)*(sj7)))+(((-14.4927536231884)*(cj4)*(px)))+(x62)+(((14.4927536231884)*(cj4)*(px)*(sj7)))+(((-1.00000000000000)*(sj7))));
dummyeval[1]=((1.00000000000000)+(x62)+(((-1.00000000000000)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4))));
evalcond[2]=((0.392400000000000)+(((-1.00000000000000)*(pz))));
evalcond[3]=((0.148375760000000)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138000000000000)*(cj4)*(px)))+(((0.138000000000000)*(py)*(sj4)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x63=(cj4)*(cj4);
IKReal x64=x11;
IKReal x65=x12;
IKReal x66=(sj4)*(sj4);
IKReal x67=((10.3534451981435)*(px)*(sj4));
IKReal x68=((178.507675830061)*(x63)*(x65));
IKReal x69=((178.507675830061)*(x63)*(x64));
IKReal x70=((178.507675830061)*(x64)*(x66));
IKReal x71=((178.507675830061)*(x65)*(x66));
IKReal x72=((1.00000000000000)+(x71)+(x70)+(x67)+(x68)+(x69));
IKReal x73=((24.6340592645484)*(py)*(sj4));
IKReal x74=((10.3534451981435)*(cj4)*(py));
IKReal x75=((24.6340592645484)*(cj4)*(px));
IKReal x76=((x75)+(x74)+(x73));
IKReal x77=((((-1.00000000000000)*(x76)))+(x72));
dummyeval[0]=x77;
dummyeval[1]=x77;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x78=(cj4)*(cj4);
IKReal x79=x11;
IKReal x80=x12;
IKReal x81=(sj4)*(sj4);
IKReal x82=((0.478800000000000)*(pz));
IKReal x83=((0.0580000000000000)*(cj4)*(py));
IKReal x84=((0.138000000000000)*(cj4)*(px));
IKReal x85=((0.138000000000000)*(py)*(sj4));
IKReal x86=((0.0580000000000000)*(x79)*(x81));
IKReal x87=((0.0580000000000000)*(x78)*(x80));
IKReal x88=((0.00336400000000000)*(px)*(sj4));
IKReal x89=((0.0580000000000000)*(x78)*(x79));
IKReal x90=((0.0580000000000000)*(x80)*(x81));
IKReal x91=((0.000324916000000000)+(x88)+(x89)+(x86)+(x87)+(x90));
IKReal x92=((0.00336400000000000)*(cj4)*(py));
IKReal x93=((0.00800400000000000)*(cj4)*(px));
IKReal x94=((0.00800400000000000)*(py)*(sj4));
IKReal x95=((x93)+(x92)+(x94));
IKReal x96=((x91)+(((-1.00000000000000)*(x95))));
IKReal x97=((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(x97)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))*(((0.0395053600000000)+(((0.0580000000000000)*(px)*(sj4)))+(pp)+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85)))))), ((-1.00000000000000)*(x97)*(((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4)))))*(((0.0395053600000000)+(((0.0580000000000000)*(px)*(sj4)))+(pp)+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((-1.00000000000000)*(pz))));
evalcond[2]=((0.00186295967181242)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138000000000000)*(cj4)*(px)))+(((0.138000000000000)*(py)*(sj4)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-136105573.769954)+(((4693295647.23979)*(cj4)*(py)))+(((-4693295647.23979)*(px)*(sj4)))), ((-323837399.659546)+(((4693295647.23979)*(cj4)*(px)))+(((4693295647.23979)*(py)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x183=((cj4)*(px));
IKReal x184=((py)*(sj4));
IKReal x185=((x184)+(x183));
IKReal x186=((0.0690000000000000)+(((-1.00000000000000)*(x185))));
j6array[0]=IKatan2(((-1.00000000000000)*(x186)*(((IKabs(((0.00200100000000000)+(((-0.153000000000000)*(cj7)*(x184)))+(((-0.153000000000000)*(cj7)*(x183)))+(((0.0105570000000000)*(cj7)))+(((-0.0290000000000000)*(x184)))+(((-0.0290000000000000)*(x183)))+(((-0.00200100000000000)*(sj7)))+(((0.0290000000000000)*(sj7)*(x183)))+(((0.0290000000000000)*(sj7)*(x184))))) != 0)?((IKReal)1/(((0.00200100000000000)+(((-0.153000000000000)*(cj7)*(x184)))+(((-0.153000000000000)*(cj7)*(x183)))+(((0.0105570000000000)*(cj7)))+(((-0.0290000000000000)*(x184)))+(((-0.0290000000000000)*(x183)))+(((-0.00200100000000000)*(sj7)))+(((0.0290000000000000)*(sj7)*(x183)))+(((0.0290000000000000)*(sj7)*(x184)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))), ((-1.00000000000000)*(x186)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x187=((cj4)*(py));
j6array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(x187)))+(((px)*(sj4)))))), ((-1.00000000000000)*(((IKabs(((0.000841000000000000)+(((0.0290000000000000)*(px)*(sj4)))+(((-0.153000000000000)*(cj7)*(x187)))+(((-0.0290000000000000)*(px)*(sj4)*(sj7)))+(((-0.0290000000000000)*(x187)))+(((0.00443700000000000)*(cj7)))+(((0.153000000000000)*(cj7)*(px)*(sj4)))+(((-0.000841000000000000)*(sj7)))+(((0.0290000000000000)*(sj7)*(x187))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((0.0290000000000000)*(px)*(sj4)))+(((-0.153000000000000)*(cj7)*(x187)))+(((-0.0290000000000000)*(px)*(sj4)*(sj7)))+(((-0.0290000000000000)*(x187)))+(((0.00443700000000000)*(cj7)))+(((0.153000000000000)*(cj7)*(px)*(sj4)))+(((-0.000841000000000000)*(sj7)))+(((0.0290000000000000)*(sj7)*(x187)))))):(IKReal)1.0e30))*(((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4)))))*(((0.0290000000000000)+(((-1.00000000000000)*(x187)))+(((px)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x188=((0.153000000000000)*(cj7));
IKReal x189=((0.0290000000000000)+(x188));
IKReal x190=((0.0290000000000000)*(sj7));
IKReal x191=((((-1.00000000000000)*(x190)))+(x189));
IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(x192)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))), ((-1.00000000000000)*(x192)*(((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(pz)+(((0.153000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x193=((0.0580000000000000)*(py));
IKReal x194=((0.138000000000000)*(px));
IKReal x195=((x193)+(x194));
IKReal x196=((0.138000000000000)*(py));
IKReal x197=((0.0580000000000000)*(px));
IKReal x198=((((-1.00000000000000)*(x197)))+(x196));
IKReal x199=(x198)*(x198);
IKReal x200=(x195)*(x195);
IKReal x201=((x199)+(x200));
if( (x201) < (IKReal)-0.00001 )
    continue;
IKReal x202=IKsqrt(x201);
IKReal x203=IKabs(x202);
IKReal x204=((IKabs(x203) != 0)?((IKReal)1/(x203)):(IKReal)1.0e30);
IKReal x205=((0.0227592000000000)*(cj7));
IKReal x206=((0.0715744000000000)*(sj7));
IKReal x207=((0.0768013600000000)+(x206)+(x205));
IKReal x208=((x207)+(((-1.00000000000000)*(pp))));
IKReal x209=((x204)*(x208));
if( (x209) < -1.0001 || (x209) > 1.0001 )
    continue;
IKReal x210=IKasin(x209);
IKReal x211=IKatan2(x195, x198);
j4array[0]=((((-1.00000000000000)*(x211)))+(((-1.00000000000000)*(x210))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(x210)+(((-1.00000000000000)*(x211))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[2];
IKReal x212=((5.27586206896552)*(cj7));
IKReal x213=((1.00000000000000)+(x212));
IKReal x214=((x213)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x214;
dummyeval[1]=x214;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x215=((5.27586206896552)*(cj7));
dummyeval[0]=((1.00000000000000)+(x215)+(((-1.00000000000000)*(sj7))));
dummyeval[1]=((1.00000000000000)+(((-34.4827586206897)*(cj4)*(py)))+(((-181.926278240190)*(cj4)*(cj7)*(py)))+(((181.926278240190)*(cj7)*(px)*(sj4)))+(x215)+(((34.4827586206897)*(cj4)*(py)*(sj7)))+(((34.4827586206897)*(px)*(sj4)))+(((-1.00000000000000)*(sj7)))+(((-34.4827586206897)*(px)*(sj4)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x216=((5.27586206896552)*(cj7));
dummyeval[0]=((1.00000000000000)+(((-76.4617691154423)*(cj4)*(cj7)*(px)))+(((-14.4927536231884)*(py)*(sj4)))+(((-76.4617691154423)*(cj7)*(py)*(sj4)))+(((14.4927536231884)*(py)*(sj4)*(sj7)))+(((-14.4927536231884)*(cj4)*(px)))+(x216)+(((14.4927536231884)*(cj4)*(px)*(sj7)))+(((-1.00000000000000)*(sj7))));
dummyeval[1]=((1.00000000000000)+(x216)+(((-1.00000000000000)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4))));
evalcond[2]=((0.392400000000000)+(pz));
evalcond[3]=((0.148375760000000)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138000000000000)*(cj4)*(px)))+(((0.138000000000000)*(py)*(sj4)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-0.0690000000000000)+(((cj4)*(px)))+(((py)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x217=(cj4)*(cj4);
IKReal x218=x11;
IKReal x219=x12;
IKReal x220=(sj4)*(sj4);
IKReal x221=((10.3534451981435)*(px)*(sj4));
IKReal x222=((178.507675830061)*(x217)*(x219));
IKReal x223=((178.507675830061)*(x217)*(x218));
IKReal x224=((178.507675830061)*(x218)*(x220));
IKReal x225=((178.507675830061)*(x219)*(x220));
IKReal x226=((1.00000000000000)+(x221)+(x223)+(x222)+(x225)+(x224));
IKReal x227=((24.6340592645484)*(py)*(sj4));
IKReal x228=((10.3534451981435)*(cj4)*(py));
IKReal x229=((24.6340592645484)*(cj4)*(px));
IKReal x230=((x229)+(x228)+(x227));
IKReal x231=((((-1.00000000000000)*(x230)))+(x226));
dummyeval[0]=x231;
dummyeval[1]=x231;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x232=(cj4)*(cj4);
IKReal x233=x11;
IKReal x234=x12;
IKReal x235=(sj4)*(sj4);
IKReal x236=((0.0580000000000000)*(cj4)*(py));
IKReal x237=((0.138000000000000)*(cj4)*(px));
IKReal x238=((0.138000000000000)*(py)*(sj4));
IKReal x239=((0.0580000000000000)*(x233)*(x235));
IKReal x240=((0.0580000000000000)*(x232)*(x234));
IKReal x241=((0.00336400000000000)*(px)*(sj4));
IKReal x242=((0.0580000000000000)*(x232)*(x233));
IKReal x243=((0.0580000000000000)*(x234)*(x235));
IKReal x244=((0.000324916000000000)+(x239)+(x243)+(x242)+(x241)+(x240));
IKReal x245=((0.00336400000000000)*(cj4)*(py));
IKReal x246=((0.00800400000000000)*(cj4)*(px));
IKReal x247=((0.00800400000000000)*(py)*(sj4));
IKReal x248=((x247)+(x246)+(x245));
IKReal x249=((x244)+(((-1.00000000000000)*(x248))));
IKReal x250=((IKabs(x249) != 0)?((IKReal)1/(x249)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(x250)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))*(((0.0395053600000000)+(((0.478800000000000)*(pz)))+(((0.0580000000000000)*(px)*(sj4)))+(((-1.00000000000000)*(x238)))+(((-1.00000000000000)*(x237)))+(((-1.00000000000000)*(x236)))+(pp)))), ((x250)*(((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4)))))*(((0.0395053600000000)+(((0.478800000000000)*(pz)))+(((0.0580000000000000)*(px)*(sj4)))+(((-1.00000000000000)*(x238)))+(((-1.00000000000000)*(x237)))+(((-1.00000000000000)*(x236)))+(pp)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(pz));
evalcond[2]=((0.00186295967181242)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138000000000000)*(cj4)*(px)))+(((0.138000000000000)*(py)*(sj4)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-136105573.769954)+(((4693295647.23979)*(cj4)*(py)))+(((-4693295647.23979)*(px)*(sj4)))), ((323837399.659546)+(((-4693295647.23979)*(cj4)*(px)))+(((-4693295647.23979)*(py)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x251=((cj4)*(px));
IKReal x252=((py)*(sj4));
IKReal x253=((x251)+(x252));
IKReal x254=((0.0690000000000000)+(((-1.00000000000000)*(x253))));
j6array[0]=IKatan2(((-1.00000000000000)*(x254)*(((IKabs(((0.00200100000000000)+(((0.0290000000000000)*(sj7)*(x252)))+(((0.0290000000000000)*(sj7)*(x251)))+(((0.0105570000000000)*(cj7)))+(((-0.00200100000000000)*(sj7)))+(((-0.0290000000000000)*(x251)))+(((-0.0290000000000000)*(x252)))+(((-0.153000000000000)*(cj7)*(x251)))+(((-0.153000000000000)*(cj7)*(x252))))) != 0)?((IKReal)1/(((0.00200100000000000)+(((0.0290000000000000)*(sj7)*(x252)))+(((0.0290000000000000)*(sj7)*(x251)))+(((0.0105570000000000)*(cj7)))+(((-0.00200100000000000)*(sj7)))+(((-0.0290000000000000)*(x251)))+(((-0.0290000000000000)*(x252)))+(((-0.153000000000000)*(cj7)*(x251)))+(((-0.153000000000000)*(cj7)*(x252)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))), ((x254)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x255=((cj4)*(py));
j6array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj4)))+(((-1.00000000000000)*(x255)))))), ((((IKabs(((0.000841000000000000)+(((0.0290000000000000)*(px)*(sj4)))+(((0.0290000000000000)*(sj7)*(x255)))+(((-0.0290000000000000)*(px)*(sj4)*(sj7)))+(((0.00443700000000000)*(cj7)))+(((0.153000000000000)*(cj7)*(px)*(sj4)))+(((-0.0290000000000000)*(x255)))+(((-0.000841000000000000)*(sj7)))+(((-0.153000000000000)*(cj7)*(x255))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((0.0290000000000000)*(px)*(sj4)))+(((0.0290000000000000)*(sj7)*(x255)))+(((-0.0290000000000000)*(px)*(sj4)*(sj7)))+(((0.00443700000000000)*(cj7)))+(((0.153000000000000)*(cj7)*(px)*(sj4)))+(((-0.0290000000000000)*(x255)))+(((-0.000841000000000000)*(sj7)))+(((-0.153000000000000)*(cj7)*(x255)))))):(IKReal)1.0e30))*(((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4)))))*(((0.0290000000000000)+(((px)*(sj4)))+(((-1.00000000000000)*(x255)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x256=((0.153000000000000)*(cj7));
IKReal x257=((0.0290000000000000)+(x256));
IKReal x258=((0.0290000000000000)*(sj7));
IKReal x259=((x257)+(((-1.00000000000000)*(x258))));
IKReal x260=((IKabs(x259) != 0)?((IKReal)1/(x259)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(x260)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))), ((x260)*(((0.0690000000000000)+(((-1.00000000000000)*(cj4)*(px)))+(((-1.00000000000000)*(py)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x261=x11;
IKReal x262=((0.0580000000000000)*(sj5)*(x261));
IKReal x263=x12;
IKReal x264=((0.0580000000000000)*(sj5)*(x263));
IKReal x265=((x264)+(x262));
IKReal x266=((IKabs(x265) != 0)?((IKReal)1/(x265)):(IKReal)1.0e30);
IKReal x267=((0.0290000000000000)*(cj7));
IKReal x268=((0.153000000000000)*(sj7));
IKReal x269=((0.239400000000000)+(x267)+(x268));
IKReal x270=((0.0690000000000000)*(sj5));
IKReal x271=((cj5)*(pz));
IKReal x272=((x270)+(x271));
IKReal x273=((x269)+(((-1.00000000000000)*(x272))));
IKReal x274=((0.0227592000000000)*(cj7));
IKReal x275=((0.0715744000000000)*(sj7));
IKReal x276=((0.0768013600000000)+(x274)+(x275));
IKReal x277=((x276)+(((-1.00000000000000)*(pp))));
j4array[0]=IKatan2(((x266)*(((((px)*(sj5)*(x277)))+(((x273)*(((((-0.138000000000000)*(px)))+(((-0.0580000000000000)*(py)))))))))), ((x266)*(((((-1.00000000000000)*(py)*(sj5)*(x277)))+(((x273)*(((((0.138000000000000)*(py)))+(((-0.0580000000000000)*(px)))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[2];
IKReal x278=((5.27586206896552)*(cj7));
IKReal x279=((1.00000000000000)+(x278));
IKReal x280=((x279)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x280;
dummyeval[1]=x280;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x281=((5.27586206896552)*(cj7));
dummyeval[0]=((1.00000000000000)+(x281)+(((-1.00000000000000)*(sj7))));
dummyeval[1]=((1.00000000000000)+(((-34.4827586206897)*(cj4)*(py)))+(((-181.926278240190)*(cj4)*(cj7)*(py)))+(((181.926278240190)*(cj7)*(px)*(sj4)))+(x281)+(((34.4827586206897)*(cj4)*(py)*(sj7)))+(((34.4827586206897)*(px)*(sj4)))+(((-1.00000000000000)*(sj7)))+(((-34.4827586206897)*(px)*(sj4)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((1.00000000000000)+(((5.27586206896552)*(cj7)))+(((-1.00000000000000)*(sj7))));
dummyeval[1]=((((-76.4617691154423)*(cj7)*(pz)*(sj5)))+(cj5)+(((-76.4617691154423)*(cj4)*(cj5)*(cj7)*(px)))+(((14.4927536231884)*(cj5)*(py)*(sj4)*(sj7)))+(((5.27586206896552)*(cj5)*(cj7)))+(((-1.00000000000000)*(cj5)*(sj7)))+(((-76.4617691154423)*(cj5)*(cj7)*(py)*(sj4)))+(((14.4927536231884)*(cj4)*(cj5)*(px)*(sj7)))+(((14.4927536231884)*(pz)*(sj5)*(sj7)))+(((-14.4927536231884)*(pz)*(sj5)))+(((-14.4927536231884)*(cj4)*(cj5)*(px)))+(((-14.4927536231884)*(cj5)*(py)*(sj4))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4))));
evalcond[2]=((0.392400000000000)+(((py)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0690000000000000)*(sj5)))+(((cj4)*(px)*(sj5))));
evalcond[3]=((0.148375760000000)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138000000000000)*(cj4)*(px)))+(((0.138000000000000)*(py)*(sj4)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((0.0690000000000000)*(cj5)))+(((-1.00000000000000)*(pz)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(px)))+(((-1.00000000000000)*(cj5)*(py)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x282=x15;
IKReal x283=x12;
IKReal x284=(cj4)*(cj4);
IKReal x285=x11;
IKReal x286=(sj4)*(sj4);
IKReal x287=((2378.12128418549)*(cj5)*(py)*(pz)*(sj4)*(sj5));
IKReal x288=((5.66111771700357)*(x282));
IKReal x289=((2378.12128418549)*(cj4)*(cj5)*(px)*(pz)*(sj5));
IKReal x290=((1189.06064209275)*(x282)*(x283)*(x286));
IKReal x291=((1189.06064209275)*(x283)*(x284));
IKReal x292=((2378.12128418549)*(cj4)*(px)*(py)*(sj4)*(x282));
IKReal x293=((1189.06064209275)*(x282)*(x284)*(x285));
IKReal x294=((68.9655172413793)*(px)*(sj4));
IKReal x295=((1189.06064209275)*(x285)*(x286));
IKReal x296=x16;
IKReal x297=x10;
IKReal x298=((1189.06064209275)*(x296)*(x297));
IKReal x299=((1.00000000000000)+(x298)+(x290)+(x291)+(x292)+(x293)+(x294)+(x295)+(x289)+(x288)+(x287));
IKReal x300=((164.090368608799)*(py)*(sj4)*(x282));
IKReal x301=((164.090368608799)*(cj4)*(px)*(x282));
IKReal x302=((164.090368608799)*(cj5)*(pz)*(sj5));
IKReal x303=((2378.12128418549)*(cj4)*(px)*(py)*(sj4));
IKReal x304=((68.9655172413793)*(cj4)*(py));
IKReal x305=((x304)+(x302)+(x303)+(x300)+(x301));
IKReal x306=((x299)+(((-1.00000000000000)*(x305))));
dummyeval[0]=x306;
dummyeval[1]=x306;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x307=(cj4)*(cj4);
IKReal x308=x15;
IKReal x309=x11;
IKReal x310=x12;
IKReal x311=(sj4)*(sj4);
IKReal x312=((0.0580000000000000)*(cj4)*(py));
IKReal x313=((0.0330372000000000)*(sj5));
IKReal x314=((0.138000000000000)*(cj4)*(px));
IKReal x315=((0.138000000000000)*(py)*(sj4));
IKReal x316=((0.478800000000000)*(cj5)*(pz));
IKReal x317=((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*(x308));
IKReal x318=((0.0580000000000000)*(x309)*(x311));
IKReal x319=((0.0580000000000000)*(x307)*(x310));
IKReal x320=((0.0580000000000000)*(x307)*(x308)*(x309));
IKReal x321=x16;
IKReal x322=x10;
IKReal x323=((0.0580000000000000)*(x321)*(x322));
IKReal x324=((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5));
IKReal x325=((0.0580000000000000)*(x308)*(x310)*(x311));
IKReal x326=((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5));
IKReal x327=((0.000276138000000000)*(x308));
IKReal x328=((0.00336400000000000)*(px)*(sj4));
IKReal x329=((4.87780000000000e-5)+(x324)+(x325)+(x326)+(x327)+(x320)+(x323)+(x328)+(x319)+(x318)+(x317));
IKReal x330=((0.00800400000000000)*(cj5)*(pz)*(sj5));
IKReal x331=((0.00336400000000000)*(cj4)*(py));
IKReal x332=((0.00800400000000000)*(py)*(sj4)*(x308));
IKReal x333=((0.00800400000000000)*(cj4)*(px)*(x308));
IKReal x334=((0.116000000000000)*(cj4)*(px)*(py)*(sj4));
IKReal x335=((x333)+(x332)+(x331)+(x330)+(x334));
IKReal x336=((x329)+(((-1.00000000000000)*(x335))));
IKReal x337=((IKabs(x336) != 0)?((IKReal)1/(x336)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(x337)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))*(((0.0395053600000000)+(((0.478800000000000)*(cj4)*(px)*(sj5)))+(((0.0580000000000000)*(px)*(sj4)))+(((-1.00000000000000)*(x315)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313)))+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x314)))+(pp)+(((0.478800000000000)*(py)*(sj4)*(sj5)))))), ((x337)*(((((-0.0690000000000000)*(cj5)))+(((cj5)*(py)*(sj4)))+(((pz)*(sj5)))+(((cj4)*(cj5)*(px)))))*(((0.0395053600000000)+(((0.478800000000000)*(cj4)*(px)*(sj5)))+(((0.0580000000000000)*(px)*(sj4)))+(((-1.00000000000000)*(x315)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313)))+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x314)))+(pp)+(((0.478800000000000)*(py)*(sj4)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((py)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0690000000000000)*(sj5)))+(((cj4)*(px)*(sj5))));
evalcond[2]=((0.00186295967181242)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138000000000000)*(cj4)*(px)))+(((0.138000000000000)*(py)*(sj4)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-136105573.769954)+(((4693295647.23979)*(cj4)*(py)))+(((-4693295647.23979)*(px)*(sj4)))), ((((-323837399.659546)*(cj5)))+(((4693295647.23979)*(cj5)*(py)*(sj4)))+(((4693295647.23979)*(pz)*(sj5)))+(((4693295647.23979)*(cj4)*(cj5)*(px)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x338=((cj4)*(py));
IKReal x339=((0.153000000000000)*(cj7));
IKReal x340=((0.0290000000000000)+(x339));
IKReal x341=((0.0290000000000000)*(sj7));
IKReal x342=((x340)+(((-1.00000000000000)*(x341))));
j6array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x342) != 0)?((IKReal)1/(x342)):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(x338)))+(((px)*(sj4)))))), ((((IKabs(((((-0.0290000000000000)*(pz)*(sj5)))+(((-0.0290000000000000)*(cj5)*(py)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(px)*(x339)))+(((0.0105570000000000)*(cj5)*(cj7)))+(((-1.00000000000000)*(cj5)*(py)*(sj4)*(x339)))+(((-1.00000000000000)*(pz)*(sj5)*(x339)))+(((-0.00200100000000000)*(cj5)*(sj7)))+(((1.00000000000000)*(cj5)*(py)*(sj4)*(x341)))+(((0.00200100000000000)*(cj5)))+(((1.00000000000000)*(pz)*(sj5)*(x341)))+(((1.00000000000000)*(cj4)*(cj5)*(px)*(x341)))+(((-0.0290000000000000)*(cj4)*(cj5)*(px))))) != 0)?((IKReal)1/(((((-0.0290000000000000)*(pz)*(sj5)))+(((-0.0290000000000000)*(cj5)*(py)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(px)*(x339)))+(((0.0105570000000000)*(cj5)*(cj7)))+(((-1.00000000000000)*(cj5)*(py)*(sj4)*(x339)))+(((-1.00000000000000)*(pz)*(sj5)*(x339)))+(((-0.00200100000000000)*(cj5)*(sj7)))+(((1.00000000000000)*(cj5)*(py)*(sj4)*(x341)))+(((0.00200100000000000)*(cj5)))+(((1.00000000000000)*(pz)*(sj5)*(x341)))+(((1.00000000000000)*(cj4)*(cj5)*(px)*(x341)))+(((-0.0290000000000000)*(cj4)*(cj5)*(px)))))):(IKReal)1.0e30))*((((((0.0290000000000000)+(((-1.00000000000000)*(x338)))+(((px)*(sj4)))))*(((0.0290000000000000)+(((-1.00000000000000)*(x338)))+(((px)*(sj4))))))+(((-1.00000000000000)*((x342)*(x342))))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x343=((cj4)*(py));
j6array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj4)))+(((-1.00000000000000)*(x343)))))), ((((IKabs(((0.000841000000000000)+(((0.0290000000000000)*(px)*(sj4)))+(((-0.0290000000000000)*(px)*(sj4)*(sj7)))+(((0.0290000000000000)*(sj7)*(x343)))+(((-0.0290000000000000)*(x343)))+(((0.00443700000000000)*(cj7)))+(((0.153000000000000)*(cj7)*(px)*(sj4)))+(((-0.000841000000000000)*(sj7)))+(((-0.153000000000000)*(cj7)*(x343))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((0.0290000000000000)*(px)*(sj4)))+(((-0.0290000000000000)*(px)*(sj4)*(sj7)))+(((0.0290000000000000)*(sj7)*(x343)))+(((-0.0290000000000000)*(x343)))+(((0.00443700000000000)*(cj7)))+(((0.153000000000000)*(cj7)*(px)*(sj4)))+(((-0.000841000000000000)*(sj7)))+(((-0.153000000000000)*(cj7)*(x343)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj4)))+(((-1.00000000000000)*(x343)))))*(((((-0.0690000000000000)*(cj5)))+(((cj5)*(py)*(sj4)))+(((pz)*(sj5)))+(((cj4)*(cj5)*(px)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x344=((0.153000000000000)*(cj7));
IKReal x345=((0.0290000000000000)+(x344));
IKReal x346=((0.0290000000000000)*(sj7));
IKReal x347=((x345)+(((-1.00000000000000)*(x346))));
IKReal x348=((IKabs(x347) != 0)?((IKReal)1/(x347)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(x348)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))), ((x348)*(((((-0.0690000000000000)*(cj5)))+(((cj5)*(py)*(sj4)))+(((pz)*(sj5)))+(((cj4)*(cj5)*(px)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x98=((cj4)*(cj6));
IKReal x99=((cj5)*(sj4)*(sj6));
IKReal x100=((x98)+(((-1.00000000000000)*(x99))));
IKReal x101=((cj4)*(cj5)*(sj6));
IKReal x102=((cj6)*(sj4));
IKReal x103=((x101)+(x102));
IKReal x104=((-1.00000000000000)*(x103));
IKReal x105=((cj5)*(cj6)*(sj7));
IKReal x106=((cj7)*(sj5));
IKReal x107=((x105)+(x106));
IKReal x108=((-1.00000000000000)*(x107));
IKReal x109=((cj4)*(x108));
IKReal x110=((sj4)*(sj6)*(sj7));
IKReal x111=((x110)+(x109));
IKReal x112=((sj4)*(x108));
IKReal x113=((-1.00000000000000)*(cj4)*(sj6)*(sj7));
IKReal x114=((x113)+(x112));
IKReal x115=((cj5)*(cj7));
IKReal x116=((cj6)*(sj5)*(sj7));
IKReal x117=((((-1.00000000000000)*(x116)))+(x115));
IKReal x118=((cj6)*(x115));
IKReal x119=((sj5)*(sj7));
IKReal x120=((((-1.00000000000000)*(x119)))+(x118));
IKReal x121=((-1.00000000000000)*(cj7)*(sj4)*(sj6));
IKReal x122=((cj4)*(x120));
IKReal x123=((x122)+(x121));
IKReal x124=((cj6)*(x106));
IKReal x125=((cj5)*(sj7));
IKReal x126=((x124)+(x125));
IKReal x127=((sj4)*(x120));
IKReal x128=((cj4)*(cj7)*(sj6));
IKReal x129=((x127)+(x128));
new_r00=((((r10)*(x100)))+(((-1.00000000000000)*(r20)*(sj5)*(sj6)))+(((r00)*(x104))));
new_r01=((((r01)*(x104)))+(((r11)*(x100)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
new_r02=((((r02)*(x104)))+(((-1.00000000000000)*(r22)*(sj5)*(sj6)))+(((r12)*(x100))));
new_r10=((((r10)*(x114)))+(((r20)*(x117)))+(((r00)*(x111))));
new_r11=((((r21)*(x117)))+(((r11)*(x114)))+(((r01)*(x111))));
new_r12=((((r22)*(x117)))+(((r02)*(x111)))+(((r12)*(((x112)+(((-1.00000000000000)*(cj4)*(sj6)*(sj7))))))));
new_r20=((((r00)*(x123)))+(((r20)*(x126)))+(((r10)*(x129))));
new_r21=((((r21)*(x126)))+(((r01)*(x123)))+(((r11)*(x129))));
new_r22=((((r22)*(x126)))+(((r12)*(x129)))+(((r02)*(((x122)+(((-1.00000000000000)*(cj7)*(sj4)*(sj6))))))));
{
IKReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
cj9array[0]=new_r22;
if( cj9array[0] >= -1.0001 && cj9array[0] <= 1.0001 )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
if( j9valid[0] && j9valid[1] && IKabs(cj9array[0]-cj9array[1]) < 0.0001 && IKabs(sj9array[0]-sj9array[1]) < 0.0001 )
{
    j9valid[1]=false;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj9)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj9))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
IKReal x130=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x130;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x130;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
IKReal x131=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x131));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x131))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8valid[0] && j8valid[1] && IKabs(cj8array[0]-cj8array[1]) < 0.0001 && IKabs(sj8array[0]-sj8array[1]) < 0.0001 )
{
    j8valid[1]=false;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
IKReal x132=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x132));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x132))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8valid[0] && j8valid[1] && IKabs(cj8array[0]-cj8array[1]) < 0.0001 && IKabs(sj8array[0]-sj8array[1]) < 0.0001 )
{
    j8valid[1]=false;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x133=((new_r10)*(new_r12)*(sj9));
IKReal x134=((new_r00)*(new_r02)*(sj9));
IKReal x135=((x134)+(x133));
IKReal x136=((-1.00000000000000)*(x135));
IKReal x137=((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30);
j8array[0]=IKatan2(((cj9)*(new_r12)*(new_r20)*(x137)), ((cj9)*(new_r02)*(new_r20)*(x137)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x138=((cj8)*(new_r12));
IKReal x139=((new_r02)*(sj8));
IKReal x140=((x138)+(((-1.00000000000000)*(x139))));
IKReal x141=((-1.00000000000000)+(new_r22));
IKReal x142=((new_r12)*(sj8));
IKReal x143=((cj8)*(new_r02));
IKReal x144=((x142)+(x143));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x141;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x140;
evalcond[5]=x140;
evalcond[6]=x144;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x141;
evalcond[10]=x144;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x145=((cj8)*(new_r12));
IKReal x146=((new_r02)*(sj8));
IKReal x147=((((-1.00000000000000)*(x146)))+(x145));
IKReal x148=((new_r12)*(sj8));
IKReal x149=((cj8)*(new_r02));
IKReal x150=((x148)+(x149));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x147;
evalcond[5]=x147;
evalcond[6]=x150;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x150));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
IKReal x151=((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30);
j10array[0]=IKatan2(((new_r21)*(x151)), ((-1.00000000000000)*(new_r20)*(x151)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((new_r21)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))), ((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x152=(new_r12)*(new_r12);
IKReal x153=(new_r02)*(new_r02);
IKReal x154=((x153)+(x152));
IKReal x155=((IKabs(x154) != 0)?((IKReal)1/(x154)):(IKReal)1.0e30);
j8array[0]=IKatan2(((new_r12)*(sj9)*(x155)), ((new_r02)*(sj9)*(x155)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x156=((cj8)*(new_r12));
IKReal x157=((new_r02)*(sj8));
IKReal x158=((((-1.00000000000000)*(x157)))+(x156));
IKReal x159=((-1.00000000000000)+(new_r22));
IKReal x160=((new_r12)*(sj8));
IKReal x161=((cj8)*(new_r02));
IKReal x162=((x160)+(x161));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x159;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x158;
evalcond[5]=x158;
evalcond[6]=x162;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x159;
evalcond[10]=x162;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x163=((cj8)*(new_r12));
IKReal x164=((new_r02)*(sj8));
IKReal x165=((((-1.00000000000000)*(x164)))+(x163));
IKReal x166=((new_r12)*(sj8));
IKReal x167=((cj8)*(new_r02));
IKReal x168=((x166)+(x167));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x165;
evalcond[5]=x165;
evalcond[6]=x168;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x168));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
IKReal x169=((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30);
j10array[0]=IKatan2(((new_r21)*(x169)), ((-1.00000000000000)*(new_r20)*(x169)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((new_r21)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))), ((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
IKReal x170=((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30);
j10array[0]=IKatan2(((new_r21)*(x170)), ((-1.00000000000000)*(new_r20)*(x170)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x171=((new_r02)*(new_r11));
IKReal x172=((new_r01)*(new_r12));
IKReal x173=((((-1.00000000000000)*(x172)))+(x171));
IKReal x174=((IKabs(x173) != 0)?((IKReal)1/(x173)):(IKReal)1.0e30);
j8array[0]=IKatan2(((cj10)*(new_r12)*(x174)), ((cj10)*(new_r02)*(x174)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x175=((new_r02)*(new_r10));
IKReal x176=((new_r00)*(new_r12));
IKReal x177=((((-1.00000000000000)*(x176)))+(x175));
IKReal x178=((IKabs(x177) != 0)?((IKReal)1/(x177)):(IKReal)1.0e30);
j8array[0]=IKatan2(((new_r12)*(sj10)*(x178)), ((new_r02)*(sj10)*(x178)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x179=(new_r12)*(new_r12);
IKReal x180=(new_r02)*(new_r02);
IKReal x181=((x179)+(x180));
IKReal x182=((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30);
j8array[0]=IKatan2(((new_r12)*(sj9)*(x182)), ((new_r02)*(sj9)*(x182)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "81bbd56ff55a29ca0af4b9a1ddc43f6b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
