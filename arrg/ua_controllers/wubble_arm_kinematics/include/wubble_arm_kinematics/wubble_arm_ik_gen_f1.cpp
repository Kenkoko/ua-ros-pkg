/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 48 generated on 2011-10-25 23:20:28.266544
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKsin(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=((x2)*(x3));
x5=IKcos(j[1]);
x6=IKcos(j[2]);
x7=((x0)*(x5)*(x6));
x8=IKcos(j[3]);
x9=IKsin(j[1]);
x10=IKcos(j[5]);
x11=IKsin(j[4]);
x12=((x4)+(((-1.00000000000000)*(x7))));
x13=((x1)*(x12));
x14=((x0)*(x8)*(x9));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=((x11)*(x15));
x17=IKcos(j[4]);
x18=((x2)*(x6));
x19=((x0)*(x3)*(x5));
x20=((x19)+(x18));
x21=((-1.00000000000000)*(x20));
x22=((x17)*(x21));
x23=((x16)+(x22));
x24=IKsin(j[5]);
x25=((x0)*(x1)*(x9));
x26=((x7)+(((-1.00000000000000)*(x4))));
x27=((x26)*(x8));
x28=IKsin(j[6]);
x29=IKcos(j[6]);
x30=((x10)*(x23));
x31=((((-1.00000000000000)*(x27)))+(x25));
x32=((x24)*(x31));
x33=((x32)+(x30));
x34=((-1.00000000000000)*(x33));
x35=((0.0290000000000000)*(x7));
x36=((0.0290000000000000)*(x4));
x37=((x5)*(x8));
x38=((x1)*(x6)*(x9));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x1)*(x5));
x41=((x6)*(x8)*(x9));
x42=((x40)+(x41));
x43=((x11)*(x39));
x44=((x17)*(x3)*(x9));
x45=((((-1.00000000000000)*(x44)))+(x43));
x46=((-1.00000000000000)*(x42));
x47=((x0)*(x3));
x48=((x18)*(x5));
x49=((x48)+(x47));
x50=((x1)*(x2)*(x9));
x51=((x49)*(x8));
x52=((x50)+(((-1.00000000000000)*(x51))));
x53=((-1.00000000000000)*(x49));
x54=((x1)*(x53));
x55=((x2)*(x8)*(x9));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x11)*(x56));
x58=((x0)*(x6));
x59=((x4)*(x5));
x60=((x58)+(((-1.00000000000000)*(x59))));
x61=((x17)*(x60));
x62=((x57)+(x61));
x63=((x59)+(((-1.00000000000000)*(x58))));
x64=((x11)*(x63));
x65=((x17)*(x56));
x66=((x64)+(x65));
x67=((x24)*(x52));
x68=((x10)*(x62));
x69=((x67)+(x68));
x70=((0.0290000000000000)*(x47));
x71=((0.0290000000000000)*(x48));
eerot[0]=((((x23)*(x24)))+(((x10)*(((((-1.00000000000000)*(x25)))+(x27))))));
eerot[1]=((((x28)*(x34)))+(((x29)*(((((x11)*(x20)))+(((x15)*(x17))))))));
eerot[2]=((((x29)*(x34)))+(((x28)*(((((-1.00000000000000)*(x11)*(x20)))+(((-1.00000000000000)*(x15)*(x17))))))));
eetrans[0]=((0.0290000000000000)+(((-0.156100000000000)*(x25)))+(((x1)*(((((-1.00000000000000)*(x35)))+(x36)))))+(((x10)*(((((-0.232500000000000)*(x25)))+(((0.232500000000000)*(x27)))))))+(((-0.231400000000000)*(x0)*(x9)))+(((-1.00000000000000)*(x36)))+(((x8)*(((((-0.156100000000000)*(x4)))+(((0.156100000000000)*(x7)))))))+(((x24)*(((((0.232500000000000)*(x22)))+(((0.232500000000000)*(x16)))))))+(((0.0692000000000000)*(x0)))+(x35)+(((-0.0290000000000000)*(x2)))+(((-0.0290000000000000)*(x14))));
eerot[3]=((((x10)*(x42)))+(((x24)*(x45))));
eerot[4]=((((-1.00000000000000)*(x28)*(((((x10)*(((((-1.00000000000000)*(x44)))+(x43)))))+(((x24)*(x46)))))))+(((x29)*(((((x17)*(x39)))+(((x11)*(x3)*(x9))))))));
eerot[5]=((((x28)*(((((-1.00000000000000)*(x11)*(x3)*(x9)))+(((-1.00000000000000)*(x17)*(x39)))))))+(((x29)*(((((-1.00000000000000)*(x10)*(x45)))+(((-1.00000000000000)*(x24)*(x46))))))));
eetrans[1]=((0.0580000000000000)+(((0.0290000000000000)*(x37)))+(((0.0290000000000000)*(x6)*(x9)))+(((x24)*(((((0.232500000000000)*(x43)))+(((-0.232500000000000)*(x44)))))))+(((0.231400000000000)*(x5)))+(((-0.0290000000000000)*(x38)))+(((0.156100000000000)*(x40)))+(((0.156100000000000)*(x41)))+(((x10)*(((((0.232500000000000)*(x41)))+(((0.232500000000000)*(x40))))))));
eerot[6]=((((-1.00000000000000)*(x24)*(x62)))+(((x10)*(x52))));
eerot[7]=((((-1.00000000000000)*(x29)*(x66)))+(((x28)*(x69))));
eerot[8]=((((x29)*(x69)))+(((x28)*(x66))));
eetrans[2]=((((x10)*(((((0.232500000000000)*(x50)))+(((-0.232500000000000)*(x51)))))))+(((-1.00000000000000)*(x71)))+(((-1.00000000000000)*(x70)))+(((0.156100000000000)*(x50)))+(((-0.0692000000000000)*(x2)))+(((-0.0290000000000000)*(x0)))+(((x24)*(((((-0.232500000000000)*(x57)))+(((-0.232500000000000)*(x61)))))))+(((x8)*(((((-0.156100000000000)*(x48)))+(((-0.156100000000000)*(x47)))))))+(((0.0290000000000000)*(x55)))+(((x1)*(((x71)+(x70)))))+(((0.231400000000000)*(x2)*(x9))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,j9,cj9,sj9,htj9,j10,cj10,sj10,htj10,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((-0.0290000000000000)+(((-0.232500000000000)*(r00)))+(px));
new_r10=r22;
new_r11=((-1.00000000000000)*(r21));
new_r12=((-1.00000000000000)*(r20));
new_py=((((0.232500000000000)*(r20)))+(((-1.00000000000000)*(pz))));
new_r20=((-1.00000000000000)*(r12));
new_r21=r11;
new_r22=r10;
new_pz=((-0.0580000000000000)+(((-0.232500000000000)*(r10)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=((0.260400000000000)+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((px)*(sj5))));
IKReal gconst1;
gconst1=0.312200000000000;
IKReal gconst2;
gconst2=((0.202400000000000)+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((px)*(sj5))));
IKReal gconst3;
gconst3=((0.0964405300000000)+(((0.138400000000000)*(px)))+(((0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst4;
gconst4=0.141122160000000;
IKReal gconst5;
gconst5=((0.0514905300000000)+(((0.138400000000000)*(px)))+(((0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst6;
gconst6=((0.260400000000000)+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((px)*(sj5))));
IKReal gconst7;
gconst7=0.312200000000000;
IKReal gconst8;
gconst8=((0.202400000000000)+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((px)*(sj5))));
IKReal gconst9;
gconst9=((0.0964405300000000)+(((0.138400000000000)*(px)))+(((0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst10;
gconst10=0.141122160000000;
IKReal gconst11;
gconst11=((0.0514905300000000)+(((0.138400000000000)*(px)))+(((0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst12;
gconst12=((2.00000000000000)*(py)*(sj5));
IKReal gconst13;
gconst13=((2.00000000000000)*(py)*(sj5));
IKReal gconst14;
gconst14=((((-0.116000000000000)*(px)))+(((0.276800000000000)*(py))));
IKReal gconst15;
gconst15=((((-0.116000000000000)*(px)))+(((0.276800000000000)*(py))));
IKReal gconst16;
gconst16=((2.00000000000000)*(py)*(sj5));
IKReal gconst17;
gconst17=((2.00000000000000)*(py)*(sj5));
IKReal gconst18;
gconst18=((((-0.116000000000000)*(px)))+(((0.276800000000000)*(py))));
IKReal gconst19;
gconst19=((((-0.116000000000000)*(px)))+(((0.276800000000000)*(py))));
IKReal gconst20;
gconst20=((0.260400000000000)+(((-1.00000000000000)*(px)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5))));
IKReal gconst21;
gconst21=0.312200000000000;
IKReal gconst22;
gconst22=((0.202400000000000)+(((-1.00000000000000)*(px)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5))));
IKReal gconst23;
gconst23=((0.0964405300000000)+(((-0.138400000000000)*(px)))+(((-0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst24;
gconst24=0.141122160000000;
IKReal gconst25;
gconst25=((0.0514905300000000)+(((-0.138400000000000)*(px)))+(((-0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst26;
gconst26=((0.260400000000000)+(((-1.00000000000000)*(px)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5))));
IKReal gconst27;
gconst27=0.312200000000000;
IKReal gconst28;
gconst28=((0.202400000000000)+(((-1.00000000000000)*(px)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5))));
IKReal gconst29;
gconst29=((0.0964405300000000)+(((-0.138400000000000)*(px)))+(((-0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
IKReal gconst30;
gconst30=0.141122160000000;
IKReal gconst31;
gconst31=((0.0514905300000000)+(((-0.138400000000000)*(px)))+(((-0.0580000000000000)*(py)))+(((-1.00000000000000)*(pp))));
dummyeval[0]=((((-1.00000000000000)*(gconst22)*(gconst23)*(gconst28)*(gconst29)))+(((gconst22)*(gconst23)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst26)*(gconst31)))+(((gconst20)*(gconst25)*(gconst28)*(gconst29)))+(((gconst22)*(gconst24)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst24)*(gconst26)*(gconst30)))+(((gconst21)*(gconst25)*(gconst26)*(gconst30))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[8+1], zeror[8];
int numroots;
op[0]=((((-1.00000000000000)*(gconst22)*(gconst23)*(gconst28)*(gconst29)))+(((gconst22)*(gconst23)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst26)*(gconst31)))+(((gconst20)*(gconst25)*(gconst28)*(gconst29)))+(((gconst22)*(gconst24)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst24)*(gconst26)*(gconst30)))+(((gconst21)*(gconst25)*(gconst26)*(gconst30))));
op[1]=((((-1.00000000000000)*(gconst16)*(gconst20)*(gconst25)*(gconst31)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst24)*(gconst30)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst23)*(gconst28)))+(((gconst17)*(gconst20)*(gconst25)*(gconst29)))+(((gconst12)*(gconst25)*(gconst28)*(gconst29)))+(((gconst15)*(gconst20)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst13)*(gconst24)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst23)*(gconst29)))+(((gconst16)*(gconst21)*(gconst25)*(gconst30)))+(((gconst18)*(gconst22)*(gconst24)*(gconst27)))+(((gconst13)*(gconst24)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst27)*(gconst29)))+(((gconst15)*(gconst21)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst25)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst25)*(gconst27)))+(((gconst18)*(gconst20)*(gconst25)*(gconst28)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst28)*(gconst29)))+(((gconst13)*(gconst23)*(gconst26)*(gconst31)))+(((gconst19)*(gconst22)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst26)*(gconst31)))+(((gconst14)*(gconst22)*(gconst26)*(gconst31)))+(((gconst16)*(gconst22)*(gconst23)*(gconst31)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst28)*(gconst29))));
op[2]=((((-1.00000000000000)*(gconst22)*(gconst23)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst22)*(gconst26)*(gconst30)*(gconst4)))+(((gconst10)*(gconst21)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst21)*(gconst27)))+(((gconst20)*(gconst25)*(gconst29)*(gconst8)))+(((gconst2)*(gconst24)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst23)*(gconst28)))+(((gconst17)*(gconst18)*(gconst20)*(gconst25)))+(((gconst11)*(gconst22)*(gconst23)*(gconst26)))+(((gconst12)*(gconst18)*(gconst25)*(gconst28)))+(((gconst13)*(gconst16)*(gconst23)*(gconst31)))+(((gconst16)*(gconst19)*(gconst22)*(gconst23)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst22)*(gconst23)))+(((gconst2)*(gconst23)*(gconst26)*(gconst31)))+(((gconst21)*(gconst25)*(gconst30)*(gconst6)))+(((gconst22)*(gconst24)*(gconst27)*(gconst9)))+(((gconst14)*(gconst19)*(gconst22)*(gconst26)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst25)*(gconst26)))+(((gconst1)*(gconst25)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst29)*(gconst7)))+(((gconst15)*(gconst18)*(gconst20)*(gconst28)))+(((gconst15)*(gconst16)*(gconst21)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst25)*(gconst26)))+(((gconst12)*(gconst17)*(gconst25)*(gconst29)))+(((gconst20)*(gconst28)*(gconst29)*(gconst5)))+(((gconst21)*(gconst26)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst19)*(gconst20)*(gconst26)))+(((gconst22)*(gconst27)*(gconst29)*(gconst4)))+(((gconst22)*(gconst24)*(gconst29)*(gconst7)))+(((gconst22)*(gconst26)*(gconst3)*(gconst31)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst31)*(gconst5)))+(((gconst12)*(gconst15)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst13)*(gconst16)*(gconst24)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst22)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst24)*(gconst30)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst28)*(gconst29)))+(((gconst13)*(gconst18)*(gconst24)*(gconst27)))+(((gconst22)*(gconst23)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst20)*(gconst25)))+(((-1.00000000000000)*(gconst21)*(gconst27)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst27)*(gconst29)))+(((gconst14)*(gconst16)*(gconst22)*(gconst31)))+(((gconst15)*(gconst17)*(gconst20)*(gconst29)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst28)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst15)*(gconst16)*(gconst20)*(gconst31)))+(((gconst20)*(gconst25)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst25)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst31)*(gconst6)))+(((gconst13)*(gconst19)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst23)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst28)*(gconst29)*(gconst3)))+(((gconst13)*(gconst14)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst25)*(gconst31)))+(((gconst0)*(gconst25)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst2)*(gconst24)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst24)*(gconst26))));
op[3]=((((-1.00000000000000)*(gconst18)*(gconst22)*(gconst28)*(gconst3)))+(((gconst19)*(gconst2)*(gconst23)*(gconst26)))+(((gconst15)*(gconst21)*(gconst30)*(gconst6)))+(((gconst16)*(gconst21)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst28)*(gconst9)))+(((gconst0)*(gconst15)*(gconst28)*(gconst29)))+(((gconst15)*(gconst20)*(gconst29)*(gconst8)))+(((gconst14)*(gconst2)*(gconst26)*(gconst31)))+(((gconst13)*(gconst24)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst18)*(gconst22)))+(((gconst13)*(gconst24)*(gconst29)*(gconst7)))+(((gconst18)*(gconst22)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst12)*(gconst25)*(gconst31)*(gconst6)))+(((gconst17)*(gconst20)*(gconst25)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst23)*(gconst8)))+(((gconst12)*(gconst25)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst25)*(gconst27)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst25)*(gconst31)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst29)))+(((gconst18)*(gconst22)*(gconst24)*(gconst7)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst29)*(gconst3)))+(((gconst18)*(gconst20)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst16)*(gconst20)*(gconst31)*(gconst5)))+(((gconst11)*(gconst16)*(gconst22)*(gconst23)))+(((gconst13)*(gconst16)*(gconst19)*(gconst23)))+(((gconst12)*(gconst25)*(gconst28)*(gconst9)))+(((gconst17)*(gconst20)*(gconst29)*(gconst5)))+(((gconst15)*(gconst20)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst19)*(gconst25)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst18)*(gconst28)))+(((gconst13)*(gconst26)*(gconst3)*(gconst31)))+(((gconst18)*(gconst2)*(gconst24)*(gconst27)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst29)*(gconst7)))+(((gconst10)*(gconst15)*(gconst21)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst18)*(gconst23)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst28)*(gconst9)))+(((gconst11)*(gconst13)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst24)*(gconst30)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst24)*(gconst26)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst25)*(gconst6)))+(((gconst1)*(gconst15)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst25)*(gconst7)))+(((gconst1)*(gconst16)*(gconst25)*(gconst30)))+(((gconst12)*(gconst15)*(gconst18)*(gconst28)))+(((gconst13)*(gconst23)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst23)*(gconst29)))+(((gconst13)*(gconst27)*(gconst29)*(gconst4)))+(((gconst16)*(gconst22)*(gconst3)*(gconst31)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst20)*(gconst26)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst22)*(gconst24)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst31)*(gconst6)))+(((gconst19)*(gconst22)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst16)*(gconst31)))+(((gconst0)*(gconst17)*(gconst25)*(gconst29)))+(((gconst16)*(gconst2)*(gconst23)*(gconst31)))+(((-1.00000000000000)*(gconst13)*(gconst26)*(gconst30)*(gconst4)))+(((gconst12)*(gconst28)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst23)*(gconst28)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst19)*(gconst26)))+(((gconst15)*(gconst17)*(gconst18)*(gconst20)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst20)*(gconst25)))+(((gconst13)*(gconst14)*(gconst16)*(gconst31)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst27)*(gconst9)))+(((gconst13)*(gconst14)*(gconst19)*(gconst26)))+(((gconst18)*(gconst20)*(gconst28)*(gconst5)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst24)*(gconst30)))+(((gconst11)*(gconst14)*(gconst22)*(gconst26)))+(((gconst12)*(gconst17)*(gconst18)*(gconst25)))+(((-1.00000000000000)*(gconst15)*(gconst16)*(gconst19)*(gconst20)))+(((gconst10)*(gconst16)*(gconst21)*(gconst25)))+(((gconst12)*(gconst15)*(gconst17)*(gconst29)))+(((-1.00000000000000)*(gconst12)*(gconst26)*(gconst31)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst28)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst30)*(gconst4)))+(((gconst14)*(gconst22)*(gconst31)*(gconst6)))+(((gconst19)*(gconst22)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst27)*(gconst29)))+(((gconst0)*(gconst18)*(gconst25)*(gconst28)))+(((gconst14)*(gconst16)*(gconst19)*(gconst22))));
op[4]=((((-1.00000000000000)*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((gconst0)*(gconst25)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst20)*(gconst31)*(gconst5)*(gconst6)))+(((gconst11)*(gconst13)*(gconst16)*(gconst23)))+(((gconst11)*(gconst22)*(gconst26)*(gconst3)))+(((gconst1)*(gconst10)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst31)*(gconst6)))+(((gconst16)*(gconst19)*(gconst2)*(gconst23)))+(((gconst2)*(gconst27)*(gconst29)*(gconst4)))+(((-1.00000000000000)*(gconst0)*(gconst25)*(gconst31)*(gconst6)))+(((gconst11)*(gconst22)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst21)*(gconst27)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst16)*(gconst19)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst24)*(gconst6)))+(((gconst1)*(gconst25)*(gconst30)*(gconst6)))+(((gconst0)*(gconst28)*(gconst29)*(gconst5)))+(((gconst20)*(gconst28)*(gconst5)*(gconst9)))+(((gconst21)*(gconst30)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst26)*(gconst30)*(gconst4)))+(((gconst14)*(gconst19)*(gconst22)*(gconst6)))+(((gconst13)*(gconst19)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst26)*(gconst5)))+(((gconst0)*(gconst15)*(gconst18)*(gconst28)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst19)*(gconst25)))+(((gconst0)*(gconst25)*(gconst29)*(gconst8)))+(((gconst17)*(gconst18)*(gconst20)*(gconst5)))+(((gconst1)*(gconst26)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst22)*(gconst3)))+(((gconst15)*(gconst18)*(gconst20)*(gconst8)))+(((gconst13)*(gconst18)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst22)*(gconst29)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst18)*(gconst27)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst16)*(gconst20)))+(((gconst22)*(gconst24)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst26)*(gconst4)))+(((gconst22)*(gconst27)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst27)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst19)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst25)*(gconst26)))+(((gconst1)*(gconst15)*(gconst16)*(gconst30)))+(((gconst2)*(gconst23)*(gconst31)*(gconst6)))+(((gconst14)*(gconst16)*(gconst2)*(gconst31)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst2)*(gconst28)))+(((gconst22)*(gconst29)*(gconst4)*(gconst7)))+(((gconst20)*(gconst25)*(gconst8)*(gconst9)))+(((gconst15)*(gconst17)*(gconst20)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst22)*(gconst9)))+(((gconst2)*(gconst24)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst27)*(gconst9)))+(((gconst14)*(gconst19)*(gconst2)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst23)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((-1.00000000000000)*(gconst2)*(gconst28)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst28)*(gconst3)))+(((gconst13)*(gconst16)*(gconst3)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst22)*(gconst28)*(gconst3)*(gconst9)))+(((gconst0)*(gconst17)*(gconst18)*(gconst25)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst2)*(gconst23)))+(((gconst11)*(gconst14)*(gconst16)*(gconst22)))+(((gconst16)*(gconst19)*(gconst22)*(gconst3)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst16)*(gconst31)))+(((-1.00000000000000)*(gconst15)*(gconst19)*(gconst20)*(gconst6)))+(((-1.00000000000000)*(gconst21)*(gconst29)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst2)*(gconst24)*(gconst30)*(gconst6)))+(((gconst20)*(gconst29)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((gconst2)*(gconst26)*(gconst3)*(gconst31)))+(((-1.00000000000000)*(gconst0)*(gconst26)*(gconst31)*(gconst5)))+(((gconst11)*(gconst2)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst16)*(gconst30)*(gconst4)))+(((gconst10)*(gconst21)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst2)*(gconst29)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst16)*(gconst24)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst21)*(gconst7)))+(((gconst10)*(gconst15)*(gconst16)*(gconst21)))+(((gconst10)*(gconst21)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst22)*(gconst30)*(gconst4)*(gconst6)))+(((gconst13)*(gconst19)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst8)))+(((gconst2)*(gconst24)*(gconst27)*(gconst9)))+(((gconst13)*(gconst14)*(gconst31)*(gconst6)))+(((gconst12)*(gconst18)*(gconst25)*(gconst8)))+(((gconst0)*(gconst15)*(gconst17)*(gconst29)))+(((gconst11)*(gconst13)*(gconst14)*(gconst26)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst24)*(gconst26)))+(((gconst12)*(gconst15)*(gconst17)*(gconst18)))+(((gconst12)*(gconst18)*(gconst28)*(gconst5)))+(((gconst12)*(gconst17)*(gconst29)*(gconst5)))+(((gconst12)*(gconst15)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst25)*(gconst6)))+(((gconst12)*(gconst15)*(gconst28)*(gconst9)))+(((gconst12)*(gconst17)*(gconst25)*(gconst9)))+(((gconst22)*(gconst3)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst20)*(gconst5)))+(((gconst13)*(gconst18)*(gconst24)*(gconst7)))+(((gconst13)*(gconst14)*(gconst16)*(gconst19)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst31)*(gconst5)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst26)*(gconst5))));
op[5]=((((-1.00000000000000)*(gconst1)*(gconst15)*(gconst27)*(gconst9)))+(((gconst12)*(gconst25)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst13)*(gconst29)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst18)*(gconst8)))+(((gconst13)*(gconst29)*(gconst4)*(gconst7)))+(((gconst1)*(gconst15)*(gconst30)*(gconst6)))+(((gconst11)*(gconst14)*(gconst22)*(gconst6)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst23)*(gconst9)))+(((gconst11)*(gconst13)*(gconst23)*(gconst6)))+(((gconst18)*(gconst2)*(gconst24)*(gconst7)))+(((gconst14)*(gconst2)*(gconst31)*(gconst6)))+(((gconst19)*(gconst22)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst2)*(gconst24)))+(((gconst12)*(gconst17)*(gconst18)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst18)*(gconst3)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst25)*(gconst6)))+(((gconst16)*(gconst2)*(gconst3)*(gconst31)))+(((gconst1)*(gconst16)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst26)*(gconst5)))+(((gconst13)*(gconst14)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst23)*(gconst8)))+(((gconst10)*(gconst15)*(gconst21)*(gconst6)))+(((gconst11)*(gconst16)*(gconst2)*(gconst23)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst5)*(gconst7)))+(((gconst11)*(gconst14)*(gconst2)*(gconst26)))+(((gconst0)*(gconst18)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst18)*(gconst2)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst20)*(gconst5)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst29)*(gconst7)))+(((gconst10)*(gconst16)*(gconst21)*(gconst5)))+(((gconst0)*(gconst17)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst30)*(gconst4)*(gconst6)))+(((gconst1)*(gconst10)*(gconst16)*(gconst25)))+(((gconst19)*(gconst2)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst22)*(gconst4)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst26)*(gconst5)))+(((gconst17)*(gconst20)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst18)*(gconst28)*(gconst5)))+(((gconst18)*(gconst2)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst16)*(gconst19)))+(((gconst13)*(gconst24)*(gconst7)*(gconst9)))+(((gconst13)*(gconst16)*(gconst19)*(gconst3)))+(((gconst12)*(gconst15)*(gconst18)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst28)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst15)*(gconst26)))+(((gconst12)*(gconst29)*(gconst5)*(gconst8)))+(((gconst18)*(gconst20)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst28)*(gconst3)))+(((gconst13)*(gconst3)*(gconst31)*(gconst6)))+(((gconst11)*(gconst13)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst25)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst16)*(gconst25)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst24)*(gconst6)))+(((gconst12)*(gconst15)*(gconst17)*(gconst9)))+(((gconst15)*(gconst20)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst20)*(gconst6)))+(((gconst12)*(gconst28)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst19)*(gconst5)))+(((gconst11)*(gconst16)*(gconst22)*(gconst3)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst27)*(gconst5)))+(((gconst13)*(gconst27)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst31)*(gconst5)*(gconst6)))+(((gconst19)*(gconst2)*(gconst26)*(gconst3)))+(((gconst11)*(gconst13)*(gconst14)*(gconst16)))+(((gconst18)*(gconst22)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst31)*(gconst5)))+(((gconst0)*(gconst15)*(gconst28)*(gconst9)))+(((gconst14)*(gconst16)*(gconst19)*(gconst2)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst8)*(gconst9)))+(((gconst0)*(gconst15)*(gconst17)*(gconst18)))+(((gconst0)*(gconst15)*(gconst29)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst26)))+(((gconst0)*(gconst17)*(gconst25)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst29)*(gconst8))));
op[6]=((((-1.00000000000000)*(gconst1)*(gconst25)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst2)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst3)*(gconst8)))+(((gconst1)*(gconst10)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst2)*(gconst28)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst2)*(gconst8)))+(((gconst11)*(gconst2)*(gconst23)*(gconst6)))+(((gconst1)*(gconst10)*(gconst25)*(gconst6)))+(((gconst12)*(gconst15)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst16)*(gconst4)))+(((-1.00000000000000)*(gconst22)*(gconst3)*(gconst8)*(gconst9)))+(((gconst0)*(gconst15)*(gconst18)*(gconst8)))+(((gconst0)*(gconst17)*(gconst18)*(gconst5)))+(((gconst12)*(gconst18)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst21)*(gconst5)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst18)*(gconst7)))+(((gconst11)*(gconst14)*(gconst16)*(gconst2)))+(((gconst2)*(gconst3)*(gconst31)*(gconst6)))+(((gconst13)*(gconst18)*(gconst4)*(gconst7)))+(((gconst13)*(gconst19)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst16)*(gconst5)))+(((gconst2)*(gconst24)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst19)*(gconst5)))+(((gconst10)*(gconst21)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst15)*(gconst16)))+(((gconst11)*(gconst13)*(gconst14)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst31)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst27)*(gconst5)*(gconst9)))+(((gconst11)*(gconst2)*(gconst26)*(gconst3)))+(((gconst16)*(gconst19)*(gconst2)*(gconst3)))+(((gconst0)*(gconst25)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst2)*(gconst9)))+(((gconst11)*(gconst22)*(gconst3)*(gconst6)))+(((gconst12)*(gconst17)*(gconst5)*(gconst9)))+(((gconst0)*(gconst15)*(gconst17)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst24)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst29)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst2)*(gconst30)*(gconst4)*(gconst6)))+(((gconst22)*(gconst4)*(gconst7)*(gconst9)))+(((gconst11)*(gconst13)*(gconst16)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst6)))+(((gconst14)*(gconst19)*(gconst2)*(gconst6)))+(((gconst0)*(gconst29)*(gconst5)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst16)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst5)*(gconst6)))+(((gconst2)*(gconst29)*(gconst4)*(gconst7)))+(((gconst0)*(gconst28)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst25)*(gconst6)))+(((gconst20)*(gconst5)*(gconst8)*(gconst9)))+(((gconst2)*(gconst27)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst29)*(gconst3)*(gconst8)))+(((gconst1)*(gconst30)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst5)*(gconst6))));
op[7]=((((-1.00000000000000)*(gconst14)*(gconst2)*(gconst8)*(gconst9)))+(((gconst0)*(gconst17)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst4)*(gconst6)))+(((gconst11)*(gconst14)*(gconst2)*(gconst6)))+(((gconst11)*(gconst13)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst5)*(gconst7)))+(((gconst0)*(gconst18)*(gconst5)*(gconst8)))+(((gconst11)*(gconst16)*(gconst2)*(gconst3)))+(((gconst18)*(gconst2)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst3)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst6)))+(((gconst13)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst16)*(gconst5)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst5)*(gconst6)))+(((gconst19)*(gconst2)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst3)*(gconst8)*(gconst9)))+(((gconst12)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst2)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst7)*(gconst9)))+(((gconst0)*(gconst15)*(gconst8)*(gconst9)))+(((gconst1)*(gconst10)*(gconst16)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst15)*(gconst6))));
op[8]=((((-1.00000000000000)*(gconst0)*(gconst11)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst3)*(gconst8)*(gconst9)))+(((gconst0)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst4)*(gconst6)))+(((gconst11)*(gconst2)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst5)*(gconst7)*(gconst9)))+(((gconst2)*(gconst4)*(gconst7)*(gconst9)))+(((gconst1)*(gconst10)*(gconst5)*(gconst6))));
polyroots8(op,zeror,numroots);
IKReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IKReal htj4 = zeror[ij4];
tempj4array[0]=((2.00000000000000)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
bool valid = true;
for( int kj4 = 0; kj4 < numsolutions; ++kj4)
{
    if( IKabs(cj4array[kj4]-cj4array[numsolutions]) < 0.0001 && IKabs(sj4array[kj4]-sj4array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
if( IKabs(((-2.08998318404996)+(((-15.3719760347918)*(cj4)*(px)*(sj5)))+(((-15.3719760347918)*(py)*(sj4)*(sj5)))+(((1.06374074160760)*(sj5)))+(((-1.15041885163603)*(px)*(sj4)))+(((2.74513739769702)*(py)*(sj4)))+(((-19.8348077868282)*(pp)))+(((1.15041885163603)*(cj4)*(py)))+(((15.3719760347918)*(cj5)*(pz)))+(((2.74513739769702)*(cj4)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.27056465621374)+(((-14.7764119924312)*(py)*(sj4)))+(((-6.19242699104776)*(cj4)*(py)))+(((48.2608778976209)*(cj4)*(px)*(sj5)))+(((-48.2608778976209)*(cj5)*(pz)))+(((6.19242699104776)*(px)*(sj4)))+(((-3.33965275051537)*(sj5)))+(((48.2608778976209)*(py)*(sj4)*(sj5)))+(((-14.7764119924312)*(cj4)*(px)))+(((106.765982604272)*(pp))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((-2.08998318404996)+(((-15.3719760347918)*(cj4)*(px)*(sj5)))+(((-15.3719760347918)*(py)*(sj4)*(sj5)))+(((1.06374074160760)*(sj5)))+(((-1.15041885163603)*(px)*(sj4)))+(((2.74513739769702)*(py)*(sj4)))+(((-19.8348077868282)*(pp)))+(((1.15041885163603)*(cj4)*(py)))+(((15.3719760347918)*(cj5)*(pz)))+(((2.74513739769702)*(cj4)*(px)))), ((3.27056465621374)+(((-14.7764119924312)*(py)*(sj4)))+(((-6.19242699104776)*(cj4)*(py)))+(((48.2608778976209)*(cj4)*(px)*(sj5)))+(((-48.2608778976209)*(cj5)*(pz)))+(((6.19242699104776)*(px)*(sj4)))+(((-3.33965275051537)*(sj5)))+(((48.2608778976209)*(py)*(sj4)*(sj5)))+(((-14.7764119924312)*(cj4)*(px)))+(((106.765982604272)*(pp)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IKReal dummyeval[1];
IKReal gconst48;
gconst48=IKsign(((0.0290000000000000)+(((-0.0290000000000000)*(sj7)))+(((0.156100000000000)*(cj7)))));
dummyeval[0]=((1.00000000000000)+(((5.38275862068966)*(cj7)))+(((-1.00000000000000)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4))));
evalcond[2]=((0.387500000000000)+(((py)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((cj4)*(px)*(sj5))));
evalcond[3]=((0.144526610000000)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138400000000000)*(cj4)*(px)))+(((-1.00000000000000)*(pp)))+(((0.138400000000000)*(py)*(sj4))));
evalcond[4]=((((-1.00000000000000)*(pz)*(sj5)))+(((0.0692000000000000)*(cj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(px)))+(((-1.00000000000000)*(cj5)*(py)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x72=(py)*(py);
IKReal x73=(cj5)*(cj5);
IKReal x74=(cj4)*(cj4);
IKReal x75=(px)*(px);
IKReal x76=(sj4)*(sj4);
dummyeval[0]=((1.00000000000000)+(((2378.12128418549)*(cj4)*(px)*(py)*(sj4)*(x73)))+(((1189.06064209275)*(x72)*(x73)*(x76)))+(((-164.565992865636)*(cj4)*(px)*(x73)))+(((2378.12128418549)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((2378.12128418549)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((5.69398335315101)*(x73)))+(((1189.06064209275)*(x73)*(x74)*(x75)))+(((1189.06064209275)*(x72)*(x74)))+(((-2378.12128418549)*(cj4)*(px)*(py)*(sj4)))+(((-164.565992865636)*(cj5)*(pz)*(sj5)))+(((-68.9655172413793)*(cj4)*(py)))+(((68.9655172413793)*(px)*(sj4)))+(((1189.06064209275)*(x75)*(x76)))+(((-164.565992865636)*(py)*(sj4)*(x73)))+(((1189.06064209275)*((pz)*(pz))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((-1.00000000000000)*(((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((0.00100944331000000)+(((-0.0364903900000000)*(cj4)*(py)))+(((pp)*(px)*(sj4)))+(((0.0364903900000000)*(px)*(sj4)))+(((0.462800000000000)*(cj4)*(cj5)*(py)*(pz)))+(((0.0290000000000000)*(pp)))+(((-0.462800000000000)*(cj5)*(px)*(pz)*(sj4)))+(((-0.0134212000000000)*(cj5)*(pz)))+(((0.462800000000000)*(cj4)*(sj4)*(sj5)*((px)*(px))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((-0.0320257600000000)*(px)*(sj4)*(sj5)))+(((-0.462800000000000)*(cj4)*(sj4)*(sj5)*((py)*(py))))+(((-1.00000000000000)*(cj4)*(pp)*(py)))+(((-0.138400000000000)*(cj4)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(px)*(py)*((sj4)*(sj4))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((-0.000928747040000000)*(sj5)))+(((-0.462800000000000)*(px)*(py)*(sj5)*((cj4)*(cj4))))+(((0.138400000000000)*(px)*(py)*((cj4)*(cj4))))+(((0.0320257600000000)*(cj4)*(py)*(sj5)))+(((0.0134212000000000)*(cj4)*(px)*(sj5)))+(((0.462800000000000)*(px)*(py)*(sj5)*((sj4)*(sj4))))+(((0.138400000000000)*(cj4)*(sj4)*((py)*(py))))+(((-0.00401360000000000)*(cj4)*(px)))+(((-0.00401360000000000)*(py)*(sj4)))+(((0.0134212000000000)*(py)*(sj4)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((((0.0348083900000000)*(pz)*(sj5)))+(((0.462800000000000)*(cj5)*(sj5)*((cj4)*(cj4))*((px)*(px))))+(((-0.138400000000000)*(cj4)*(px)*(pz)*(sj5)))+(((-0.00401360000000000)*(cj5)*(px)*(sj4)))+(((0.462800000000000)*(cj5)*(sj5)*((py)*(py))*((sj4)*(sj4))))+(((pp)*(pz)*(sj5)))+(((-0.00240874058800000)*(cj5)))+(((-0.0580000000000000)*(cj4)*(py)*(pz)*(sj5)))+(((0.0580000000000000)*(px)*(pz)*(sj4)*(sj5)))+(((0.0320257600000000)*(pz)*((cj5)*(cj5))))+(((0.462800000000000)*(py)*(pz)*(sj4)*((sj5)*(sj5))))+(((0.00221618259200000)*(cj5)*(sj5)))+(((0.00401360000000000)*(cj4)*(cj5)*(py)))+(((-0.0580000000000000)*(cj4)*(cj5)*(sj4)*((py)*(py))))+(((-0.462800000000000)*(py)*(pz)*(sj4)*((cj5)*(cj5))))+(((-0.0320257600000000)*(pz)*((sj5)*(sj5))))+(((0.0443856700000000)*(cj5)*(py)*(sj4)))+(((-0.462800000000000)*(cj4)*(px)*(pz)*((cj5)*(cj5))))+(((-0.0580000000000000)*(cj5)*(px)*(py)*((cj4)*(cj4))))+(((-0.276800000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)))+(((-0.462800000000000)*(cj5)*(sj5)*((pz)*(pz))))+(((cj4)*(cj5)*(pp)*(px)))+(((-0.138400000000000)*(cj5)*((py)*(py))*((sj4)*(sj4))))+(((cj5)*(pp)*(py)*(sj4)))+(((-0.0640515200000000)*(cj4)*(cj5)*(px)*(sj5)))+(((0.0443856700000000)*(cj4)*(cj5)*(px)))+(((-0.138400000000000)*(cj5)*((cj4)*(cj4))*((px)*(px))))+(((0.0580000000000000)*(cj5)*(px)*(py)*((sj4)*(sj4))))+(((-0.0692000000000000)*(cj5)*(pp)))+(((0.462800000000000)*(cj4)*(px)*(pz)*((sj5)*(sj5))))+(((-0.0640515200000000)*(cj5)*(py)*(sj4)*(sj5)))+(((0.925600000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)*(sj5)))+(((0.0580000000000000)*(cj4)*(cj5)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(py)*(pz)*(sj4)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((0.00100944331000000)+(((-0.0364903900000000)*(cj4)*(py)))+(((pp)*(px)*(sj4)))+(((0.0364903900000000)*(px)*(sj4)))+(((0.462800000000000)*(cj4)*(cj5)*(py)*(pz)))+(((0.0290000000000000)*(pp)))+(((-0.462800000000000)*(cj5)*(px)*(pz)*(sj4)))+(((-0.0134212000000000)*(cj5)*(pz)))+(((0.462800000000000)*(cj4)*(sj4)*(sj5)*((px)*(px))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((-0.0320257600000000)*(px)*(sj4)*(sj5)))+(((-0.462800000000000)*(cj4)*(sj4)*(sj5)*((py)*(py))))+(((-1.00000000000000)*(cj4)*(pp)*(py)))+(((-0.138400000000000)*(cj4)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(px)*(py)*((sj4)*(sj4))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((-0.000928747040000000)*(sj5)))+(((-0.462800000000000)*(px)*(py)*(sj5)*((cj4)*(cj4))))+(((0.138400000000000)*(px)*(py)*((cj4)*(cj4))))+(((0.0320257600000000)*(cj4)*(py)*(sj5)))+(((0.0134212000000000)*(cj4)*(px)*(sj5)))+(((0.462800000000000)*(px)*(py)*(sj5)*((sj4)*(sj4))))+(((0.138400000000000)*(cj4)*(sj4)*((py)*(py))))+(((-0.00401360000000000)*(cj4)*(px)))+(((-0.00401360000000000)*(py)*(sj4)))+(((0.0134212000000000)*(py)*(sj4)*(sj5)))))), ((((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((((0.0348083900000000)*(pz)*(sj5)))+(((0.462800000000000)*(cj5)*(sj5)*((cj4)*(cj4))*((px)*(px))))+(((-0.138400000000000)*(cj4)*(px)*(pz)*(sj5)))+(((-0.00401360000000000)*(cj5)*(px)*(sj4)))+(((0.462800000000000)*(cj5)*(sj5)*((py)*(py))*((sj4)*(sj4))))+(((pp)*(pz)*(sj5)))+(((-0.00240874058800000)*(cj5)))+(((-0.0580000000000000)*(cj4)*(py)*(pz)*(sj5)))+(((0.0580000000000000)*(px)*(pz)*(sj4)*(sj5)))+(((0.0320257600000000)*(pz)*((cj5)*(cj5))))+(((0.462800000000000)*(py)*(pz)*(sj4)*((sj5)*(sj5))))+(((0.00221618259200000)*(cj5)*(sj5)))+(((0.00401360000000000)*(cj4)*(cj5)*(py)))+(((-0.0580000000000000)*(cj4)*(cj5)*(sj4)*((py)*(py))))+(((-0.462800000000000)*(py)*(pz)*(sj4)*((cj5)*(cj5))))+(((-0.0320257600000000)*(pz)*((sj5)*(sj5))))+(((0.0443856700000000)*(cj5)*(py)*(sj4)))+(((-0.462800000000000)*(cj4)*(px)*(pz)*((cj5)*(cj5))))+(((-0.0580000000000000)*(cj5)*(px)*(py)*((cj4)*(cj4))))+(((-0.276800000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)))+(((-0.462800000000000)*(cj5)*(sj5)*((pz)*(pz))))+(((cj4)*(cj5)*(pp)*(px)))+(((-0.138400000000000)*(cj5)*((py)*(py))*((sj4)*(sj4))))+(((cj5)*(pp)*(py)*(sj4)))+(((-0.0640515200000000)*(cj4)*(cj5)*(px)*(sj5)))+(((0.0443856700000000)*(cj4)*(cj5)*(px)))+(((-0.138400000000000)*(cj5)*((cj4)*(cj4))*((px)*(px))))+(((0.0580000000000000)*(cj5)*(px)*(py)*((sj4)*(sj4))))+(((-0.0692000000000000)*(cj5)*(pp)))+(((0.462800000000000)*(cj4)*(px)*(pz)*((sj5)*(sj5))))+(((-0.0640515200000000)*(cj5)*(py)*(sj4)*(sj5)))+(((0.925600000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)*(sj5)))+(((0.0580000000000000)*(cj4)*(cj5)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(py)*(pz)*(sj4)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.07975748268771)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0752999994552756)+(((py)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((cj4)*(px)*(sj5))));
evalcond[2]=((4.04497489967539e-5)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138400000000000)*(cj4)*(px)))+(((-1.00000000000000)*(pp)))+(((0.138400000000000)*(py)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((-1535753594.90240)+(((52957020513.8758)*(cj4)*(py)))+(((-52957020513.8758)*(px)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3664625819.56021)*(cj5)))+(((52957020513.8758)*(pz)*(sj5)))+(((52957020513.8758)*(cj5)*(py)*(sj4)))+(((52957020513.8758)*(cj4)*(cj5)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((-1535753594.90240)+(((52957020513.8758)*(cj4)*(py)))+(((-52957020513.8758)*(px)*(sj4)))), ((((-3664625819.56021)*(cj5)))+(((52957020513.8758)*(pz)*(sj5)))+(((52957020513.8758)*(cj5)*(py)*(sj4)))+(((52957020513.8758)*(cj4)*(cj5)*(px)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4))));
evalcond[2]=((0.387500000000000)+(((py)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)))+(((-0.0692000000000000)*(sj5)))+(((cj4)*(px)*(sj5))));
evalcond[3]=((0.144526610000000)+(((0.0580000000000000)*(cj4)*(py)))+(((-0.0580000000000000)*(px)*(sj4)))+(((0.138400000000000)*(cj4)*(px)))+(((-1.00000000000000)*(pp)))+(((0.138400000000000)*(py)*(sj4))));
evalcond[4]=((((-1.00000000000000)*(pz)*(sj5)))+(((0.0692000000000000)*(cj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(px)))+(((-1.00000000000000)*(cj5)*(py)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x125=(py)*(py);
IKReal x126=(cj5)*(cj5);
IKReal x127=(cj4)*(cj4);
IKReal x128=(px)*(px);
IKReal x129=(sj4)*(sj4);
dummyeval[0]=((1.00000000000000)+(((2378.12128418549)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((1189.06064209275)*(x125)*(x126)*(x129)))+(((2378.12128418549)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((1189.06064209275)*(x126)*(x127)*(x128)))+(((2378.12128418549)*(cj4)*(px)*(py)*(sj4)*(x126)))+(((1189.06064209275)*(x128)*(x129)))+(((-164.565992865636)*(py)*(sj4)*(x126)))+(((-164.565992865636)*(cj4)*(px)*(x126)))+(((5.69398335315101)*(x126)))+(((-2378.12128418549)*(cj4)*(px)*(py)*(sj4)))+(((-164.565992865636)*(cj5)*(pz)*(sj5)))+(((1189.06064209275)*(x125)*(x127)))+(((-68.9655172413793)*(cj4)*(py)))+(((68.9655172413793)*(px)*(sj4)))+(((1189.06064209275)*((pz)*(pz))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((-1.00000000000000)*(((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((0.00100944331000000)+(((-0.0364903900000000)*(cj4)*(py)))+(((pp)*(px)*(sj4)))+(((0.0364903900000000)*(px)*(sj4)))+(((0.462800000000000)*(cj4)*(cj5)*(py)*(pz)))+(((0.0290000000000000)*(pp)))+(((-0.462800000000000)*(cj5)*(px)*(pz)*(sj4)))+(((-0.0134212000000000)*(cj5)*(pz)))+(((0.462800000000000)*(cj4)*(sj4)*(sj5)*((px)*(px))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((-0.0320257600000000)*(px)*(sj4)*(sj5)))+(((-0.462800000000000)*(cj4)*(sj4)*(sj5)*((py)*(py))))+(((-1.00000000000000)*(cj4)*(pp)*(py)))+(((-0.138400000000000)*(cj4)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(px)*(py)*((sj4)*(sj4))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((-0.000928747040000000)*(sj5)))+(((-0.462800000000000)*(px)*(py)*(sj5)*((cj4)*(cj4))))+(((0.138400000000000)*(px)*(py)*((cj4)*(cj4))))+(((0.0320257600000000)*(cj4)*(py)*(sj5)))+(((0.0134212000000000)*(cj4)*(px)*(sj5)))+(((0.462800000000000)*(px)*(py)*(sj5)*((sj4)*(sj4))))+(((0.138400000000000)*(cj4)*(sj4)*((py)*(py))))+(((-0.00401360000000000)*(cj4)*(px)))+(((-0.00401360000000000)*(py)*(sj4)))+(((0.0134212000000000)*(py)*(sj4)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((((0.0348083900000000)*(pz)*(sj5)))+(((0.462800000000000)*(cj5)*(sj5)*((cj4)*(cj4))*((px)*(px))))+(((-0.138400000000000)*(cj4)*(px)*(pz)*(sj5)))+(((-0.00401360000000000)*(cj5)*(px)*(sj4)))+(((0.462800000000000)*(cj5)*(sj5)*((py)*(py))*((sj4)*(sj4))))+(((pp)*(pz)*(sj5)))+(((-0.00240874058800000)*(cj5)))+(((-0.0580000000000000)*(cj4)*(py)*(pz)*(sj5)))+(((0.0580000000000000)*(px)*(pz)*(sj4)*(sj5)))+(((0.0320257600000000)*(pz)*((cj5)*(cj5))))+(((0.462800000000000)*(py)*(pz)*(sj4)*((sj5)*(sj5))))+(((0.00221618259200000)*(cj5)*(sj5)))+(((0.00401360000000000)*(cj4)*(cj5)*(py)))+(((-0.0580000000000000)*(cj4)*(cj5)*(sj4)*((py)*(py))))+(((-0.462800000000000)*(py)*(pz)*(sj4)*((cj5)*(cj5))))+(((-0.0320257600000000)*(pz)*((sj5)*(sj5))))+(((0.0443856700000000)*(cj5)*(py)*(sj4)))+(((-0.462800000000000)*(cj4)*(px)*(pz)*((cj5)*(cj5))))+(((-0.0580000000000000)*(cj5)*(px)*(py)*((cj4)*(cj4))))+(((-0.276800000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)))+(((-0.462800000000000)*(cj5)*(sj5)*((pz)*(pz))))+(((cj4)*(cj5)*(pp)*(px)))+(((-0.138400000000000)*(cj5)*((py)*(py))*((sj4)*(sj4))))+(((cj5)*(pp)*(py)*(sj4)))+(((-0.0640515200000000)*(cj4)*(cj5)*(px)*(sj5)))+(((0.0443856700000000)*(cj4)*(cj5)*(px)))+(((-0.138400000000000)*(cj5)*((cj4)*(cj4))*((px)*(px))))+(((0.0580000000000000)*(cj5)*(px)*(py)*((sj4)*(sj4))))+(((-0.0692000000000000)*(cj5)*(pp)))+(((0.462800000000000)*(cj4)*(px)*(pz)*((sj5)*(sj5))))+(((-0.0640515200000000)*(cj5)*(py)*(sj4)*(sj5)))+(((0.925600000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)*(sj5)))+(((0.0580000000000000)*(cj4)*(cj5)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(py)*(pz)*(sj4)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((0.00100944331000000)+(((-0.0364903900000000)*(cj4)*(py)))+(((pp)*(px)*(sj4)))+(((0.0364903900000000)*(px)*(sj4)))+(((0.462800000000000)*(cj4)*(cj5)*(py)*(pz)))+(((0.0290000000000000)*(pp)))+(((-0.462800000000000)*(cj5)*(px)*(pz)*(sj4)))+(((-0.0134212000000000)*(cj5)*(pz)))+(((0.462800000000000)*(cj4)*(sj4)*(sj5)*((px)*(px))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((-0.0320257600000000)*(px)*(sj4)*(sj5)))+(((-0.462800000000000)*(cj4)*(sj4)*(sj5)*((py)*(py))))+(((-1.00000000000000)*(cj4)*(pp)*(py)))+(((-0.138400000000000)*(cj4)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(px)*(py)*((sj4)*(sj4))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((-0.000928747040000000)*(sj5)))+(((-0.462800000000000)*(px)*(py)*(sj5)*((cj4)*(cj4))))+(((0.138400000000000)*(px)*(py)*((cj4)*(cj4))))+(((0.0320257600000000)*(cj4)*(py)*(sj5)))+(((0.0134212000000000)*(cj4)*(px)*(sj5)))+(((0.462800000000000)*(px)*(py)*(sj5)*((sj4)*(sj4))))+(((0.138400000000000)*(cj4)*(sj4)*((py)*(py))))+(((-0.00401360000000000)*(cj4)*(px)))+(((-0.00401360000000000)*(py)*(sj4)))+(((0.0134212000000000)*(py)*(sj4)*(sj5)))))), ((((IKabs(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py))))) != 0)?((IKReal)1/(((4.87780000000000e-5)+(((0.116000000000000)*(cj4)*(px)*(py)*(sj4)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj4)*(px)*((cj5)*(cj5))))+(((-0.00802720000000000)*(cj5)*(pz)*(sj5)))+(((-0.00802720000000000)*(py)*(sj4)*((cj5)*(cj5))))+(((0.0580000000000000)*((px)*(px))*((sj4)*(sj4))))+(((0.0580000000000000)*((cj4)*(cj4))*((py)*(py))))+(((0.000277741120000000)*((cj5)*(cj5))))+(((0.0580000000000000)*((cj4)*(cj4))*((cj5)*(cj5))*((px)*(px))))+(((0.0580000000000000)*((pz)*(pz))*((sj5)*(sj5))))+(((-0.116000000000000)*(cj4)*(px)*(py)*(sj4)))+(((0.116000000000000)*(cj4)*(cj5)*(px)*(pz)*(sj5)))+(((0.0580000000000000)*((cj5)*(cj5))*((py)*(py))*((sj4)*(sj4))))+(((0.116000000000000)*(cj5)*(py)*(pz)*(sj4)*(sj5)))+(((0.00336400000000000)*(px)*(sj4)))+(((-0.00336400000000000)*(cj4)*(py)))))):(IKReal)1.0e30))*(((((0.0348083900000000)*(pz)*(sj5)))+(((0.462800000000000)*(cj5)*(sj5)*((cj4)*(cj4))*((px)*(px))))+(((-0.138400000000000)*(cj4)*(px)*(pz)*(sj5)))+(((-0.00401360000000000)*(cj5)*(px)*(sj4)))+(((0.462800000000000)*(cj5)*(sj5)*((py)*(py))*((sj4)*(sj4))))+(((pp)*(pz)*(sj5)))+(((-0.00240874058800000)*(cj5)))+(((-0.0580000000000000)*(cj4)*(py)*(pz)*(sj5)))+(((0.0580000000000000)*(px)*(pz)*(sj4)*(sj5)))+(((0.0320257600000000)*(pz)*((cj5)*(cj5))))+(((0.462800000000000)*(py)*(pz)*(sj4)*((sj5)*(sj5))))+(((0.00221618259200000)*(cj5)*(sj5)))+(((0.00401360000000000)*(cj4)*(cj5)*(py)))+(((-0.0580000000000000)*(cj4)*(cj5)*(sj4)*((py)*(py))))+(((-0.462800000000000)*(py)*(pz)*(sj4)*((cj5)*(cj5))))+(((-0.0320257600000000)*(pz)*((sj5)*(sj5))))+(((0.0443856700000000)*(cj5)*(py)*(sj4)))+(((-0.462800000000000)*(cj4)*(px)*(pz)*((cj5)*(cj5))))+(((-0.0580000000000000)*(cj5)*(px)*(py)*((cj4)*(cj4))))+(((-0.276800000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)))+(((-0.462800000000000)*(cj5)*(sj5)*((pz)*(pz))))+(((cj4)*(cj5)*(pp)*(px)))+(((-0.138400000000000)*(cj5)*((py)*(py))*((sj4)*(sj4))))+(((cj5)*(pp)*(py)*(sj4)))+(((-0.0640515200000000)*(cj4)*(cj5)*(px)*(sj5)))+(((0.0443856700000000)*(cj4)*(cj5)*(px)))+(((-0.138400000000000)*(cj5)*((cj4)*(cj4))*((px)*(px))))+(((0.0580000000000000)*(cj5)*(px)*(py)*((sj4)*(sj4))))+(((-0.0692000000000000)*(cj5)*(pp)))+(((0.462800000000000)*(cj4)*(px)*(pz)*((sj5)*(sj5))))+(((-0.0640515200000000)*(cj5)*(py)*(sj4)*(sj5)))+(((0.925600000000000)*(cj4)*(cj5)*(px)*(py)*(sj4)*(sj5)))+(((0.0580000000000000)*(cj4)*(cj5)*(sj4)*((px)*(px))))+(((-0.138400000000000)*(py)*(pz)*(sj4)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((-1.00000000000000)*(gconst48)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((-0.0692000000000000)*(cj5)))+(((cj5)*(py)*(sj4)))+(((pz)*(sj5)))+(((cj4)*(cj5)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((-1.00000000000000)*(gconst48)*(((0.0290000000000000)+(((-1.00000000000000)*(cj4)*(py)))+(((px)*(sj4)))))), ((gconst48)*(((((-0.0692000000000000)*(cj5)))+(((cj5)*(py)*(sj4)))+(((pz)*(sj5)))+(((cj4)*(cj5)*(px)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x77=((cj4)*(cj6));
IKReal x78=((cj5)*(sj4)*(sj6));
IKReal x79=((((-1.00000000000000)*(x78)))+(x77));
IKReal x80=((cj4)*(cj5)*(sj6));
IKReal x81=((cj6)*(sj4));
IKReal x82=((x80)+(x81));
IKReal x83=((-1.00000000000000)*(x82));
IKReal x84=((cj5)*(cj6)*(sj7));
IKReal x85=((cj7)*(sj5));
IKReal x86=((x84)+(x85));
IKReal x87=((-1.00000000000000)*(x86));
IKReal x88=((cj4)*(x87));
IKReal x89=((sj4)*(sj6)*(sj7));
IKReal x90=((x88)+(x89));
IKReal x91=((sj4)*(x87));
IKReal x92=((-1.00000000000000)*(cj4)*(sj6)*(sj7));
IKReal x93=((x91)+(x92));
IKReal x94=((cj5)*(cj7));
IKReal x95=((cj6)*(sj5)*(sj7));
IKReal x96=((x94)+(((-1.00000000000000)*(x95))));
IKReal x97=((cj6)*(x94));
IKReal x98=((sj5)*(sj7));
IKReal x99=((x97)+(((-1.00000000000000)*(x98))));
IKReal x100=((-1.00000000000000)*(cj7)*(sj4)*(sj6));
IKReal x101=((cj4)*(x99));
IKReal x102=((x100)+(x101));
IKReal x103=((cj6)*(x85));
IKReal x104=((cj5)*(sj7));
IKReal x105=((x104)+(x103));
IKReal x106=((sj4)*(x99));
IKReal x107=((cj4)*(cj7)*(sj6));
IKReal x108=((x106)+(x107));
new_r00=((((r10)*(x79)))+(((r00)*(x83)))+(((-1.00000000000000)*(r20)*(sj5)*(sj6))));
new_r01=((((r11)*(x79)))+(((r01)*(x83)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
new_r02=((((-1.00000000000000)*(r22)*(sj5)*(sj6)))+(((r02)*(x83)))+(((r12)*(x79))));
new_r10=((((r10)*(x93)))+(((r00)*(x90)))+(((r20)*(x96))));
new_r11=((((r21)*(x96)))+(((r11)*(x93)))+(((r01)*(x90))));
new_r12=((((r02)*(x90)))+(((r12)*(((x91)+(((-1.00000000000000)*(cj4)*(sj6)*(sj7)))))))+(((r22)*(x96))));
new_r20=((((r10)*(x108)))+(((r20)*(x105)))+(((r00)*(x102))));
new_r21=((((r21)*(x105)))+(((r01)*(x102)))+(((r11)*(x108))));
new_r22=((((r22)*(x105)))+(((r02)*(((x101)+(((-1.00000000000000)*(cj7)*(sj4)*(sj6)))))))+(((r12)*(x108))));
{
IKReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
cj9array[0]=new_r22;
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
if( j9valid[0] && j9valid[1] && IKabs(cj9array[0]-cj9array[1]) < 0.0001 && IKabs(sj9array[0]-sj9array[1]) < 0.0001 )
{
    j9valid[1]=false;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IKReal dummyeval[1];
IKReal gconst50;
gconst50=IKsign(sj9);
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst49;
gconst49=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
IKReal x109=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x109;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x109;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x110=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x110));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x110))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8valid[0] && j8valid[1] && IKabs(cj8array[0]-cj8array[1]) < 0.0001 && IKabs(sj8array[0]-sj8array[1]) < 0.0001 )
{
    j8valid[1]=false;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
if( IKabs(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj8)))+(((cj8)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x111=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x111));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x111))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8valid[0] && j8valid[1] && IKabs(cj8array[0]-cj8array[1]) < 0.0001 && IKabs(sj8array[0]-sj8array[1]) < 0.0001 )
{
    j8valid[1]=false;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
if( IKabs(((((new_r11)*(sj8)))+(((cj8)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
if( IKabs(((gconst49)*(new_r12)*(sj9))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(new_r02)*(sj9))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst49)*(new_r12)*(sj9)), ((gconst49)*(new_r02)*(sj9)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal dummyeval[1];
IKReal gconst51;
gconst51=IKsign(sj9);
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x112=((cj8)*(new_r12));
IKReal x113=((new_r02)*(sj8));
IKReal x114=((((-1.00000000000000)*(x113)))+(x112));
IKReal x115=((-1.00000000000000)+(new_r22));
IKReal x116=((new_r12)*(sj8));
IKReal x117=((cj8)*(new_r02));
IKReal x118=((x117)+(x116));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x115;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x114;
evalcond[5]=x114;
evalcond[6]=x118;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x115;
evalcond[10]=x118;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
if( IKabs(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj8)))+(((cj8)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x119=((cj8)*(new_r12));
IKReal x120=((new_r02)*(sj8));
IKReal x121=((((-1.00000000000000)*(x120)))+(x119));
IKReal x122=((new_r12)*(sj8));
IKReal x123=((cj8)*(new_r02));
IKReal x124=((x122)+(x123));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x121;
evalcond[5]=x121;
evalcond[6]=x124;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x124));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
if( IKabs(((((new_r11)*(sj8)))+(((cj8)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
if( IKabs(((gconst51)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst51)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst51)*(new_r21)), ((-1.00000000000000)*(gconst51)*(new_r20)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
if( IKabs(((gconst50)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst50)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((gconst50)*(new_r21)), ((-1.00000000000000)*(gconst50)*(new_r20)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IKReal dummyeval[1];
IKReal gconst52;
gconst52=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
if( IKabs(((gconst52)*(new_r12)*(sj9))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(new_r02)*(sj9))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst52)*(new_r12)*(sj9)), ((gconst52)*(new_r02)*(sj9)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots8(IKReal rawcoeffs[8+1], IKReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[8];
    const int maxsteps = 50;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[8];
    IKReal err[8];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 8; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "5ea00607fd3105c4d59f3ba2567d5ab8"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
