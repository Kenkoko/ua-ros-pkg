/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-18 10:04:57.761130
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKcos(j[0]);
x1=IKsin(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=((x2)*(x3));
x5=IKcos(j[1]);
x6=IKcos(j[2]);
x7=((x0)*(x5)*(x6));
x8=IKcos(j[3]);
x9=IKsin(j[1]);
x10=IKcos(j[4]);
x11=((x4)+(((-1.00000000000000)*(x7))));
x12=((x1)*(x11));
x13=((x0)*(x8)*(x9));
x14=((((-1.00000000000000)*(x13)))+(x12));
x15=((x2)*(x6));
x16=((x0)*(x3)*(x5));
x17=((x15)+(x16));
x18=IKsin(j[4]);
x19=IKsin(j[6]);
x20=IKcos(j[5]);
x21=((x7)+(((-1.00000000000000)*(x4))));
x22=((x21)*(x8));
x23=((x0)*(x1)*(x9));
x24=((((-1.00000000000000)*(x23)))+(x22));
x25=IKsin(j[5]);
x26=((x14)*(x18));
x27=((-1.00000000000000)*(x17));
x28=((x10)*(x27));
x29=((x26)+(x28));
x30=IKcos(j[6]);
x31=((x10)*(x14));
x32=((x17)*(x18));
x33=((x32)+(x31));
x34=((0.0290000000000000)*(x7));
x35=((0.0290000000000000)*(x4));
x36=((x5)*(x8));
x37=((x1)*(x6)*(x9));
x38=((((-1.00000000000000)*(x37)))+(x36));
x39=((x1)*(x5));
x40=((x6)*(x8)*(x9));
x41=((x39)+(x40));
x42=((x20)*(x41));
x43=((x18)*(x38));
x44=((x18)*(x3)*(x9));
x45=((x10)*(x38));
x46=((x44)+(x45));
x47=((x10)*(x3)*(x9));
x48=((-1.00000000000000)*(x47));
x49=((x48)+(x43));
x50=((x0)*(x3));
x51=((x15)*(x5));
x52=((x51)+(x50));
x53=((-1.00000000000000)*(x52));
x54=((x1)*(x53));
x55=((x2)*(x8)*(x9));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x0)*(x6));
x58=((x4)*(x5));
x59=((x58)+(((-1.00000000000000)*(x57))));
x60=((-1.00000000000000)*(x18)*(x59));
x61=((-1.00000000000000)*(x10)*(x56));
x62=((x60)+(x61));
x63=((x52)*(x8));
x64=((x1)*(x2)*(x9));
x65=((x63)+(((-1.00000000000000)*(x64))));
x66=((x20)*(x65));
x67=((x18)*(x56));
x68=((x57)+(((-1.00000000000000)*(x58))));
x69=((x10)*(x68));
x70=((x67)+(x69));
x71=((x25)*(x70));
x72=((x71)+(x66));
x73=((0.0290000000000000)*(x50));
x74=((0.0290000000000000)*(x51));
eerot[0]=((((x19)*(x33)))+(((x30)*(((((x25)*(x29)))+(((x20)*(x24))))))));
eerot[1]=((((x30)*(x33)))+(((x19)*(((((-1.00000000000000)*(x20)*(x24)))+(((-1.00000000000000)*(x25)*(x29))))))));
eerot[2]=((((-1.00000000000000)*(x20)*(x29)))+(((x24)*(x25))));
eetrans[0]=((0.0290000000000000)+(((x8)*(((((-0.262000000000000)*(x4)))+(((0.262000000000000)*(x7)))))))+(((x30)*(((((0.0910000000000000)*(x20)*(((((-1.00000000000000)*(x23)))+(x22)))))+(((0.0910000000000000)*(x25)*(x29)))))))+(((-0.262000000000000)*(x23)))+(((-1.00000000000000)*(x35)))+(((0.0290000000000000)*(x0)))+(((x25)*(((((-0.00200000000000000)*(x22)))+(((0.00200000000000000)*(x23)))))))+(((x19)*(((((0.0910000000000000)*(x31)))+(((0.0910000000000000)*(x32)))))))+(x34)+(((x20)*(((((0.00200000000000000)*(x28)))+(((0.00200000000000000)*(x26)))))))+(((-0.290000000000000)*(x0)*(x9)))+(((-0.0290000000000000)*(x13)))+(((x1)*(((((-1.00000000000000)*(x34)))+(x35))))));
eerot[3]=((((x19)*(x46)))+(((x30)*(((x42)+(((x25)*(x49))))))));
eerot[4]=((((x30)*(x46)))+(((-1.00000000000000)*(x19)*(((((x25)*(((((-1.00000000000000)*(x47)))+(x43)))))+(x42))))));
eerot[5]=((((x20)*(((((-1.00000000000000)*(x43)))+(x47)))))+(((x25)*(x41))));
eetrans[1]=((0.0920000000000000)+(((0.290000000000000)*(x5)))+(((0.0290000000000000)*(x36)))+(((0.262000000000000)*(x40)))+(((x19)*(((((0.0910000000000000)*(x45)))+(((0.0910000000000000)*(x44)))))))+(((0.262000000000000)*(x39)))+(((x20)*(((((-0.00200000000000000)*(x47)))+(((0.00200000000000000)*(x43)))))))+(((0.0290000000000000)*(x6)*(x9)))+(((x30)*(((((0.0910000000000000)*(x25)*(x49)))+(((0.0910000000000000)*(x42)))))))+(((x25)*(((((-0.00200000000000000)*(x40)))+(((-0.00200000000000000)*(x39)))))))+(((-0.0290000000000000)*(x37))));
eerot[6]=((((x19)*(x62)))+(((-1.00000000000000)*(x30)*(x72))));
eerot[7]=((((x19)*(x72)))+(((x30)*(x62))));
eerot[8]=((((x20)*(x70)))+(((x25)*(((x64)+(((-1.00000000000000)*(x63))))))));
eetrans[2]=((((-1.00000000000000)*(x73)))+(((-1.00000000000000)*(x74)))+(((x25)*(((((-0.00200000000000000)*(x64)))+(((0.00200000000000000)*(x63)))))))+(((x20)*(((((-0.00200000000000000)*(x67)))+(((-0.00200000000000000)*(x69)))))))+(((x30)*(((((-0.0910000000000000)*(x71)))+(((-0.0910000000000000)*(x66)))))))+(((x8)*(((((-0.262000000000000)*(x51)))+(((-0.262000000000000)*(x50)))))))+(((0.290000000000000)*(x2)*(x9)))+(((0.262000000000000)*(x64)))+(((x1)*(((x74)+(x73)))))+(((-0.0290000000000000)*(x2)))+(((0.0290000000000000)*(x55)))+(((x19)*(((((-0.0910000000000000)*(x10)*(x56)))+(((-0.0910000000000000)*(x18)*(x59))))))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0, htj0,
j2, cj2, sj2, htj2,
j3, cj3, sj3, htj3,
j4, cj4, sj4, htj4,
j5, cj5, sj5, htj5,
j6, cj6, sj6, htj6,
j1, cj1, sj1, htj1,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.0290000000000000)+(((-0.0910000000000000)*(r00)))+(px)+(((0.00200000000000000)*(r02))));
new_r10=((-1.00000000000000)*(r20));
new_r11=((-1.00000000000000)*(r21));
new_r12=((-1.00000000000000)*(r22));
new_py=((((-0.00200000000000000)*(r22)))+(((0.0910000000000000)*(r20)))+(((-1.00000000000000)*(pz))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((-0.0920000000000000)+(py)+(((0.00200000000000000)*(r12)))+(((-0.0910000000000000)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(py)*(py)*(py)*(py);
IKReal x1=(sj1)*(sj1);
IKReal x2=(px)*(px)*(px)*(px);
IKReal x3=(sj1)*(sj1)*(sj1)*(sj1);
IKReal x4=(px)*(px);
IKReal x5=(py)*(py);
IKReal x6=(sj1)*(sj1)*(sj1);
dummyeval[0]=((((602.000000000000)*(x1)*(x2)))+(((1204.00000000000)*(x1)*(x4)*(x5)))+(((20402.0000000000)*(x3)*(x4)*(x5)))+(x2)+(x0)+(((-40.0000000000000)*(sj1)*(x2)))+(((-40.0000000000000)*(sj1)*(x0)))+(((602.000000000000)*(x0)*(x1)))+(((2.00000000000000)*(x4)*(x5)))+(((10201.0000000000)*(x2)*(x3)))+(((-8080.00000000000)*(sj1)*(x1)*(x4)*(x5)))+(((10201.0000000000)*(x0)*(x3)))+(((-4040.00000000000)*(sj1)*(x1)*(x2)))+(((-80.0000000000000)*(sj1)*(x4)*(x5)))+(((-4040.00000000000)*(sj1)*(x0)*(x1))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x7=(sj1)*(sj1);
IKReal x8=(cj0)*(cj0);
IKReal x9=(px)*(px);
IKReal x10=(cj1)*(cj1);
IKReal x11=(pz)*(pz);
IKReal x12=(pp)*(pp);
IKReal x13=((2.00766283524904)*(sj1));
IKReal x14=((69.2297529396221)*(cj1)*(pz));
IKReal x15=((11804.0464508134)*(pp)*(x7));
IKReal x16=((132.117849121416)*(x7)*(x8)*(x9));
IKReal x17=((3.83141762452107)*(cj1)*(pz)*(sj1));
IKReal x18=((66.0589245607081)*(x10)*(x11));
IKReal x19=((19637.0168135280)*(x12)*(x7));
op[0]=((-4.50000000000000)+(((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x17)))+(sj1)+(((34.4827586206897)*(cj1)*(pz)))+(((4774.50499400757)*(pp)*(x7)))+(x16)+(((-290.271454363809)*(x7))));
op[1]=((-18.0689655172414)+(((-1435.00612297894)*(x7)))+(x13)+(x15)+(x14));
op[2]=((-29.1381952701810)+(((-7.66283524904215)*(cj1)*(pz)*(sj1)))+(((264.235698242833)*(x7)*(x8)*(x9)))+(((2.22222222222222)*(sj1)))+(((-132.117849121416)*(x10)*(x11)))+(((76.6283524904215)*(cj1)*(pz)))+(((12063.8049092228)*(pp)*(x7)))+(((-2660.15250503925)*(x7)))+(((-39274.0336270560)*(x12)*(x7))));
op[3]=((-22.0842911877395)+(x13)+(x15)+(x14)+(((-2190.84282531742)*(x7))));
op[4]=((-6.72222222222222)+(((-676.506232337485)*(x7)))+(((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x17)))+(x16)+(((7289.29991521522)*(pp)*(x7)))+(((1.22222222222222)*(sj1)))+(((42.1455938697318)*(cj1)*(pz))));
polyroots4(op,zeror,numroots);
IKReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IKReal htj3 = zeror[ij3];
tempj3array[0]=((2.00000000000000)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
bool valid = true;
for( int kj3 = 0; kj3 < numsolutions; ++kj3)
{
    if( IKabs(cj3array[kj3]-cj3array[numsolutions]) < 0.0001 && IKabs(sj3array[kj3]-sj3array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x20=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
cj0array[0]=((((-2.59100000000000)*(sj3)*(x20)))+(((-0.552000000000000)*(cj3)*(x20)))+(((-2.64801724137931)*(x20)))+(((17.2413793103448)*(pp)*(x20))));
if( cj0array[0] >= -1.0001 && cj0array[0] <= 1.0001 )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x21=((9.03448275862069)*(cj3));
IKReal x22=((1.00000000000000)+(x21));
IKReal x23=((x22)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x23;
dummyeval[1]=x23;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x24=((9.03448275862069)*(cj3));
IKReal x25=((1.00000000000000)+(x24));
IKReal x26=((x25)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x26;
dummyeval[1]=x26;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x27=((9.03448275862069)*(cj3));
dummyeval[0]=((1.00000000000000)+(((34.4827586206897)*(cj0)*(px)*(sj3)))+(((-311.533888228300)*(cj0)*(cj3)*(px)))+(x27)+(((-34.4827586206897)*(cj0)*(px)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(x27)+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.303863000000000)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((px)*(sj0));
evalcond[3]=((0.552000000000000)+(((-1.00000000000000)*(pz))));
evalcond[4]=((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(px))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x28=x9;
IKReal x29=(sj0)*(sj0);
IKReal x30=((1189.06064209275)*(x28)*(x29));
IKReal x31=x8;
IKReal x32=((1189.06064209275)*(x28)*(x31));
IKReal x33=((1.00000000000000)+(x32)+(x30));
IKReal x34=((68.9655172413793)*(cj0)*(px));
IKReal x35=((((-1.00000000000000)*(x34)))+(x33));
dummyeval[0]=x35;
dummyeval[1]=x35;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x36=x9;
IKReal x37=((0.0162970000000000)+(pp));
IKReal x38=((0.0580000000000000)*(cj0)*(px));
IKReal x39=((0.580000000000000)*(pz));
IKReal x40=((x39)+(x38));
IKReal x41=((((-1.00000000000000)*(x40)))+(x37));
IKReal x42=x8;
IKReal x43=((29.0000000000000)*(x36)*(x42));
IKReal x44=(sj0)*(sj0);
IKReal x45=((29.0000000000000)*(x36)*(x44));
IKReal x46=((0.0243890000000000)+(x45)+(x43));
IKReal x47=((1.68200000000000)*(cj0)*(px));
IKReal x48=((((-1.00000000000000)*(x47)))+(x46));
IKReal x49=((IKabs(x48) != 0)?((IKReal)1/(x48)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-500.000000000000)*(px)*(sj0)*(x41)*(x49)), ((-1.00000000000000)*(x41)*(x49)*(((14.5000000000000)+(((-500.000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((-5.70002016338060e-5)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.0279999995866351)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(px)*(sj0)), ((-44126294.4163049)+(((1521596359.18293)*(cj0)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x182=((cj0)*(px));
IKReal x183=((0.0290000000000000)+(((-1.00000000000000)*(x182))));
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x183)*(((IKabs(((0.000841000000000000)+(((-0.262000000000000)*(cj3)*(x182)))+(((0.0290000000000000)*(sj3)*(x182)))+(((-0.0290000000000000)*(x182)))+(((0.00759800000000000)*(cj3)))+(((-0.000841000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((-0.262000000000000)*(cj3)*(x182)))+(((0.0290000000000000)*(sj3)*(x182)))+(((-0.0290000000000000)*(x182)))+(((0.00759800000000000)*(cj3)))+(((-0.000841000000000000)*(sj3)))))):(IKReal)1.0e30))), ((-1.00000000000000)*(x183)*(((IKabs(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x184=((0.262000000000000)*(cj3));
IKReal x185=((0.0290000000000000)+(x184));
IKReal x186=((0.0290000000000000)*(sj3));
IKReal x187=((((-1.00000000000000)*(x186)))+(x185));
IKReal x188=((IKabs(x187) != 0)?((IKReal)1/(x187)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x188)), ((-1.00000000000000)*(x188)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x189=((0.262000000000000)*(cj3));
IKReal x190=((0.0290000000000000)+(x189));
IKReal x191=((0.0290000000000000)*(sj3));
IKReal x192=((((-1.00000000000000)*(x191)))+(x190));
IKReal x193=((IKabs(x192) != 0)?((IKReal)1/(x192)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x193)), ((-1.00000000000000)*(x193)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(pz)+(((0.262000000000000)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x194=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
cj0array[0]=((((-2.59100000000000)*(sj3)*(x194)))+(((17.2413793103448)*(pp)*(x194)))+(((-2.64801724137931)*(x194)))+(((-0.552000000000000)*(cj3)*(x194))));
if( cj0array[0] >= -1.0001 && cj0array[0] <= 1.0001 )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x195=((9.03448275862069)*(cj3));
IKReal x196=((1.00000000000000)+(x195));
IKReal x197=((x196)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x197;
dummyeval[1]=x197;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x198=((9.03448275862069)*(cj3));
IKReal x199=((1.00000000000000)+(x198));
IKReal x200=((x199)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x200;
dummyeval[1]=x200;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x201=((9.03448275862069)*(cj3));
dummyeval[0]=((1.00000000000000)+(((34.4827586206897)*(cj0)*(px)*(sj3)))+(x201)+(((-311.533888228300)*(cj0)*(cj3)*(px)))+(((-34.4827586206897)*(cj0)*(px)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(x201)+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.303863000000000)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((px)*(sj0));
evalcond[3]=((0.552000000000000)+(pz));
evalcond[4]=((-0.0290000000000000)+(((cj0)*(px))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x202=x9;
IKReal x203=(sj0)*(sj0);
IKReal x204=((1189.06064209275)*(x202)*(x203));
IKReal x205=x8;
IKReal x206=((1189.06064209275)*(x202)*(x205));
IKReal x207=((1.00000000000000)+(x206)+(x204));
IKReal x208=((68.9655172413793)*(cj0)*(px));
IKReal x209=((((-1.00000000000000)*(x208)))+(x207));
dummyeval[0]=x209;
dummyeval[1]=x209;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x210=x9;
IKReal x211=((0.580000000000000)*(pz));
IKReal x212=((0.0162970000000000)+(x211)+(pp));
IKReal x213=((0.0580000000000000)*(cj0)*(px));
IKReal x214=((x212)+(((-1.00000000000000)*(x213))));
IKReal x215=x8;
IKReal x216=((29.0000000000000)*(x210)*(x215));
IKReal x217=(sj0)*(sj0);
IKReal x218=((29.0000000000000)*(x210)*(x217));
IKReal x219=((0.0243890000000000)+(x216)+(x218));
IKReal x220=((1.68200000000000)*(cj0)*(px));
IKReal x221=((x219)+(((-1.00000000000000)*(x220))));
IKReal x222=((IKabs(x221) != 0)?((IKReal)1/(x221)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-500.000000000000)*(px)*(sj0)*(x214)*(x222)), ((x214)*(x222)*(((14.5000000000000)+(((-500.000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((-5.70002016338060e-5)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.0279999995866351)+(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(px)*(sj0)), ((44126294.4163049)+(((-1521596359.18293)*(cj0)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x223=((cj0)*(px));
IKReal x224=((0.0290000000000000)+(((-1.00000000000000)*(x223))));
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x224)*(((IKabs(((0.000841000000000000)+(((0.0290000000000000)*(sj3)*(x223)))+(((-0.262000000000000)*(cj3)*(x223)))+(((-0.0290000000000000)*(x223)))+(((0.00759800000000000)*(cj3)))+(((-0.000841000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((0.0290000000000000)*(sj3)*(x223)))+(((-0.262000000000000)*(cj3)*(x223)))+(((-0.0290000000000000)*(x223)))+(((0.00759800000000000)*(cj3)))+(((-0.000841000000000000)*(sj3)))))):(IKReal)1.0e30))), ((x224)*(((IKabs(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x225=((0.262000000000000)*(cj3));
IKReal x226=((0.0290000000000000)+(x225));
IKReal x227=((0.0290000000000000)*(sj3));
IKReal x228=((x226)+(((-1.00000000000000)*(x227))));
IKReal x229=((IKabs(x228) != 0)?((IKReal)1/(x228)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x229)), ((x229)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x230=((0.262000000000000)*(cj3));
IKReal x231=((0.0290000000000000)+(x230));
IKReal x232=((0.0290000000000000)*(sj3));
IKReal x233=((((-1.00000000000000)*(x232)))+(x231));
IKReal x234=((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x234)), ((x234)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x235=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
IKReal x236=((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30);
cj0array[0]=((((-0.290000000000000)*(x235)*(x236)))+(((-0.262000000000000)*(sj3)*(x235)*(x236)))+(((0.0290000000000000)*(x235)))+(((-0.0290000000000000)*(cj3)*(x235)*(x236)))+(((cj1)*(pz)*(x235)*(x236))));
if( cj0array[0] >= -1.0001 && cj0array[0] <= 1.0001 )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x237=((9.03448275862069)*(cj3));
IKReal x238=((1.00000000000000)+(x237));
IKReal x239=((x238)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x239;
dummyeval[1]=x239;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x240=((9.03448275862069)*(cj3));
IKReal x241=((1.00000000000000)+(x240));
IKReal x242=((x241)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x242;
dummyeval[1]=x242;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((1.00000000000000)+(((9.03448275862069)*(cj3)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((((34.4827586206897)*(cj0)*(cj1)*(px)*(sj3)))+(cj1)+(((-1.00000000000000)*(cj1)*(sj3)))+(((9.03448275862069)*(cj1)*(cj3)))+(((-311.533888228300)*(cj0)*(cj1)*(cj3)*(px)))+(((-311.533888228300)*(cj3)*(pz)*(sj1)))+(((34.4827586206897)*(pz)*(sj1)*(sj3)))+(((-34.4827586206897)*(cj0)*(cj1)*(px)))+(((-34.4827586206897)*(pz)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.303863000000000)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((px)*(sj0));
evalcond[3]=((0.552000000000000)+(((-0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1))));
evalcond[4]=((((0.0290000000000000)*(cj1)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x243=x10;
IKReal x244=x9;
IKReal x245=((0.0145000000000000)*(x243));
IKReal x246=x8;
IKReal x247=((17.2413793103448)*(x243)*(x244)*(x246));
IKReal x248=(sj0)*(sj0);
IKReal x249=((17.2413793103448)*(x244)*(x248));
IKReal x250=((34.4827586206897)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x251=x11;
IKReal x252=x7;
IKReal x253=((17.2413793103448)*(x251)*(x252));
IKReal x254=((x250)+(x253)+(x247)+(x245)+(x249));
IKReal x255=((cj1)*(pz)*(sj1));
IKReal x256=((cj0)*(px)*(x243));
IKReal x257=((x255)+(x256));
IKReal x258=((x254)+(((-1.00000000000000)*(x257))));
dummyeval[0]=x258;
dummyeval[1]=x258;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x259=x10;
IKReal x260=x9;
IKReal x261=((0.580000000000000)*(cj0)*(px)*(sj1));
IKReal x262=((0.0162970000000000)+(x261)+(pp));
IKReal x263=((0.580000000000000)*(cj1)*(pz));
IKReal x264=((0.0168200000000000)*(sj1));
IKReal x265=((0.0580000000000000)*(cj0)*(px));
IKReal x266=((x265)+(x264)+(x263));
IKReal x267=((x262)+(((-1.00000000000000)*(x266))));
IKReal x268=x11;
IKReal x269=x7;
IKReal x270=((29.0000000000000)*(x268)*(x269));
IKReal x271=((0.0243890000000000)*(x259));
IKReal x272=x8;
IKReal x273=((29.0000000000000)*(x259)*(x260)*(x272));
IKReal x274=((58.0000000000000)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x275=(sj0)*(sj0);
IKReal x276=((29.0000000000000)*(x260)*(x275));
IKReal x277=((x276)+(x274)+(x273)+(x270)+(x271));
IKReal x278=((1.68200000000000)*(cj1)*(pz)*(sj1));
IKReal x279=((1.68200000000000)*(cj0)*(px)*(x259));
IKReal x280=((x278)+(x279));
IKReal x281=((x277)+(((-1.00000000000000)*(x280))));
IKReal x282=((IKabs(x281) != 0)?((IKReal)1/(x281)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-500.000000000000)*(px)*(sj0)*(x267)*(x282)), ((x267)*(x282)*(((((500.000000000000)*(pz)*(sj1)))+(((-14.5000000000000)*(cj1)))+(((500.000000000000)*(cj0)*(cj1)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((-5.70002016338060e-5)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.0279999995866351)+(((-0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(px)*(sj0)), ((((1521596359.18293)*(pz)*(sj1)))+(((-44126294.4163049)*(cj1)))+(((1521596359.18293)*(cj0)*(cj1)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x283=((0.262000000000000)*(cj3));
IKReal x284=((0.0290000000000000)+(x283));
IKReal x285=((0.0290000000000000)*(sj3));
IKReal x286=((x284)+(((-1.00000000000000)*(x285))));
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30))), ((((IKabs(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((1.00000000000000)*(pz)*(sj1)*(x285)))+(((0.00759800000000000)*(cj1)*(cj3)))+(((-0.000841000000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((0.000841000000000000)*(cj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x283)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x285)))+(((-1.00000000000000)*(pz)*(sj1)*(x283))))) != 0)?((IKReal)1/(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((1.00000000000000)*(pz)*(sj1)*(x285)))+(((0.00759800000000000)*(cj1)*(cj3)))+(((-0.000841000000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((0.000841000000000000)*(cj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x283)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x285)))+(((-1.00000000000000)*(pz)*(sj1)*(x283)))))):(IKReal)1.0e30))*((((((px)*(px))*((sj0)*(sj0))))+(((-1.00000000000000)*((x286)*(x286))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x287=((0.262000000000000)*(cj3));
IKReal x288=((0.0290000000000000)+(x287));
IKReal x289=((0.0290000000000000)*(sj3));
IKReal x290=((x288)+(((-1.00000000000000)*(x289))));
IKReal x291=((IKabs(x290) != 0)?((IKReal)1/(x290)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x291)), ((x291)*(((((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0290000000000000)*(cj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x292=((0.262000000000000)*(cj3));
IKReal x293=((0.0290000000000000)+(x292));
IKReal x294=((0.0290000000000000)*(sj3));
IKReal x295=((((-1.00000000000000)*(x294)))+(x293));
IKReal x296=((IKabs(x295) != 0)?((IKReal)1/(x295)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x296)), ((x296)*(((((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0290000000000000)*(cj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x297=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
cj0array[0]=((((-0.552000000000000)*(cj3)*(x297)))+(((17.2413793103448)*(pp)*(x297)))+(((-2.59100000000000)*(sj3)*(x297)))+(((-2.64801724137931)*(x297))));
if( cj0array[0] >= -1.0001 && cj0array[0] <= 1.0001 )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x298=((9.03448275862069)*(cj3));
IKReal x299=((1.00000000000000)+(x298));
IKReal x300=((x299)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x300;
dummyeval[1]=x300;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x301=((9.03448275862069)*(cj3));
IKReal x302=((1.00000000000000)+(x301));
IKReal x303=((x302)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x303;
dummyeval[1]=x303;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((1.00000000000000)+(((9.03448275862069)*(cj3)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((((34.4827586206897)*(cj0)*(cj1)*(px)*(sj3)))+(cj1)+(((-1.00000000000000)*(cj1)*(sj3)))+(((9.03448275862069)*(cj1)*(cj3)))+(((-311.533888228300)*(cj0)*(cj1)*(cj3)*(px)))+(((-311.533888228300)*(cj3)*(pz)*(sj1)))+(((34.4827586206897)*(pz)*(sj1)*(sj3)))+(((-34.4827586206897)*(cj0)*(cj1)*(px)))+(((-34.4827586206897)*(pz)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.303863000000000)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((px)*(sj0));
evalcond[3]=((0.552000000000000)+(((-0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1))));
evalcond[4]=((((0.0290000000000000)*(cj1)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x304=x10;
IKReal x305=x9;
IKReal x306=((0.0145000000000000)*(x304));
IKReal x307=x8;
IKReal x308=((17.2413793103448)*(x304)*(x305)*(x307));
IKReal x309=(sj0)*(sj0);
IKReal x310=((17.2413793103448)*(x305)*(x309));
IKReal x311=((34.4827586206897)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x312=x11;
IKReal x313=x7;
IKReal x314=((17.2413793103448)*(x312)*(x313));
IKReal x315=((x308)+(x306)+(x314)+(x311)+(x310));
IKReal x316=((cj1)*(pz)*(sj1));
IKReal x317=((cj0)*(px)*(x304));
IKReal x318=((x317)+(x316));
IKReal x319=((x315)+(((-1.00000000000000)*(x318))));
dummyeval[0]=x319;
dummyeval[1]=x319;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x320=x10;
IKReal x321=x9;
IKReal x322=((0.580000000000000)*(cj0)*(px)*(sj1));
IKReal x323=((0.0162970000000000)+(x322)+(pp));
IKReal x324=((0.580000000000000)*(cj1)*(pz));
IKReal x325=((0.0168200000000000)*(sj1));
IKReal x326=((0.0580000000000000)*(cj0)*(px));
IKReal x327=((x324)+(x325)+(x326));
IKReal x328=((((-1.00000000000000)*(x327)))+(x323));
IKReal x329=x11;
IKReal x330=x7;
IKReal x331=((29.0000000000000)*(x329)*(x330));
IKReal x332=((0.0243890000000000)*(x320));
IKReal x333=x8;
IKReal x334=((29.0000000000000)*(x320)*(x321)*(x333));
IKReal x335=((58.0000000000000)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x336=(sj0)*(sj0);
IKReal x337=((29.0000000000000)*(x321)*(x336));
IKReal x338=((x332)+(x331)+(x337)+(x335)+(x334));
IKReal x339=((1.68200000000000)*(cj1)*(pz)*(sj1));
IKReal x340=((1.68200000000000)*(cj0)*(px)*(x320));
IKReal x341=((x339)+(x340));
IKReal x342=((x338)+(((-1.00000000000000)*(x341))));
IKReal x343=((IKabs(x342) != 0)?((IKReal)1/(x342)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-500.000000000000)*(px)*(sj0)*(x328)*(x343)), ((x328)*(x343)*(((((500.000000000000)*(pz)*(sj1)))+(((-14.5000000000000)*(cj1)))+(((500.000000000000)*(cj0)*(cj1)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((-5.70002016338060e-5)+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.0279999995866351)+(((-0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(px)*(sj0)), ((((1521596359.18293)*(pz)*(sj1)))+(((-44126294.4163049)*(cj1)))+(((1521596359.18293)*(cj0)*(cj1)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x344=((0.262000000000000)*(cj3));
IKReal x345=((0.0290000000000000)+(x344));
IKReal x346=((0.0290000000000000)*(sj3));
IKReal x347=((x345)+(((-1.00000000000000)*(x346))));
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(((IKabs(x347) != 0)?((IKReal)1/(x347)):(IKReal)1.0e30))), ((((IKabs(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(pz)*(sj1)*(x344)))+(((0.00759800000000000)*(cj1)*(cj3)))+(((-0.000841000000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((0.000841000000000000)*(cj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x344)))+(((1.00000000000000)*(pz)*(sj1)*(x346)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x346))))) != 0)?((IKReal)1/(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(pz)*(sj1)*(x344)))+(((0.00759800000000000)*(cj1)*(cj3)))+(((-0.000841000000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((0.000841000000000000)*(cj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x344)))+(((1.00000000000000)*(pz)*(sj1)*(x346)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x346)))))):(IKReal)1.0e30))*((((((px)*(px))*((sj0)*(sj0))))+(((-1.00000000000000)*((x347)*(x347))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x348=((0.262000000000000)*(cj3));
IKReal x349=((0.0290000000000000)+(x348));
IKReal x350=((0.0290000000000000)*(sj3));
IKReal x351=((((-1.00000000000000)*(x350)))+(x349));
IKReal x352=((IKabs(x351) != 0)?((IKReal)1/(x351)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x352)), ((x352)*(((((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0290000000000000)*(cj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x353=((0.262000000000000)*(cj3));
IKReal x354=((0.0290000000000000)+(x353));
IKReal x355=((0.0290000000000000)*(sj3));
IKReal x356=((((-1.00000000000000)*(x355)))+(x354));
IKReal x357=((IKabs(x356) != 0)?((IKReal)1/(x356)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(px)*(sj0)*(x357)), ((x357)*(((((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0290000000000000)*(cj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j0evalpoly[1];
IKReal x358=(sj1)*(sj1);
IKReal x359=(py)*(py)*(py)*(py);
IKReal x360=(px)*(px);
IKReal x361=(py)*(py);
IKReal x362=(sj1)*(sj1)*(sj1)*(sj1);
IKReal x363=(px)*(px)*(px)*(px);
IKReal x364=(sj1)*(sj1)*(sj1);
IKReal x365=(px)*(px)*(px);
IKReal x366=(pp)*(pp);
IKReal x367=(cj1)*(cj1);
IKReal x368=(pz)*(pz);
IKReal x369=((13112.1303210931)*(sj1)*(x360)*(x361));
IKReal x370=((1324325.16243040)*(sj1)*(x358)*(x360)*(x361));
IKReal x371=((197337.561332451)*(x358)*(x360)*(x361));
IKReal x372=((3343921.03513676)*(x360)*(x361)*(x362));
IKReal x373=((327.803258027327)*(x360)*(x361));
IKReal x374=((59250.9701557885)*(px)*(x358)*(x361));
IKReal x375=((3402371.74711122)*(pp)*(px)*(x358)*(x361));
IKReal x376=((11303.5606216320)*(pp)*(px)*(x361));
IKReal x377=((197337.561332451)*(cj1)*(px)*(pz)*(sj1)*(x361));
IKReal x378=((193947.420037932)*(px)*(x361)*(x362));
IKReal x379=((6687842.07027352)*(cj1)*(px)*(pz)*(sj1)*(x358)*(x361));
IKReal x380=((165.201538485151)*(px)*(x361));
IKReal x381=((5336.29793386623)*(px)*(sj1)*(x361));
IKReal x382=(cj1)*(cj1)*(cj1);
IKReal x383=(pz)*(pz)*(pz);
IKReal x384=(pp)*(pp)*(pp);
IKReal x385=((6556.06516054653)*(cj1)*(px)*(pz)*(x361));
IKReal x386=((339106.818648959)*(pp)*(px)*(sj1)*(x361));
IKReal x387=((1986487.74364560)*(cj1)*(px)*(pz)*(x358)*(x361));
IKReal x388=((11416596.2278483)*(pp)*(px)*(sj1)*(x358)*(x361));
IKReal x389=((243664.413290966)*(px)*(sj1)*(x358)*(x361));
IKReal x390=((224461.698435725)*(cj1)*(pz)*(x358)*(x361));
IKReal x391=((331081.290607600)*(pp)*(sj1)*(x358)*(x361));
IKReal x392=((1948889.76235034)*(sj1)*(x361)*(x366));
IKReal x393=((163.901629013663)*(x359));
IKReal x394=((1671960.51756838)*(x359)*(x362));
IKReal x395=((662162.581215200)*(sj1)*(x361)*(x367)*(x368));
IKReal x396=((458.674189319378)*(sj1)*(x361));
IKReal x397=((11416596.2278483)*(cj1)*(pp)*(pz)*(x358)*(x361));
IKReal x398=((113035.606216320)*(cj1)*(pp)*(pz)*(x361));
IKReal x399=((1461.88949519566)*(cj1)*(pz)*(x361));
IKReal x400=((5952.51052383404)*(sj1)*(x358)*(x361));
IKReal x401=((66800.1454943202)*(pp)*(sj1)*(x361));
IKReal x402=((98668.7806662253)*(x358)*(x359));
IKReal x403=((97444.4881175169)*(x361)*(x366));
IKReal x404=((2812.23759055001)*(x361)*(x362));
IKReal x405=((193947.420037932)*(cj1)*(pz)*(sj1)*(x358)*(x361));
IKReal x406=((35252.9570815934)*(cj1)*(pz)*(sj1)*(x361));
IKReal x407=((3343921.03513676)*(x358)*(x361)*(x367)*(x368));
IKReal x408=((2283319.24556965)*(cj1)*(pp)*(pz)*(sj1)*(x361));
IKReal x409=((2848.30238767502)*(pp)*(x361));
IKReal x410=((6556.06516054653)*(sj1)*(x359));
IKReal x411=((32452.5225447053)*(x361)*(x367)*(x368));
IKReal x412=((9647004.32363417)*(x358)*(x361)*(x366));
IKReal x413=((413758.846106812)*(pp)*(x358)*(x361));
IKReal x414=((16.0231250818658)*(x361));
IKReal x415=((3585.05630899276)*(x358)*(x361));
IKReal x416=((662162.581215200)*(sj1)*(x358)*(x359));
op[0]=((((-662162.581215200)*(sj1)*(x358)*(x363)))+(((-1.00000000000000)*(x369)))+(((-1.00000000000000)*(x370)))+(((1671960.51756838)*(x362)*(x363)))+(x373)+(x372)+(x371)+(x394)+(x393)+(x402)+(((163.901629013663)*(x363)))+(((-1.00000000000000)*(x416)))+(((-1.00000000000000)*(x410)))+(((98668.7806662253)*(x358)*(x363)))+(((-6556.06516054653)*(sj1)*(x363))));
op[1]=((((1986487.74364560)*(cj1)*(px)*(pz)*(x358)*(x360)))+(((-197337.561332451)*(cj1)*(px)*(pz)*(sj1)*(x360)))+(((-3402371.74711122)*(pp)*(px)*(x358)*(x360)))+(((11416596.2278483)*(pp)*(px)*(sj1)*(x358)*(x360)))+(((5336.29793386623)*(px)*(sj1)*(x360)))+(((-11303.5606216320)*(pp)*(px)*(x360)))+(((243664.413290966)*(px)*(sj1)*(x358)*(x360)))+(((-1.00000000000000)*(x379)))+(((-1.00000000000000)*(x374)))+(((-1.00000000000000)*(x375)))+(((-1.00000000000000)*(x376)))+(((-1.00000000000000)*(x377)))+(((-1.00000000000000)*(x378)))+(((-193947.420037932)*(px)*(x360)*(x362)))+(((339106.818648959)*(pp)*(px)*(sj1)*(x360)))+(((-6687842.07027352)*(cj1)*(px)*(pz)*(sj1)*(x358)*(x360)))+(x386)+(x387)+(x385)+(x381)+(x388)+(x389)+(((-165.201538485151)*(px)*(x360)))+(((-1.00000000000000)*(x380)))+(((6556.06516054653)*(cj1)*(px)*(pz)*(x360)))+(((-59250.9701557885)*(px)*(x358)*(x360))));
op[2]=((((29330790.9233726)*(x358)*(x360)*(x366)))+(((8436.71277165005)*(x360)*(x362)))+(((-5846669.28705101)*(sj1)*(x360)*(x366)))+(((-1.00000000000000)*(x395)))+(((-1.00000000000000)*(x392)))+(((-1.00000000000000)*(x390)))+(((-1.00000000000000)*(x391)))+(((-1.00000000000000)*(x396)))+(((-1.00000000000000)*(x397)))+(((-1.00000000000000)*(x398)))+(((-1.00000000000000)*(x399)))+(((6804743.49422244)*(cj1)*(pp)*(pz)*(sj1)*(x360)))+(((-5146.17204421038)*(cj1)*(pz)*(x360)))+(((-1.00000000000000)*(x372)))+(((-1.00000000000000)*(x373)))+(((-1.00000000000000)*(x371)))+(((-1986487.74364560)*(sj1)*(x360)*(x367)*(x368)))+(((112779.151032936)*(cj1)*(pz)*(sj1)*(x360)))+(((-3343921.03513676)*(x359)*(x362)))+(((8544.90716302505)*(pp)*(x360)))+(((1324325.16243040)*(sj1)*(x358)*(x359)))+(x370)+(x369)+(((-17857.5315715021)*(sj1)*(x358)*(x360)))+(((1120237.23162810)*(pp)*(x358)*(x360)))+(((292333.464352551)*(x360)*(x366)))+(((-673385.095307175)*(cj1)*(pz)*(x358)*(x360)))+(x403)+(x405)+(x404)+(x407)+(x406)+(x409)+(x408)+(x412)+(x413)+(x411)+(x414)+(x415)+(((67.2327537098750)*(x360)))+(((-993243.871822800)*(pp)*(sj1)*(x358)*(x360)))+(((-327.803258027327)*(x359)))+(((-339106.818648959)*(cj1)*(pp)*(pz)*(x360)))+(((13112.1303210931)*(sj1)*(x359)))+(((-187288.306161867)*(pp)*(sj1)*(x360)))+(((98668.7806662253)*(x360)*(x367)*(x368)))+(((581842.260113796)*(cj1)*(pz)*(sj1)*(x358)*(x360)))+(((-34249788.6835448)*(cj1)*(pp)*(pz)*(x358)*(x360)))+(((-197337.561332451)*(x358)*(x359)))+(((10949.8005519304)*(x358)*(x360)))+(((-1589.71095580099)*(sj1)*(x360)))+(((-1.00000000000000)*(x400)))+(((-1.00000000000000)*(x401)))+(((10031763.1054103)*(x358)*(x360)*(x367)*(x368))));
op[3]=((((1699331.06812661)*(px)*(sj1)*(x366)))+(((29981.8956048808)*(pp)*(px)*(sj1)))+(((-58661581.8467451)*(cj1)*(px)*(pz)*(sj1)*(x366)))+(((-495.223965875584)*(px)*(x358)))+(((-163.109780251901)*(px)*(x362)))+(((-16873.4255433001)*(cj1)*(px)*(pz)*(sj1)*(x358)))+(((-2043136.90192374)*(cj1)*(pp)*(px)*(pz)*(sj1)))+(((662162.581215200)*(cj1)*(px)*(pz)*(x367)*(x368)))+(((-3360154.76267300)*(pp)*(px)*(x366)))+(((34044.4269505983)*(cj1)*(px)*(pz)*(x358)))+(((1986487.74364560)*(cj1)*(pp)*(px)*(pz)*(x358)))+(((1440.47196651889)*(cj1)*(px)*(pz)))+(x380)+(x379)+(x378)+(x377)+(x376)+(x375)+(x374)+(((-3402371.74711122)*(pp)*(px)*(x367)*(x368)))+(((-147325.985569397)*(px)*(x366)))+(((-581842.260113796)*(px)*(x358)*(x367)*(x368)))+(((-6687842.07027352)*(cj1)*(px)*(pz)*(sj1)*(x367)*(x368)))+(((185.663914227438)*(px)*(sj1)))+(((-56389.5755164680)*(pp)*(px)*(x358)))+(((34249788.6835448)*(pp)*(px)*(sj1)*(x367)*(x368)))+(((33601547.6267300)*(pp)*(px)*(sj1)*(x366)))+(((-53528.1808771474)*(px)*(x367)*(x368)))+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x387)))+(((-1.00000000000000)*(x386)))+(((-1.00000000000000)*(x381)))+(((-1.00000000000000)*(x389)))+(((-1.00000000000000)*(x388)))+(((-18629.0057239057)*(cj1)*(px)*(pz)*(sj1)))+(((5846669.28705101)*(cj1)*(px)*(pz)*(x366)))+(((-1701185.87355561)*(px)*(x358)*(x366)))+(((-12.9039434896268)*(px)))+(((177454.208421048)*(cj1)*(pp)*(px)*(pz)))+(((-2318.37081758190)*(pp)*(px)))+(((28804.0722828612)*(pp)*(px)*(sj1)*(x358)))+(((485.569449187046)*(px)*(sj1)*(x358)))+(((615776.950741452)*(px)*(sj1)*(x367)*(x368))));
op[4]=((1.00000000000000)+(((53528.1808771474)*(cj1)*(pp)*(pz)*(sj1)))+(((7762.18561651557)*(x367)*(x368)))+(((-143.890227198391)*(cj1)*(pz)))+(((193947.420037932)*(cj1)*(pz)*(sj1)*(x367)*(x368)))+(((-28804.0722828612)*(cj1)*(pp)*(pz)*(x358)))+(((-33601547.6267300)*(cj1)*(pp)*(pz)*(x366)))+(((-186056.268725243)*(cj1)*(pz)*(x367)*(x368)))+(((776.158622718638)*(pp)*(x358)))+(((-4.53772633793996)*(sj1)*(x358)))+(((-24835.7235606705)*(cj1)*(pp)*(pz)))+(((-1529777.65880213)*(cj1)*(pz)*(x366)))+(((6.52799810348960)*(x358)))+(((-720.235983259443)*(pp)*(sj1)))+(((163.109780251901)*(cj1)*(pz)*(sj1)*(x358)))+(((-11416596.2278483)*(cj1)*(pp)*(pz)*(x367)*(x368)))+(((-16186.8953790962)*(sj1)*(x367)*(x368)))+(x395)+(x394)+(x397)+(x396)+(x391)+(x390)+(x393)+(x392)+(x399)+(x398)+(((-469.419965993789)*(cj1)*(pz)*(x358)))+(((222.481784303910)*(pp)))+(x401)+(x400)+(x402)+(((19985.9553239819)*(x366)))+(((922899.670295646)*(pp)*(x367)*(x368)))+(((1.18254590682628)*(x362)))+(((-993243.871822800)*(pp)*(sj1)*(x367)*(x368)))+(((8436.71277165005)*(x358)*(x367)*(x368)))+(((14483425.7011767)*((x366)*(x366))))+(((450.206765757903)*(cj1)*(pz)*(sj1)))+(((24667.1951665563)*(x358)*(x366)))+(((1701185.87355561)*(cj1)*(pz)*(sj1)*(x366)))+(((-278.439365400992)*(pp)*(sj1)*(x358)))+(((-4.17281658875333)*(sj1)))+(((-1.00000000000000)*(x412)))+(((-1.00000000000000)*(x415)))+(((-1.00000000000000)*(x414)))+(((-1.00000000000000)*(x416)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x410)))+(((-1.00000000000000)*(x413)))+(((-1.00000000000000)*(x407)))+(((-1.00000000000000)*(x404)))+(((-1.00000000000000)*(x405)))+(((-1.00000000000000)*(x403)))+(((-1.00000000000000)*(x408)))+(((-1.00000000000000)*(x409)))+(((-1.00000000000000)*(x406)))+(((-44363.5521052619)*(sj1)*(x366)))+(((846701.066490790)*(pp)*(x366)))+(((29330790.9233726)*(x366)*(x367)*(x368)))+(((-974444.881175169)*(pp)*(sj1)*(x366)))+(((1671960.51756838)*((x367)*(x367))*((x368)*(x368)))));
polyroots4(op,zeror,numroots);
IKReal j0array[4], cj0array[4], sj0array[4], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IKReal cj0 = zeror[ij0];
IKReal x417=x358;
IKReal x418=x361;
IKReal x419=x360;
IKReal x420=((0.000233747540000000)*(x418));
IKReal x421=((0.0236085015400000)*(x417)*(x418));
IKReal x422=((0.00467495080000000)*(sj1)*(x418));
tempj0array[0]=IKatan2(((((IKabs(((((cj0)*(((((-0.0472170030800000)*(px)*(py)*(x417)))+(((0.00934990160000000)*(px)*(py)*(sj1)))+(((-0.000467495080000000)*(px)*(py)))))))+(((-0.00467495080000000)*(cj1)*(py)*(pz)))+(((0.000117800699900000)*(py)))+(((0.00136929308932000)*(py)*(x417)))+(((-0.00144915414540000)*(py)*(sj1)))+(((0.00806026000000000)*(pp)*(py)))+(((0.0472170030800000)*(cj1)*(py)*(pz)*(sj1)))+(((-0.0806026000000000)*(pp)*(py)*(sj1))))) != 0)?((IKReal)1/(((((cj0)*(((((-0.0472170030800000)*(px)*(py)*(x417)))+(((0.00934990160000000)*(px)*(py)*(sj1)))+(((-0.000467495080000000)*(px)*(py)))))))+(((-0.00467495080000000)*(cj1)*(py)*(pz)))+(((0.000117800699900000)*(py)))+(((0.00136929308932000)*(py)*(x417)))+(((-0.00144915414540000)*(py)*(sj1)))+(((0.00806026000000000)*(pp)*(py)))+(((0.0472170030800000)*(cj1)*(py)*(pz)*(sj1)))+(((-0.0806026000000000)*(pp)*(py)*(sj1)))))):(IKReal)1.0e30))*(((1.82580929612250e-5)+(((cj0)*(((((-0.000117800699900000)*(px)))+(((-0.00806026000000000)*(pp)*(px)))+(((0.00467495080000000)*(cj1)*(px)*(pz)))+(((-0.00136929308932000)*(px)*(x417)))+(((-0.0472170030800000)*(cj1)*(px)*(pz)*(sj1)))+(((0.0806026000000000)*(pp)*(px)*(sj1)))+(((0.00144915414540000)*(px)*(sj1)))))))+(((-1.00000000000000)*(x422)))+(((-0.0806026000000000)*(cj1)*(pp)*(pz)))+(((-0.00131358057220000)*(cj1)*(pz)))+(((-3.80938365938000e-5)*(sj1)))+((((cj0)*(cj0))*(((((0.0236085015400000)*(x417)*(x419)))+(((-0.00467495080000000)*(sj1)*(x419)))+(((-1.00000000000000)*(x420)))+(((-1.00000000000000)*(x421)))+(x422)+(((0.000233747540000000)*(x419)))))))+(((0.00203104655000000)*(pp)))+(x421)+(x420)+(((0.0236085015400000)*((cj1)*(cj1))*((pz)*(pz))))+(((0.0694850000000000)*((pp)*(pp))))+(((1.98547497951400e-5)*(x417)))+(((0.00136929308932000)*(cj1)*(pz)*(sj1)))+(((-0.00233747540000000)*(pp)*(sj1)))))), cj0);
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
bool valid = true;
for( int kj0 = 0; kj0 < numsolutions; ++kj0)
{
    if( IKabs(cj0array[kj0]-cj0array[numsolutions]) < 0.0001 && IKabs(sj0array[kj0]-sj0array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IKReal x423=x358;
j0evalpoly[0]=((((0.00136929308932000)*(py)*(x423)))+(((-0.00467495080000000)*(cj1)*(py)*(pz)))+(((0.000117800699900000)*(py)))+(((-0.00144915414540000)*(py)*(sj1)))+(((0.00806026000000000)*(pp)*(py)))+(((cj0)*(((((-0.0472170030800000)*(px)*(py)*(x423)))+(((0.00934990160000000)*(px)*(py)*(sj1)))+(((-0.000467495080000000)*(px)*(py)))))))+(((0.0472170030800000)*(cj1)*(py)*(pz)*(sj1)))+(((-0.0806026000000000)*(pp)*(py)*(sj1))));
if( IKabs(j0evalpoly[0]) < 0.0000001000000000  )
{
    continue;
}
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-1.19863999424336)+(((-7.19579765416997)*(pp)))+(((0.417356263941858)*(py)*(sj0)))+(((0.417356263941858)*(cj0)*(px)))+(((0.230380657695906)*(sj1)))+(((-7.94416061020364)*(cj0)*(px)*(sj1)))+(((7.94416061020364)*(cj1)*(pz)))+(((-7.94416061020364)*(py)*(sj0)*(sj1)))), ((0.829092361784856)+(((-3.77059797078506)*(cj0)*(px)))+(((37.2886234439088)*(py)*(sj0)*(sj1)))+(((65.0103098411218)*(pp)))+(((-3.77059797078506)*(py)*(sj0)))+(((-1.08137007987335)*(sj1)))+(((-37.2886234439088)*(cj1)*(pz)))+(((37.2886234439088)*(cj0)*(px)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[2];
IKReal x424=((9.03448275862069)*(cj3));
IKReal x425=((1.00000000000000)+(x424));
IKReal x426=((x425)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x426;
dummyeval[1]=x426;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((1.00000000000000)+(((9.03448275862069)*(cj3)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((((-1.00000000000000)*(px)*(sj0)))+(((px)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(py)*(sj3)))+(((-9.03448275862069)*(cj3)*(px)*(sj0)))+(((cj0)*(py)))+(((9.03448275862069)*(cj0)*(cj3)*(py))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((1.00000000000000)+(((9.03448275862069)*(cj3)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((((34.4827586206897)*(cj0)*(cj1)*(px)*(sj3)))+(cj1)+(((-1.00000000000000)*(cj1)*(sj3)))+(((9.03448275862069)*(cj1)*(cj3)))+(((-311.533888228300)*(cj0)*(cj1)*(cj3)*(px)))+(((-311.533888228300)*(cj3)*(pz)*(sj1)))+(((34.4827586206897)*(pz)*(sj1)*(sj3)))+(((-34.4827586206897)*(cj0)*(cj1)*(px)))+(((-34.4827586206897)*(pz)*(sj1)))+(((-34.4827586206897)*(cj1)*(py)*(sj0)))+(((34.4827586206897)*(cj1)*(py)*(sj0)*(sj3)))+(((-311.533888228300)*(cj1)*(cj3)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.303863000000000)+(((0.0580000000000000)*(py)*(sj0)))+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[3]=((0.552000000000000)+(((-0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[4]=((((0.0290000000000000)*(cj1)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x427=x367;
IKReal x428=(cj0)*(cj0);
IKReal x429=x361;
IKReal x430=x360;
IKReal x431=(sj0)*(sj0);
IKReal x432=x368;
IKReal x433=x358;
dummyeval[0]=((((-1189.06064209275)*(x430)*(x431)))+(((-2378.12128418549)*(cj0)*(px)*(py)*(sj0)*(x427)))+(((-2378.12128418549)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((-1.00000000000000)*(x427)))+(((68.9655172413793)*(cj0)*(px)*(x427)))+(((-1189.06064209275)*(x432)*(x433)))+(((2378.12128418549)*(cj0)*(px)*(py)*(sj0)))+(((68.9655172413793)*(py)*(sj0)*(x427)))+(((-1189.06064209275)*(x427)*(x428)*(x430)))+(((-1189.06064209275)*(x427)*(x429)*(x431)))+(((68.9655172413793)*(cj1)*(pz)*(sj1)))+(((-1189.06064209275)*(x428)*(x429)))+(((-2378.12128418549)*(cj0)*(cj1)*(px)*(pz)*(sj1))));
dummyeval[1]=((((34.4827586206897)*(cj0)*(px)*(py)*(sj0)*(x427)))+(((17.2413793103448)*(x432)*(x433)))+(((0.0145000000000000)*(x427)))+(((34.4827586206897)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((-34.4827586206897)*(cj0)*(px)*(py)*(sj0)))+(((17.2413793103448)*(x430)*(x431)))+(((-1.00000000000000)*(cj1)*(pz)*(sj1)))+(((34.4827586206897)*(cj0)*(cj1)*(px)*(pz)*(sj1)))+(((17.2413793103448)*(x428)*(x429)))+(((-1.00000000000000)*(cj0)*(px)*(x427)))+(((17.2413793103448)*(x427)*(x429)*(x431)))+(((-1.00000000000000)*(py)*(sj0)*(x427)))+(((17.2413793103448)*(x427)*(x428)*(x430))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x434=x367;
IKReal x435=(cj0)*(cj0);
IKReal x436=x360;
IKReal x437=x361;
IKReal x438=(sj0)*(sj0);
IKReal x439=((0.116000000000000)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x440=x368;
IKReal x441=x358;
IKReal x442=((0.0580000000000000)*(x440)*(x441));
IKReal x443=((0.0580000000000000)*(x435)*(x437));
IKReal x444=((4.87780000000000e-5)*(x434));
IKReal x445=((0.0580000000000000)*(x436)*(x438));
IKReal x446=((0.0580000000000000)*(x434)*(x435)*(x436));
IKReal x447=((0.116000000000000)*(cj0)*(px)*(py)*(sj0)*(x434));
IKReal x448=((0.0580000000000000)*(x434)*(x437)*(x438));
IKReal x449=((0.116000000000000)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x450=((x439)+(x449)+(x448)+(x445)+(x444)+(x447)+(x446)+(x443)+(x442));
IKReal x451=((0.116000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x452=((0.00336400000000000)*(cj0)*(px)*(x434));
IKReal x453=((0.00336400000000000)*(py)*(sj0)*(x434));
IKReal x454=((0.00336400000000000)*(cj1)*(pz)*(sj1));
IKReal x455=((x454)+(x452)+(x453)+(x451));
IKReal x456=((0.580000000000000)*(cj1)*(pz));
IKReal x457=((0.0168200000000000)*(sj1));
IKReal x458=((0.0580000000000000)*(py)*(sj0));
IKReal x459=((0.0580000000000000)*(cj0)*(px));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x450)))+(x455))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x450)))+(x455)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))*(((0.0162970000000000)+(((-1.00000000000000)*(x458)))+(((-1.00000000000000)*(x457)))+(((-1.00000000000000)*(x456)))+(((-1.00000000000000)*(x459)))+(((0.580000000000000)*(py)*(sj0)*(sj1)))+(pp)+(((0.580000000000000)*(cj0)*(px)*(sj1)))))), ((((IKabs(((((-1.00000000000000)*(x455)))+(x450))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x455)))+(x450)))):(IKReal)1.0e30))*(((((cj1)*(py)*(sj0)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0290000000000000)*(cj1)))))*(((0.0162970000000000)+(((-1.00000000000000)*(x458)))+(((-1.00000000000000)*(x457)))+(((-1.00000000000000)*(x456)))+(((-1.00000000000000)*(x459)))+(((0.580000000000000)*(py)*(sj0)*(sj1)))+(pp)+(((0.580000000000000)*(cj0)*(px)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((-5.70002016338060e-5)+(((0.0580000000000000)*(py)*(sj0)))+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.0279999995866351)+(((-0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((((-1521596359.18293)*(px)*(sj0)))+(((1521596359.18293)*(cj0)*(py)))), ((((1521596359.18293)*(cj1)*(py)*(sj0)))+(((1521596359.18293)*(pz)*(sj1)))+(((-44126294.4163049)*(cj1)))+(((1521596359.18293)*(cj0)*(cj1)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x460=((0.262000000000000)*(cj3));
IKReal x461=((0.0290000000000000)+(x460));
IKReal x462=((0.0290000000000000)*(sj3));
IKReal x463=((((-1.00000000000000)*(x462)))+(x461));
IKReal x464=((px)*(sj0));
IKReal x465=((cj0)*(py));
j2array[0]=IKatan2(((((IKabs(x463) != 0)?((IKReal)1/(x463)):(IKReal)1.0e30))*(((((-1.00000000000000)*(x464)))+(x465)))), ((((IKabs(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((0.00759800000000000)*(cj1)*(cj3)))+(((-1.00000000000000)*(pz)*(sj1)*(x460)))+(((-0.000841000000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((1.00000000000000)*(pz)*(sj1)*(x462)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x462)))+(((0.000841000000000000)*(cj1)))+(((1.00000000000000)*(cj1)*(py)*(sj0)*(x462)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)*(x460)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x460))))) != 0)?((IKReal)1/(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((0.00759800000000000)*(cj1)*(cj3)))+(((-1.00000000000000)*(pz)*(sj1)*(x460)))+(((-0.000841000000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((1.00000000000000)*(pz)*(sj1)*(x462)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x462)))+(((0.000841000000000000)*(cj1)))+(((1.00000000000000)*(cj1)*(py)*(sj0)*(x462)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)*(x460)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x460)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*((x463)*(x463))))+((((((-1.00000000000000)*(x465)))+(x464)))*(((((-1.00000000000000)*(x465)))+(x464))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x466=((px)*(sj0));
IKReal x467=((cj0)*(py));
j2array[0]=IKatan2(((((IKabs(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x466)))+(x467)))), ((((IKabs(((((-0.262000000000000)*(cj3)*(x466)))+(((0.0290000000000000)*(x467)))+(((-0.0290000000000000)*(sj3)*(x467)))+(((-0.0290000000000000)*(x466)))+(((0.0290000000000000)*(sj3)*(x466)))+(((0.262000000000000)*(cj3)*(x467))))) != 0)?((IKReal)1/(((((-0.262000000000000)*(cj3)*(x466)))+(((0.0290000000000000)*(x467)))+(((-0.0290000000000000)*(sj3)*(x467)))+(((-0.0290000000000000)*(x466)))+(((0.0290000000000000)*(sj3)*(x466)))+(((0.262000000000000)*(cj3)*(x467)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x467)))+(x466)))*(((((0.0290000000000000)*(cj1)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x468=((0.262000000000000)*(cj3));
IKReal x469=((0.0290000000000000)+(x468));
IKReal x470=((0.0290000000000000)*(sj3));
IKReal x471=((((-1.00000000000000)*(x470)))+(x469));
IKReal x472=((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x472)*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((x472)*(((((cj1)*(py)*(sj0)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0290000000000000)*(cj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x50=((cj0)*(cj2));
IKReal x51=((cj1)*(sj0)*(sj2));
IKReal x52=((x50)+(((-1.00000000000000)*(x51))));
IKReal x53=((cj2)*(sj0));
IKReal x54=((cj0)*(cj1)*(sj2));
IKReal x55=((x54)+(x53));
IKReal x56=((-1.00000000000000)*(x55));
IKReal x57=((cj1)*(cj2)*(sj3));
IKReal x58=((cj3)*(sj1));
IKReal x59=((x58)+(x57));
IKReal x60=((-1.00000000000000)*(x59));
IKReal x61=((sj0)*(x60));
IKReal x62=((cj1)*(cj3));
IKReal x63=((cj2)*(sj1)*(sj3));
IKReal x64=((x62)+(((-1.00000000000000)*(x63))));
IKReal x65=((cj0)*(x60));
IKReal x66=((sj0)*(sj2)*(sj3));
IKReal x67=((x65)+(x66));
IKReal x68=((-1.00000000000000)*(cj0)*(sj2)*(sj3));
IKReal x69=((x61)+(x68));
IKReal x70=((cj2)*(x62));
IKReal x71=((sj1)*(sj3));
IKReal x72=((((-1.00000000000000)*(x71)))+(x70));
IKReal x73=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IKReal x74=((cj0)*(x72));
IKReal x75=((x74)+(x73));
IKReal x76=((cj0)*(cj3)*(sj2));
IKReal x77=((sj0)*(x72));
IKReal x78=((x77)+(x76));
IKReal x79=((cj1)*(sj3));
IKReal x80=((cj2)*(x58));
IKReal x81=((x79)+(x80));
new_r00=((((r10)*(x52)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x56))));
new_r01=((((r11)*(x52)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x56))));
new_r02=((((r02)*(x56)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r12)*(x52))));
new_r10=((((r10)*(x69)))+(((r20)*(x64)))+(((r00)*(x67))));
new_r11=((((r11)*(((((-1.00000000000000)*(cj0)*(sj2)*(sj3)))+(x61)))))+(((r01)*(x67)))+(((r21)*(x64))));
new_r12=((((r22)*(x64)))+(((r02)*(x67)))+(((r12)*(x69))));
new_r20=((((r10)*(x78)))+(((r20)*(x81)))+(((r00)*(x75))));
new_r21=((((r21)*(x81)))+(((r11)*(x78)))+(((r01)*(x75))));
new_r22=((((r02)*(x75)))+(((r22)*(x81)))+(((r12)*(x78))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
sj5array[0]=new_r22;
if( sj5array[0] >= -1.0001 && sj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r00)*(new_r02)))+(((cj5)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r01)*(new_r02)))+(((cj5)*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x82=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x82));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x82))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x83=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x83;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x83;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x84=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x84));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x84))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x85=((cj5)*(new_r01)*(new_r02));
IKReal x86=((cj5)*(new_r11)*(new_r12));
IKReal x87=((x86)+(x85));
IKReal x88=((IKabs(x87) != 0)?((IKReal)1/(x87)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r21)*(sj5)*(x88)), ((new_r02)*(new_r21)*(sj5)*(x88)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x89=((cj4)*(new_r12));
IKReal x90=((new_r02)*(sj4));
IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
IKReal x92=((new_r12)*(sj4));
IKReal x93=((cj4)*(new_r02));
IKReal x94=((x93)+(x92));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x91;
evalcond[5]=x91;
evalcond[6]=x94;
evalcond[7]=x94;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x95=((cj4)*(new_r12));
IKReal x96=((new_r02)*(sj4));
IKReal x97=((x95)+(((-1.00000000000000)*(x96))));
IKReal x98=((new_r12)*(sj4));
IKReal x99=((cj4)*(new_r02));
IKReal x100=((x99)+(x98));
IKReal x101=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x101;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x97;
evalcond[5]=x97;
evalcond[6]=x100;
evalcond[7]=((-1.00000000000000)*(x100));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x101;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x102=((cj4)*(new_r12));
IKReal x103=((new_r02)*(sj4));
IKReal x104=((((-1.00000000000000)*(x103)))+(x102));
IKReal x105=((cj4)*(new_r00));
IKReal x106=((new_r10)*(sj4));
IKReal x107=((x105)+(x106));
IKReal x108=((cj4)*(new_r01));
IKReal x109=((new_r11)*(sj4));
IKReal x110=((x108)+(x109));
IKReal x111=((new_r12)*(sj4));
IKReal x112=((cj4)*(new_r02));
IKReal x113=((1.00000000000000)+(x112)+(x111));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x104;
evalcond[3]=x104;
evalcond[4]=x113;
evalcond[5]=x110;
evalcond[6]=x107;
evalcond[7]=new_r22;
evalcond[8]=x107;
evalcond[9]=x110;
evalcond[10]=x113;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x114=((cj4)*(new_r12));
IKReal x115=((new_r02)*(sj4));
IKReal x116=((((-1.00000000000000)*(x115)))+(x114));
IKReal x117=((cj4)*(new_r00));
IKReal x118=((new_r10)*(sj4));
IKReal x119=((x117)+(x118));
IKReal x120=((cj4)*(new_r01));
IKReal x121=((new_r11)*(sj4));
IKReal x122=((x120)+(x121));
IKReal x123=((new_r12)*(sj4));
IKReal x124=((cj4)*(new_r02));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x116;
evalcond[3]=x116;
evalcond[4]=((-1.00000000000000)+(x124)+(x123));
evalcond[5]=x122;
evalcond[6]=x119;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x119));
evalcond[9]=((-1.00000000000000)*(x122));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x124))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x125=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x125)), ((new_r20)*(x125)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x126=((cj5)*(new_r00)*(new_r02));
IKReal x127=((cj5)*(new_r10)*(new_r12));
IKReal x128=((x126)+(x127));
IKReal x129=((IKabs(x128) != 0)?((IKReal)1/(x128)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r20)*(sj5)*(x129)), ((new_r02)*(new_r20)*(sj5)*(x129)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x130=((cj4)*(new_r12));
IKReal x131=((new_r02)*(sj4));
IKReal x132=((x130)+(((-1.00000000000000)*(x131))));
IKReal x133=((new_r12)*(sj4));
IKReal x134=((cj4)*(new_r02));
IKReal x135=((x134)+(x133));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x132;
evalcond[5]=x132;
evalcond[6]=x135;
evalcond[7]=x135;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x136=((cj4)*(new_r12));
IKReal x137=((new_r02)*(sj4));
IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
IKReal x139=((new_r12)*(sj4));
IKReal x140=((cj4)*(new_r02));
IKReal x141=((x140)+(x139));
IKReal x142=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x142;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x138;
evalcond[5]=x138;
evalcond[6]=x141;
evalcond[7]=((-1.00000000000000)*(x141));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x142;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x143=((cj4)*(new_r12));
IKReal x144=((new_r02)*(sj4));
IKReal x145=((((-1.00000000000000)*(x144)))+(x143));
IKReal x146=((cj4)*(new_r00));
IKReal x147=((new_r10)*(sj4));
IKReal x148=((x146)+(x147));
IKReal x149=((cj4)*(new_r01));
IKReal x150=((new_r11)*(sj4));
IKReal x151=((x150)+(x149));
IKReal x152=((new_r12)*(sj4));
IKReal x153=((cj4)*(new_r02));
IKReal x154=((1.00000000000000)+(x153)+(x152));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x145;
evalcond[3]=x145;
evalcond[4]=x154;
evalcond[5]=x151;
evalcond[6]=x148;
evalcond[7]=new_r22;
evalcond[8]=x148;
evalcond[9]=x151;
evalcond[10]=x154;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x155=((cj4)*(new_r12));
IKReal x156=((new_r02)*(sj4));
IKReal x157=((((-1.00000000000000)*(x156)))+(x155));
IKReal x158=((cj4)*(new_r00));
IKReal x159=((new_r10)*(sj4));
IKReal x160=((x159)+(x158));
IKReal x161=((cj4)*(new_r01));
IKReal x162=((new_r11)*(sj4));
IKReal x163=((x162)+(x161));
IKReal x164=((new_r12)*(sj4));
IKReal x165=((cj4)*(new_r02));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x157;
evalcond[3]=x157;
evalcond[4]=((-1.00000000000000)+(x164)+(x165));
evalcond[5]=x163;
evalcond[6]=x160;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x160));
evalcond[9]=((-1.00000000000000)*(x163));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x166=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x166)), ((new_r20)*(x166)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x167=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x167)), ((new_r20)*(x167)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x168=(new_r12)*(new_r12);
IKReal x169=(new_r02)*(new_r02);
IKReal x170=((x168)+(x169));
IKReal x171=((-1.00000000000000)*(x170));
IKReal x172=((IKabs(x171) != 0)?((IKReal)1/(x171)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj5)*(new_r12)*(x172)), ((cj5)*(new_r02)*(x172)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x173=((new_r11)*(new_r12));
IKReal x174=((new_r01)*(new_r02));
IKReal x175=((x173)+(x174));
IKReal x176=((-1.00000000000000)*(x175));
IKReal x177=((IKabs(x176) != 0)?((IKReal)1/(x176)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(sj6)*(x177)), ((new_r02)*(sj5)*(sj6)*(x177)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x178=((new_r02)*(new_r10));
IKReal x179=((new_r00)*(new_r12));
IKReal x180=((((-1.00000000000000)*(x179)))+(x178));
IKReal x181=((IKabs(x180) != 0)?((IKReal)1/(x180)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x181)), ((new_r02)*(sj6)*(x181)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "e8fa20a92720bfa1527d37f468223e9d"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
