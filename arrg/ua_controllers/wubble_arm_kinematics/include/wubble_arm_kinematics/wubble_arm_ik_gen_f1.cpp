/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 37 generated on 2011-03-02 21:49:09.908550
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKsin(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=((x2)*(x3));
x5=IKcos(j[1]);
x6=IKcos(j[2]);
x7=((x0)*(x5)*(x6));
x8=IKcos(j[3]);
x9=IKsin(j[1]);
x10=IKcos(j[5]);
x11=IKsin(j[4]);
x12=((x4)+(((-1.00000000000000)*(x7))));
x13=((x1)*(x12));
x14=((x0)*(x8)*(x9));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=((x11)*(x15));
x17=IKcos(j[4]);
x18=((x2)*(x6));
x19=((x0)*(x3)*(x5));
x20=((x19)+(x18));
x21=((-1.00000000000000)*(x20));
x22=((x17)*(x21));
x23=((x16)+(x22));
x24=IKsin(j[5]);
x25=((x0)*(x1)*(x9));
x26=((x7)+(((-1.00000000000000)*(x4))));
x27=((x26)*(x8));
x28=IKsin(j[6]);
x29=IKcos(j[6]);
x30=((x10)*(x23));
x31=((((-1.00000000000000)*(x27)))+(x25));
x32=((x24)*(x31));
x33=((x32)+(x30));
x34=((-1.00000000000000)*(x33));
x35=((0.0290000000000000)*(x7));
x36=((0.0290000000000000)*(x4));
x37=((x5)*(x8));
x38=((x1)*(x6)*(x9));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x1)*(x5));
x41=((x6)*(x8)*(x9));
x42=((x40)+(x41));
x43=((x11)*(x39));
x44=((x17)*(x3)*(x9));
x45=((((-1.00000000000000)*(x44)))+(x43));
x46=((-1.00000000000000)*(x42));
x47=((x0)*(x3));
x48=((x18)*(x5));
x49=((x48)+(x47));
x50=((x1)*(x2)*(x9));
x51=((x49)*(x8));
x52=((x50)+(((-1.00000000000000)*(x51))));
x53=((-1.00000000000000)*(x49));
x54=((x1)*(x53));
x55=((x2)*(x8)*(x9));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x11)*(x56));
x58=((x0)*(x6));
x59=((x4)*(x5));
x60=((x58)+(((-1.00000000000000)*(x59))));
x61=((x17)*(x60));
x62=((x57)+(x61));
x63=((x59)+(((-1.00000000000000)*(x58))));
x64=((x11)*(x63));
x65=((x17)*(x56));
x66=((x64)+(x65));
x67=((x24)*(x52));
x68=((x10)*(x62));
x69=((x67)+(x68));
x70=((0.0290000000000000)*(x47));
x71=((0.0290000000000000)*(x48));
eerot[0]=((((x23)*(x24)))+(((x10)*(((((-1.00000000000000)*(x25)))+(x27))))));
eerot[1]=((((x28)*(x34)))+(((x29)*(((((x11)*(x20)))+(((x15)*(x17))))))));
eerot[2]=((((x29)*(x34)))+(((x28)*(((((-1.00000000000000)*(x11)*(x20)))+(((-1.00000000000000)*(x15)*(x17))))))));
eetrans[0]=((0.0290000000000000)+(((x1)*(((((-1.00000000000000)*(x35)))+(x36)))))+(((x10)*(((((0.146500000000000)*(x27)))+(((-0.146500000000000)*(x25)))))))+(((-1.00000000000000)*(x36)))+(((-0.239400000000000)*(x0)*(x9)))+(x35)+(((x24)*(((((0.146500000000000)*(x16)))+(((0.146500000000000)*(x22)))))))+(((0.0690000000000000)*(x0)))+(((-0.0290000000000000)*(x2)))+(((x8)*(((((0.153000000000000)*(x7)))+(((-0.153000000000000)*(x4)))))))+(((-0.153000000000000)*(x25)))+(((-0.0290000000000000)*(x14))));
eerot[3]=((((x10)*(x42)))+(((x24)*(x45))));
eerot[4]=((((-1.00000000000000)*(x28)*(((((x10)*(((((-1.00000000000000)*(x44)))+(x43)))))+(((x24)*(x46)))))))+(((x29)*(((((x17)*(x39)))+(((x11)*(x3)*(x9))))))));
eerot[5]=((((x28)*(((((-1.00000000000000)*(x11)*(x3)*(x9)))+(((-1.00000000000000)*(x17)*(x39)))))))+(((x29)*(((((-1.00000000000000)*(x10)*(x45)))+(((-1.00000000000000)*(x24)*(x46))))))));
eetrans[1]=((0.0580000000000000)+(((0.0290000000000000)*(x37)))+(((x24)*(((((-0.146500000000000)*(x44)))+(((0.146500000000000)*(x43)))))))+(((x10)*(((((0.146500000000000)*(x41)))+(((0.146500000000000)*(x40)))))))+(((0.0290000000000000)*(x6)*(x9)))+(((0.153000000000000)*(x40)))+(((0.153000000000000)*(x41)))+(((0.239400000000000)*(x5)))+(((-0.0290000000000000)*(x38))));
eerot[6]=((((-1.00000000000000)*(x24)*(x62)))+(((x10)*(x52))));
eerot[7]=((((-1.00000000000000)*(x29)*(x66)))+(((x28)*(x69))));
eerot[8]=((((x29)*(x69)))+(((x28)*(x66))));
eetrans[2]=((((x10)*(((((0.146500000000000)*(x50)))+(((-0.146500000000000)*(x51)))))))+(((-0.0690000000000000)*(x2)))+(((-1.00000000000000)*(x71)))+(((-1.00000000000000)*(x70)))+(((0.239400000000000)*(x2)*(x9)))+(((x24)*(((((-0.146500000000000)*(x57)))+(((-0.146500000000000)*(x61)))))))+(((-0.0290000000000000)*(x0)))+(((x8)*(((((-0.153000000000000)*(x47)))+(((-0.153000000000000)*(x48)))))))+(((0.0290000000000000)*(x55)))+(((0.153000000000000)*(x50)))+(((x1)*(((x71)+(x70))))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0, htj0,
j2, cj2, sj2, htj2,
j3, cj3, sj3, htj3,
j4, cj4, sj4, htj4,
j5, cj5, sj5, htj5,
j6, cj6, sj6, htj6,
j1, cj1, sj1, htj1,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((-0.0290000000000000)+(px)+(((-0.146500000000000)*(r00))));
new_r10=r22;
new_r11=((-1.00000000000000)*(r21));
new_r12=((-1.00000000000000)*(r20));
new_py=((((0.146500000000000)*(r20)))+(((-1.00000000000000)*(pz))));
new_r20=((-1.00000000000000)*(r12));
new_r21=r11;
new_r22=r10;
new_pz=((-0.0580000000000000)+(py)+(((-0.146500000000000)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(py)*(py)*(py)*(py);
IKReal x1=(px)*(px)*(px)*(px);
IKReal x2=(sj1)*(sj1)*(sj1)*(sj1);
IKReal x3=(px)*(px);
IKReal x4=(py)*(py);
IKReal x5=(sj1)*(sj1);
IKReal x6=(sj1)*(sj1)*(sj1);
dummyeval[0]=((((107.761447443274)*(x2)*(x3)*(x4)))+(((-61.2197900770126)*(sj1)*(x0)*(x5)))+(((53.8807237216371)*(x1)*(x2)))+(((53.8807237216371)*(x0)*(x2)))+(((-122.439580154025)*(sj1)*(x3)*(x4)*(x5)))+(((27.7253728758319)*(x0)*(x5)))+(((0.500000000000000)*(x0)))+(((0.500000000000000)*(x1)))+(((27.7253728758319)*(x1)*(x5)))+(((x3)*(x4)))+(((55.4507457516639)*(x3)*(x4)*(x5)))+(((-61.2197900770126)*(sj1)*(x1)*(x5)))+(((-5.89739378793288)*(sj1)*(x1)))+(((-5.89739378793288)*(sj1)*(x0)))+(((-11.7947875758658)*(sj1)*(x3)*(x4))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j3evalpoly[1];
IKReal x7=(px)*(px)*(px)*(px);
IKReal x8=(px)*(px);
IKReal x9=(py)*(py);
IKReal x10=(sj1)*(sj1)*(sj1)*(sj1);
IKReal x11=(sj1)*(sj1);
IKReal x12=(py)*(py)*(py)*(py);
IKReal x13=(sj1)*(sj1)*(sj1);
IKReal x14=(pp)*(pp);
IKReal x15=(px)*(px)*(px)*(px)*(px)*(px);
IKReal x16=(cj1)*(cj1);
IKReal x17=(pz)*(pz);
IKReal x18=(py)*(py)*(py)*(py)*(py)*(py);
IKReal x19=(cj1)*(cj1)*(cj1);
IKReal x20=(pz)*(pz)*(pz);
IKReal x21=(pp)*(pp)*(pp);
IKReal x22=(cj1)*(cj1)*(cj1)*(cj1);
IKReal x23=(pz)*(pz)*(pz)*(pz);
IKReal x24=(pp)*(pp)*(pp)*(pp);
op[0]=((((107.761447443274)*(x10)*(x12)))+(x7)+(((-122.439580154025)*(sj1)*(x11)*(x7)))+(((-244.879160308050)*(sj1)*(x11)*(x8)*(x9)))+(((55.4507457516639)*(x11)*(x7)))+(((2.00000000000000)*(x8)*(x9)))+(((-23.5895751517315)*(sj1)*(x8)*(x9)))+(x12)+(((-11.7947875758658)*(sj1)*(x7)))+(((-11.7947875758658)*(sj1)*(x12)))+(((-122.439580154025)*(sj1)*(x11)*(x12)))+(((215.522894886549)*(x10)*(x8)*(x9)))+(((55.4507457516639)*(x11)*(x12)))+(((107.761447443274)*(x10)*(x7)))+(((110.901491503328)*(x11)*(x8)*(x9))));
op[1]=((((-170.290896164674)*(sj1)*(x11)*(x7)))+(((74.9706951551607)*(x11)*(x7)))+(((-14.8809442271354)*(sj1)*(x12)))+(((58.9185747358270)*(pp)*(sj1)*(x8)*(x9)))+(((29.4592873679135)*(pp)*(sj1)*(x12)))+(((1293.82371451895)*(pp)*(sj1)*(x11)*(x7)))+(((51.3298623098525)*(cj1)*(pz)*(sj1)*(x7)))+(((-1739.13723289341)*(pp)*(x10)*(x12)))+(((-321.653549589034)*(pp)*(x11)*(x7)))+(((-170.290896164674)*(sj1)*(x11)*(x12)))+(((102.659724619705)*(cj1)*(pz)*(sj1)*(x8)*(x9)))+(((1.14517113402062)*(x7)))+(((1.14517113402062)*(x12)))+(((149.941390310321)*(x11)*(x8)*(x9)))+(((-1739.13723289341)*(pp)*(x10)*(x7)))+(((150.128169444462)*(x10)*(x12)))+(((-321.653549589034)*(pp)*(x11)*(x12)))+(((-195.177546359714)*(cj1)*(pz)*(x11)*(x12)))+(((2587.64742903791)*(pp)*(sj1)*(x11)*(x8)*(x9)))+(((29.4592873679135)*(pp)*(sj1)*(x7)))+(((480.001876278581)*(cj1)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((-195.177546359714)*(cj1)*(pz)*(x11)*(x7)))+(((300.256338888923)*(x10)*(x8)*(x9)))+(((-4.78350515463918)*(cj1)*(pz)*(x12)))+(((74.9706951551607)*(x11)*(x12)))+(((1293.82371451895)*(pp)*(sj1)*(x11)*(x12)))+(((-14.8809442271354)*(sj1)*(x7)))+(((240.000938139291)*(cj1)*(pz)*(sj1)*(x11)*(x12)))+(((-3478.27446578682)*(pp)*(x10)*(x8)*(x9)))+(((51.3298623098525)*(cj1)*(pz)*(sj1)*(x12)))+(((-340.581792329347)*(sj1)*(x11)*(x8)*(x9)))+(((240.000938139291)*(cj1)*(pz)*(sj1)*(x11)*(x7)))+(((150.128169444462)*(x10)*(x7)))+(((2.29034226804124)*(x8)*(x9)))+(((-29.7618884542707)*(sj1)*(x8)*(x9)))+(((-9.56701030927835)*(cj1)*(pz)*(x8)*(x9)))+(((-4.78350515463918)*(cj1)*(pz)*(x7)))+(((-390.355092719428)*(cj1)*(pz)*(x11)*(x8)*(x9)))+(((-643.307099178069)*(pp)*(x11)*(x8)*(x9))));
op[2]=((((-2172.59364386700)*(cj1)*(pp)*(pz)*(sj1)*(x8)*(x9)))+(((-62.8429960041410)*(sj1)*(x8)*(x9)))+(((-64.7168435848005)*(sj1)*(x11)*(x7)*(x8)))+(((-64.7168435848005)*(sj1)*(x11)*(x12)*(x9)))+(((-1086.29682193350)*(cj1)*(pp)*(pz)*(sj1)*(x12)))+(((7730.11725711220)*(cj1)*(pp)*(pz)*(x11)*(x12)))+(((281.533304091257)*(x10)*(x8)*(x9)))+(((7234.65510568591)*(pp)*(sj1)*(x11)*(x7)))+(((140.766652045629)*(x10)*(x7)))+(((-213.935142797231)*(sj1)*(x11)*(x12)))+(((-541.679472247150)*(sj1)*(x12)*(x16)*(x17)))+(((15460.2345142244)*(cj1)*(pp)*(pz)*(x11)*(x8)*(x9)))+(((88.1947071952386)*(x16)*(x17)*(x7)))+(((140.766652045629)*(x10)*(x12)))+(((709.912148386098)*(cj1)*(pz)*(sj1)*(x8)*(x9)))+(((2830.76704562842)*(x11)*(x14)*(x7)))+(((314.774136682689)*(x10)*(x12)*(x8)))+(((-15615.6297637932)*(pp)*(x10)*(x8)*(x9)))+(((-2360.35806996096)*(pp)*(x11)*(x7)))+(((-2061.12788289947)*(cj1)*(pz)*(x11)*(x8)*(x9)))+(((-7807.81488189660)*(pp)*(x10)*(x12)))+(((-1086.29682193350)*(cj1)*(pp)*(pz)*(sj1)*(x7)))+(((2830.76704562842)*(x11)*(x12)*(x14)))+(((-84.4552516101605)*(cj1)*(pz)*(x8)*(x9)))+(((-24173.4859089232)*(sj1)*(x11)*(x14)*(x7)))+(((314.774136682689)*(x10)*(x7)*(x9)))+(((-213.935142797231)*(sj1)*(x11)*(x7)))+(((-24173.4859089232)*(sj1)*(x11)*(x12)*(x14)))+(((3.12400763361037)*(x12)))+(((-427.870285594462)*(sj1)*(x11)*(x8)*(x9)))+(((-12481.8873327189)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x12)))+(((243.665429865947)*(x11)*(x8)*(x9)))+(((7234.65510568591)*(pp)*(sj1)*(x11)*(x12)))+(((1062.99884341433)*(cj1)*(pz)*(sj1)*(x11)*(x12)))+(((520.118918341759)*(pp)*(sj1)*(x8)*(x9)))+(((-194.150530754401)*(sj1)*(x11)*(x12)*(x8)))+(((260.059459170880)*(pp)*(sj1)*(x7)))+(((1062.99884341433)*(cj1)*(pz)*(sj1)*(x11)*(x7)))+(((121.832714932974)*(x11)*(x7)))+(((354.956074193049)*(cj1)*(pz)*(sj1)*(x7)))+(((34.5679582649092)*(x11)*(x12)*(x8)))+(((1512.65102746008)*(x11)*(x16)*(x17)*(x8)*(x9)))+(((-31.4214980020705)*(sj1)*(x12)))+(((-42.2276258050802)*(cj1)*(pz)*(x12)))+(((-1083.35894449430)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((11.5226527549697)*(x11)*(x12)*(x9)))+(((-1030.56394144974)*(cj1)*(pz)*(x11)*(x7)))+(((176.389414390477)*(x16)*(x17)*(x8)*(x9)))+(((-541.679472247150)*(sj1)*(x16)*(x17)*(x7)))+(((45224.2294663727)*(x10)*(x14)*(x7)))+(((756.325513730039)*(x11)*(x12)*(x16)*(x17)))+(((-48346.9718178463)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((2125.99768682865)*(cj1)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((-2360.35806996096)*(pp)*(x11)*(x12)))+(((-31.4214980020705)*(sj1)*(x7)))+(((34.5679582649092)*(x11)*(x7)*(x9)))+(((354.956074193049)*(cj1)*(pz)*(sj1)*(x12)))+(((88.1947071952386)*(x12)*(x16)*(x17)))+(((260.059459170880)*(pp)*(sj1)*(x12)))+(((-1030.56394144974)*(cj1)*(pz)*(x11)*(x12)))+(((-42.2276258050802)*(cj1)*(pz)*(x7)))+(((45224.2294663727)*(x10)*(x12)*(x14)))+(((-12481.8873327189)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x7)))+(((-24963.7746654377)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((7730.11725711220)*(cj1)*(pp)*(pz)*(x11)*(x7)))+(((6.24801526722075)*(x8)*(x9)))+(((104.924712227563)*(x10)*(x7)*(x8)))+(((5661.53409125685)*(x11)*(x14)*(x8)*(x9)))+(((90448.4589327454)*(x10)*(x14)*(x8)*(x9)))+(((11.5226527549697)*(x11)*(x7)*(x8)))+(((-194.150530754401)*(sj1)*(x11)*(x7)*(x9)))+(((3.12400763361037)*(x7)))+(((121.832714932974)*(x11)*(x12)))+(((-4720.71613992192)*(pp)*(x11)*(x8)*(x9)))+(((-7807.81488189660)*(pp)*(x10)*(x7)))+(((756.325513730039)*(x11)*(x16)*(x17)*(x7)))+(((14469.3102113718)*(pp)*(sj1)*(x11)*(x8)*(x9)))+(((104.924712227563)*(x10)*(x12)*(x9))));
op[3]=((((88.8400203546939)*(cj1)*(pz)*(x11)*(x12)*(x8)))+(((124.812920852288)*(x10)*(x8)*(x9)))+(((-34.4953932954612)*(sj1)*(x8)*(x9)))+(((1037.15411124545)*(pp)*(x10)*(x12)*(x9)))+(((-108.757608437329)*(sj1)*(x11)*(x12)))+(((88.8400203546939)*(cj1)*(pz)*(x11)*(x7)*(x9)))+(((1037.15411124545)*(pp)*(x10)*(x7)*(x8)))+(((360.868568323666)*(pp)*(sj1)*(x8)*(x9)))+(((-22179.7978240080)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x7)))+(((1906.77515268771)*(cj1)*(pz)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((-17.2476966477306)*(sj1)*(x7)))+(((5328.82776737525)*(pp)*(sj1)*(x11)*(x7)))+(((3259.62491804870)*(x11)*(x16)*(x17)*(x8)*(x9)))+(((537.128380082149)*(cj1)*(pz)*(sj1)*(x8)*(x9)))+(((3644.44792180373)*(pp)*(sj1)*(x16)*(x17)*(x7)))+(((-429.381802055614)*(cj1)*(pz)*(sj1)*(x11)*(x12)*(x8)))+(((62.4064604261441)*(x10)*(x7)))+(((150.943723171738)*(sj1)*(x11)*(x7)*(x9)))+(((54213.4940170733)*(pp)*(sj1)*(x11)*(x14)*(x7)))+(((-44687.9359047408)*(sj1)*(x11)*(x12)*(x14)))+(((-17.2476966477306)*(sj1)*(x12)))+(((3644.44792180373)*(pp)*(sj1)*(x12)*(x16)*(x17)))+(((-547.122581620304)*(pp)*(sj1)*(x11)*(x12)*(x8)))+(((-3489.92332991926)*(cj1)*(pp)*(pz)*(sj1)*(x8)*(x9)))+(((953.387576343857)*(cj1)*(pz)*(sj1)*(x12)*(x16)*(x17)))+(((180.434284161833)*(pp)*(sj1)*(x12)))+(((-308309.783366660)*(pp)*(x10)*(x12)*(x14)))+(((132.473269402244)*(x11)*(x8)*(x9)))+(((-29.2983437644808)*(cj1)*(pz)*(x7)))+(((127640.250313797)*(cj1)*(pz)*(sj1)*(x11)*(x14)*(x7)))+(((-182.374193873435)*(pp)*(sj1)*(x11)*(x7)*(x8)))+(((54213.4940170733)*(pp)*(sj1)*(x11)*(x12)*(x14)))+(((-429.381802055614)*(cj1)*(pz)*(sj1)*(x11)*(x7)*(x9)))+(((108426.988034147)*(pp)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((1629.81245902435)*(x11)*(x12)*(x16)*(x17)))+(((141.670655755128)*(x16)*(x17)*(x7)))+(((255280.500627595)*(cj1)*(pz)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((-1744.96166495963)*(cj1)*(pp)*(pz)*(sj1)*(x12)))+(((-1005.45390868975)*(sj1)*(x16)*(x17)*(x7)))+(((268.564190041074)*(cj1)*(pz)*(sj1)*(x12)))+(((-268.591883161562)*(x10)*(x7)*(x9)))+(((-217.515216874657)*(sj1)*(x11)*(x8)*(x9)))+(((1.60103708116739)*(x12)))+(((-1744.96166495963)*(cj1)*(pp)*(pz)*(sj1)*(x7)))+(((66.2366347011222)*(x11)*(x12)))+(((-1558.22515759245)*(cj1)*(pz)*(x11)*(x8)*(x9)))+(((79843.0092632467)*(x10)*(x14)*(x7)))+(((-268.591883161562)*(x10)*(x12)*(x8)))+(((3.20207416233479)*(x8)*(x9)))+(((-44687.9359047408)*(sj1)*(x11)*(x14)*(x7)))+(((-616619.566733320)*(pp)*(x10)*(x14)*(x8)*(x9)))+(((-7.08943362430458)*(x11)*(x12)*(x9)))+(((127640.250313797)*(cj1)*(pz)*(sj1)*(x11)*(x12)*(x14)))+(((50.3145743905794)*(sj1)*(x11)*(x12)*(x9)))+(((13083.7889773975)*(cj1)*(pp)*(pz)*(x11)*(x12)))+(((-182.374193873435)*(pp)*(sj1)*(x11)*(x12)*(x9)))+(((-197.257944521203)*(cj1)*(pz)*(x16)*(x17)*(x7)))+(((150.943723171738)*(sj1)*(x11)*(x12)*(x8)))+(((3111.46233373634)*(pp)*(x10)*(x12)*(x8)))+(((-108.757608437329)*(sj1)*(x11)*(x7)))+(((11379.1314268582)*(x11)*(x14)*(x8)*(x9)))+(((-89.5306277205206)*(x10)*(x12)*(x9)))+(((10657.6555347505)*(pp)*(sj1)*(x11)*(x8)*(x9)))+(((66.2366347011222)*(x11)*(x7)))+(((159686.018526493)*(x10)*(x14)*(x8)*(x9)))+(((29.6133401182313)*(cj1)*(pz)*(x11)*(x12)*(x9)))+(((-779.112578796226)*(cj1)*(pz)*(x11)*(x12)))+(((-394.515889042406)*(cj1)*(pz)*(x16)*(x17)*(x8)*(x9)))+(((-143.127267351871)*(cj1)*(pz)*(sj1)*(x11)*(x7)*(x8)))+(((5689.56571342908)*(x11)*(x12)*(x14)))+(((746.213856259577)*(cj1)*(pz)*(sj1)*(x11)*(x7)))+(((13083.7889773975)*(cj1)*(pp)*(pz)*(x11)*(x7)))+(((-308309.783366660)*(pp)*(x10)*(x14)*(x7)))+(((26167.5779547951)*(cj1)*(pp)*(pz)*(x11)*(x8)*(x9)))+(((-89375.8718094816)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((3111.46233373634)*(pp)*(x10)*(x7)*(x9)))+(((50.3145743905794)*(sj1)*(x11)*(x7)*(x8)))+(((29.6133401182313)*(cj1)*(pz)*(x11)*(x7)*(x8)))+(((-21.2683008729137)*(x11)*(x7)*(x9)))+(((-143.127267351871)*(cj1)*(pz)*(sj1)*(x11)*(x12)*(x9)))+(((-2010.90781737950)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((-779.112578796226)*(cj1)*(pz)*(x11)*(x7)))+(((1629.81245902435)*(x11)*(x16)*(x17)*(x7)))+(((79843.0092632467)*(x10)*(x12)*(x14)))+(((-1757.32947182576)*(pp)*(x11)*(x12)))+(((-3514.65894365152)*(pp)*(x11)*(x8)*(x9)))+(((-18651.5086545495)*(pp)*(x11)*(x16)*(x17)*(x7)))+(((5328.82776737525)*(pp)*(sj1)*(x11)*(x12)))+(((-89.5306277205206)*(x10)*(x7)*(x8)))+(((953.387576343857)*(cj1)*(pz)*(sj1)*(x16)*(x17)*(x7)))+(((268.564190041074)*(cj1)*(pz)*(sj1)*(x7)))+(((7288.89584360747)*(pp)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((1.60103708116739)*(x7)))+(((-18651.5086545495)*(pp)*(x11)*(x12)*(x16)*(x17)))+(((62.4064604261441)*(x10)*(x12)))+(((-58.5966875289616)*(cj1)*(pz)*(x8)*(x9)))+(((1492.42771251915)*(cj1)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((-21.2683008729137)*(x11)*(x12)*(x8)))+(((-7.08943362430458)*(x11)*(x7)*(x8)))+(((746.213856259577)*(cj1)*(pz)*(sj1)*(x11)*(x12)))+(((180.434284161833)*(pp)*(sj1)*(x7)))+(((-1757.32947182576)*(pp)*(x11)*(x7)))+(((-1005.45390868975)*(sj1)*(x12)*(x16)*(x17)))+(((-547.122581620304)*(pp)*(sj1)*(x11)*(x7)*(x9)))+(((-5317.81615676917)*(pp)*(x10)*(x7)))+(((-23765.9386525860)*(cj1)*(pz)*(x11)*(x12)*(x14)))+(((-5317.81615676917)*(pp)*(x10)*(x12)))+(((-29.2983437644808)*(cj1)*(pz)*(x12)))+(((-37303.0173090990)*(pp)*(x11)*(x16)*(x17)*(x8)*(x9)))+(((-10635.6323135383)*(pp)*(x10)*(x8)*(x9)))+(((-47531.8773051720)*(cj1)*(pz)*(x11)*(x14)*(x8)*(x9)))+(((5689.56571342908)*(x11)*(x14)*(x7)))+(((141.670655755128)*(x12)*(x16)*(x17)))+(((-44359.5956480159)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((283.341311510256)*(x16)*(x17)*(x8)*(x9)))+(((-197.257944521203)*(cj1)*(pz)*(x12)*(x16)*(x17)))+(((-23765.9386525860)*(cj1)*(pz)*(x11)*(x14)*(x7)))+(((-22179.7978240080)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x12))));
op[4]=((((-1169388.04620032)*(pp)*(x10)*(x12)*(x14)))+(((-3256.79668402593)*(cj1)*(pz)*(x16)*(x17)*(x8)*(x9)))+(((604.086841305533)*(sj1)*(x11)*(x12)*(x8)))+(((-1329.87927228905)*(cj1)*(pz)*(x11)*(x8)*(x9)))+(((244.463228424296)*(cj1)*(pz)*(x11)*(x12)*(x9)))+(((655.831747599145)*(cj1)*(pz)*(sj1)*(x8)*(x9)))+(((2587.39724101276)*(x11)*(x12)*(x16)*(x17)))+(((-553.445054708324)*(cj1)*(pz)*(sj1)*(x11)*(x7)*(x8)))+(((-2188.95454880807)*(sj1)*(x12)*(x16)*(x17)))+(((153.300047024046)*(x10)*(x12)*(x8)*(x9)))+(((201.362280435178)*(sj1)*(x11)*(x12)*(x9)))+(((-196191.921152727)*(cj1)*(pz)*(x11)*(x12)*(x14)))+(((-2063.05077739687)*(pp)*(x11)*(x7)))+(((487271.033779921)*(cj1)*(pz)*(sj1)*(x11)*(x14)*(x7)))+(((680.000730038226)*(pp)*(sj1)*(x8)*(x9)))+(((4246.01445013141)*(pp)*(sj1)*(x11)*(x12)))+(((-553.445054708324)*(cj1)*(pz)*(sj1)*(x11)*(x12)*(x9)))+(((3.90923692393104)*(x8)*(x9)))+(((-6221.87186764941)*(cj1)*(pp)*(pz)*(sj1)*(x12)))+(((7373.12531861125)*(cj1)*(pz)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((19.7322671577433)*(x10)*(x7)))+(((-4126.10155479374)*(pp)*(x11)*(x8)*(x9)))+(((-192361.533674180)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((-4516.59124275520)*(pp)*(sj1)*(x11)*(x12)*(x8)))+(((-83780.4119954881)*(cj1)*(pp)*(pz)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((-664.939636144526)*(cj1)*(pz)*(x11)*(x12)))+(((-41890.2059977441)*(cj1)*(pp)*(pz)*(sj1)*(x16)*(x17)*(x7)))+(((4246.01445013141)*(pp)*(sj1)*(x11)*(x7)))+(((-1660.33516412497)*(cj1)*(pz)*(sj1)*(x11)*(x7)*(x9)))+(((-1660.33516412497)*(cj1)*(pz)*(sj1)*(x11)*(x12)*(x8)))+(((505.143858008290)*(x12)*(x16)*(x17)))+(((5174.79448202551)*(x11)*(x16)*(x17)*(x8)*(x9)))+(((819515.125951241)*(x11)*(x14)*(x16)*(x17)*(x8)*(x9)))+(((-1505.53041425173)*(pp)*(sj1)*(x11)*(x12)*(x9)))+(((409757.562975620)*(x11)*(x14)*(x16)*(x17)*(x7)))+(((-286.882381814718)*(x10)*(x7)*(x8)))+(((3933.82138741786)*(pp)*(x10)*(x12)*(x9)))+(((604.086841305533)*(sj1)*(x11)*(x7)*(x9)))+(((-71611.1488551596)*(pp)*(x11)*(x16)*(x17)*(x7)))+(((229.950070536070)*(x10)*(x12)*(x7)))+(((-123.642883887217)*(x11)*(x7)*(x9)))+(((-143222.297710319)*(pp)*(x11)*(x16)*(x17)*(x8)*(x9)))+(((-1869430.82817494)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x12)*(x14)))+(((974542.067559842)*(cj1)*(pz)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((-65574.7000122656)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((20998.0120268155)*(x11)*(x14)*(x7)))+(((-510.574829624678)*(x11)*(x12)*(x16)*(x17)*(x9)))+(((-664.939636144526)*(cj1)*(pz)*(x11)*(x7)))+(((1700.49952173451)*(x12)*(x22)*(x23)))+(((-41.2142946290723)*(x11)*(x12)*(x9)))+(((340.000365019113)*(pp)*(sj1)*(x7)))+(((-96180.7668370900)*(sj1)*(x11)*(x12)*(x14)))+(((-1869430.82817494)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x14)*(x7)))+(((-93.5485754695523)*(sj1)*(x11)*(x8)*(x9)))+(((6288.76530598050)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x12)*(x9)))+(((-22785.3815434076)*(x10)*(x12)*(x14)*(x9)))+(((-1531.72448887403)*(x11)*(x12)*(x16)*(x17)*(x8)))+(((-22785.3815434076)*(x10)*(x14)*(x7)*(x8)))+(((-41.2142946290723)*(x11)*(x7)*(x8)))+(((835.980438889517)*(cj1)*(pz)*(sj1)*(x11)*(x8)*(x9)))+(((-196191.921152727)*(cj1)*(pz)*(x11)*(x14)*(x7)))+(((3386650.05104156)*(x10)*(x24)*(x7)))+(((-1628.39834201297)*(cj1)*(pz)*(x12)*(x16)*(x17)))+(((-32787.3500061328)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x12)))+(((20998.0120268155)*(x11)*(x12)*(x14)))+(((-2338776.09240063)*(pp)*(x10)*(x14)*(x8)*(x9)))+(((-68356.1446302228)*(x10)*(x14)*(x7)*(x9)))+(((-1505.53041425173)*(pp)*(sj1)*(x11)*(x7)*(x8)))+(((60171.0918951596)*(pp)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((79.5910487363137)*(x11)*(x8)*(x9)))+(((-1531.72448887403)*(x11)*(x16)*(x17)*(x7)*(x9)))+(((55278.1766334042)*(cj1)*(pp)*(pz)*(x11)*(x8)*(x9)))+(((-46.7742877347762)*(sj1)*(x11)*(x12)))+(((-510.574829624678)*(x11)*(x16)*(x17)*(x7)*(x8)))+(((-2742.03225184295)*(pp)*(x10)*(x7)))+(((39.4645343154866)*(x10)*(x8)*(x9)))+(((-860.647145444155)*(x10)*(x7)*(x9)))+(((38.3250117560116)*(x10)*((x7)*(x7))))+(((327.915873799572)*(cj1)*(pz)*(sj1)*(x7)))+(((27639.0883167021)*(cj1)*(pp)*(pz)*(x11)*(x12)))+(((417.990219444758)*(cj1)*(pz)*(sj1)*(x11)*(x7)))+(((-14.3692050446005)*(sj1)*(x12)))+(((417.990219444758)*(cj1)*(pz)*(sj1)*(x11)*(x12)))+(((447541.740265081)*(pp)*(sj1)*(x11)*(x12)*(x14)))+(((-2742.03225184295)*(pp)*(x10)*(x12)))+(((1700.49952173451)*(x22)*(x23)*(x7)))+(((-3738861.65634988)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((1.95461846196552)*(x7)))+(((-4377.90909761613)*(sj1)*(x16)*(x17)*(x8)*(x9)))+(((-5484.06450368590)*(pp)*(x10)*(x8)*(x9)))+(((30085.5459475798)*(pp)*(sj1)*(x12)*(x16)*(x17)))+(((6288.76530598050)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x7)*(x8)))+(((18866.2959179415)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x7)*(x9)))+(((1.95461846196552)*(x12)))+(((3686.56265930563)*(cj1)*(pz)*(sj1)*(x12)*(x16)*(x17)))+(((233655.671410646)*(x10)*(x14)*(x8)*(x9)))+(((-46.7742877347762)*(sj1)*(x11)*(x7)))+(((-860.647145444155)*(x10)*(x12)*(x8)))+(((3933.82138741786)*(pp)*(x10)*(x7)*(x8)))+(((-14.3692050446005)*(sj1)*(x7)))+(((39.7955243681568)*(x11)*(x12)))+(((-6221.87186764941)*(cj1)*(pp)*(pz)*(sj1)*(x7)))+(((38.3250117560116)*(x10)*((x12)*(x12))))+(((-55.2081752126687)*(cj1)*(pz)*(x7)))+(((-392383.842305454)*(cj1)*(pz)*(x11)*(x14)*(x8)*(x9)))+(((-28.7384100892011)*(sj1)*(x8)*(x9)))+(((733.389685272887)*(cj1)*(pz)*(x11)*(x7)*(x9)))+(((27639.0883167021)*(cj1)*(pp)*(pz)*(x11)*(x7)))+(((116827.835705323)*(x10)*(x12)*(x14)))+(((19.7322671577433)*(x10)*(x12)))+(((39.7955243681568)*(x11)*(x7)))+(((201.362280435178)*(sj1)*(x11)*(x7)*(x8)))+(((-4516.59124275520)*(pp)*(sj1)*(x11)*(x7)*(x9)))+(((-55.2081752126687)*(cj1)*(pz)*(x12)))+(((41996.0240536310)*(x11)*(x14)*(x8)*(x9)))+(((116827.835705323)*(x10)*(x14)*(x7)))+(((-286.882381814718)*(x10)*(x12)*(x9)))+(((3386650.05104156)*(x10)*(x12)*(x24)))+(((-2063.05077739687)*(pp)*(x11)*(x12)))+(((733.389685272887)*(cj1)*(pz)*(x11)*(x12)*(x8)))+(((153.300047024046)*(x10)*(x7)*(x8)*(x9)))+(((8492.02890026282)*(pp)*(sj1)*(x11)*(x8)*(x9)))+(((3686.56265930563)*(cj1)*(pz)*(sj1)*(x16)*(x17)*(x7)))+(((-1169388.04620032)*(pp)*(x10)*(x14)*(x7)))+(((-68356.1446302228)*(x10)*(x12)*(x14)*(x8)))+(((895083.480530162)*(pp)*(sj1)*(x11)*(x14)*(x8)*(x9)))+(((505.143858008290)*(x16)*(x17)*(x7)))+(((2587.39724101276)*(x11)*(x16)*(x17)*(x7)))+(((30085.5459475798)*(pp)*(sj1)*(x16)*(x17)*(x7)))+(((11801.4641622536)*(pp)*(x10)*(x7)*(x9)))+(((-71611.1488551596)*(pp)*(x11)*(x12)*(x16)*(x17)))+(((-110.416350425337)*(cj1)*(pz)*(x8)*(x9)))+(((409757.562975620)*(x11)*(x12)*(x14)*(x16)*(x17)))+(((-2188.95454880807)*(sj1)*(x16)*(x17)*(x7)))+(((447541.740265081)*(pp)*(sj1)*(x11)*(x14)*(x7)))+(((11801.4641622536)*(pp)*(x10)*(x12)*(x8)))+(((-96180.7668370900)*(sj1)*(x11)*(x14)*(x7)))+(((244.463228424296)*(cj1)*(pz)*(x11)*(x7)*(x8)))+(((-1628.39834201297)*(cj1)*(pz)*(x16)*(x17)*(x7)))+(((340.000365019113)*(pp)*(sj1)*(x12)))+(((487271.033779921)*(cj1)*(pz)*(sj1)*(x11)*(x12)*(x14)))+(((3400.99904346902)*(x22)*(x23)*(x8)*(x9)))+(((-41890.2059977441)*(cj1)*(pp)*(pz)*(sj1)*(x12)*(x16)*(x17)))+(((-123.642883887217)*(x11)*(x12)*(x8)))+(((-12443.7437352988)*(cj1)*(pp)*(pz)*(sj1)*(x8)*(x9)))+(((18866.2959179415)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x12)*(x8)))+(((-32787.3500061328)*(cj1)*(pp)*(pz)*(sj1)*(x11)*(x7)))+(((6773300.10208312)*(x10)*(x24)*(x8)*(x9)))+(((327.915873799572)*(cj1)*(pz)*(sj1)*(x12)))+(((1010.28771601658)*(x16)*(x17)*(x8)*(x9))));
polyroots4(op,zeror,numroots);
IKReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IKReal cj3 = zeror[ij3];
IKReal x25=x8;
IKReal x26=x14;
IKReal x27=x11;
IKReal x28=x9;
IKReal x29=x16;
IKReal x30=x17;
tempj3array[0]=IKatan2(((((IKabs(((((-0.0422280000000000)*(pp)*(sj1)*(x28)))+(((-0.0422280000000000)*(pp)*(sj1)*(x25)))+(((-0.0197545344000000)*(cj1)*(pz)*(sj1)*(x28)))+(((-0.0197545344000000)*(cj1)*(pz)*(sj1)*(x25)))+(((0.00844552587744000)*(sj1)*(x25)))+(((0.00844552587744000)*(sj1)*(x28)))+(((0.143148800000000)*(pp)*(x25)*(x27)))+(((-0.0123570853959680)*(x27)*(x28)))+(((0.00685684800000000)*(cj1)*(pz)*(x25)))+(((0.00685684800000000)*(cj1)*(pz)*(x28)))+(((0.143148800000000)*(pp)*(x27)*(x28)))+(((-0.0123570853959680)*(x25)*(x27)))+(((cj3)*(((((-0.000198848592000000)*(x28)))+(((-0.000198848592000000)*(x25)))+(((0.00153395699520000)*(sj1)*(x25)))+(((0.00153395699520000)*(sj1)*(x28)))+(((-0.00325795216896000)*(x27)*(x28)))+(((-0.00325795216896000)*(x25)*(x27)))))))+(((-0.00164152941120000)*(x28)))+(((-0.00164152941120000)*(x25))))) != 0)?((IKReal)1/(((((-0.0422280000000000)*(pp)*(sj1)*(x28)))+(((-0.0422280000000000)*(pp)*(sj1)*(x25)))+(((-0.0197545344000000)*(cj1)*(pz)*(sj1)*(x28)))+(((-0.0197545344000000)*(cj1)*(pz)*(sj1)*(x25)))+(((0.00844552587744000)*(sj1)*(x25)))+(((0.00844552587744000)*(sj1)*(x28)))+(((0.143148800000000)*(pp)*(x25)*(x27)))+(((-0.0123570853959680)*(x27)*(x28)))+(((0.00685684800000000)*(cj1)*(pz)*(x25)))+(((0.00685684800000000)*(cj1)*(pz)*(x28)))+(((0.143148800000000)*(pp)*(x27)*(x28)))+(((-0.0123570853959680)*(x25)*(x27)))+(((cj3)*(((((-0.000198848592000000)*(x28)))+(((-0.000198848592000000)*(x25)))+(((0.00153395699520000)*(sj1)*(x25)))+(((0.00153395699520000)*(sj1)*(x28)))+(((-0.00325795216896000)*(x27)*(x28)))+(((-0.00325795216896000)*(x25)*(x27)))))))+(((-0.00164152941120000)*(x28)))+(((-0.00164152941120000)*(x25)))))):(IKReal)1.0e30))*(((((-0.00336400000000000)*(x27)*((x25)*(x25))))+(((0.00180880423488000)*(x28)))+(((0.00180880423488000)*(x25)))+(((0.0660744000000000)*(pp)*(sj1)*(x25)))+(((0.0660744000000000)*(pp)*(sj1)*(x28)))+(((-0.0107289504000000)*(cj1)*(pz)*(x25)))+(((-0.0107289504000000)*(cj1)*(pz)*(x28)))+(((-0.172646720000000)*(pp)*(x27)*(x28)))+(((0.0125906332210496)*(x27)*(x28)))+(((x25)*(x26)*(x27)))+(((0.0242894793600000)*(cj1)*(pz)*(sj1)*(x25)))+(((0.0242894793600000)*(cj1)*(pz)*(sj1)*(x28)))+((((cj3)*(cj3))*(((((-0.00460491355072000)*(x25)*(x27)))+(((0.00284027912640000)*(sj1)*(x25)))+(((0.00284027912640000)*(sj1)*(x28)))+(((-0.000505703744000000)*(x25)))+(((-0.000505703744000000)*(x28)))+(((-0.00460491355072000)*(x27)*(x28)))))))+(((0.0224080000000000)*(x25)*(x29)*(x30)))+(((cj3)*(((((-0.00220819538592000)*(sj1)*(x28)))+(((-0.00220819538592000)*(sj1)*(x25)))+(((0.00800400000000000)*(pp)*(sj1)*(x28)))+(((0.00800400000000000)*(pp)*(sj1)*(x25)))+(((0.00392930122982400)*(x25)*(x27)))+(((0.00628153920000000)*(cj1)*(pz)*(sj1)*(x25)))+(((0.00628153920000000)*(cj1)*(pz)*(sj1)*(x28)))+(((-0.00129966400000000)*(cj1)*(pz)*(x28)))+(((-0.00129966400000000)*(cj1)*(pz)*(x25)))+(((0.00392930122982400)*(x27)*(x28)))+(((-0.0455184000000000)*(pp)*(x25)*(x27)))+(((0.000311139561600000)*(x25)))+(((0.000311139561600000)*(x28)))+(((-0.0455184000000000)*(pp)*(x27)*(x28)))))))+(((-0.00883734512198400)*(sj1)*(x28)))+(((-0.00883734512198400)*(sj1)*(x25)))+(((-0.00336400000000000)*(x27)*((x28)*(x28))))+(((0.0224080000000000)*(x28)*(x29)*(x30)))+(((-0.276000000000000)*(cj1)*(pp)*(pz)*(sj1)*(x25)))+(((-0.276000000000000)*(cj1)*(pp)*(pz)*(sj1)*(x28)))+(((-0.00672800000000000)*(x25)*(x27)*(x28)))+(((x26)*(x27)*(x28)))+(((0.0125906332210496)*(x25)*(x27)))+(((-0.172646720000000)*(pp)*(x25)*(x27)))))), cj3);
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
bool valid = true;
for( int kj3 = 0; kj3 < numsolutions; ++kj3)
{
    if( IKabs(cj3array[kj3]-cj3array[numsolutions]) < 0.0001 && IKabs(sj3array[kj3]-sj3array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

IKReal x31=x9;
IKReal x32=x8;
IKReal x33=x11;
j3evalpoly[0]=((((0.143148800000000)*(pp)*(x32)*(x33)))+(((0.143148800000000)*(pp)*(x31)*(x33)))+(((-0.00164152941120000)*(x32)))+(((-0.00164152941120000)*(x31)))+(((-0.0422280000000000)*(pp)*(sj1)*(x31)))+(((-0.0422280000000000)*(pp)*(sj1)*(x32)))+(((-0.0197545344000000)*(cj1)*(pz)*(sj1)*(x31)))+(((-0.0197545344000000)*(cj1)*(pz)*(sj1)*(x32)))+(((cj3)*(((((0.00153395699520000)*(sj1)*(x32)))+(((0.00153395699520000)*(sj1)*(x31)))+(((-0.000198848592000000)*(x31)))+(((-0.000198848592000000)*(x32)))+(((-0.00325795216896000)*(x32)*(x33)))+(((-0.00325795216896000)*(x31)*(x33)))))))+(((0.00844552587744000)*(sj1)*(x31)))+(((0.00844552587744000)*(sj1)*(x32)))+(((0.00685684800000000)*(cj1)*(pz)*(x31)))+(((0.00685684800000000)*(cj1)*(pz)*(x32)))+(((-0.0123570853959680)*(x32)*(x33)))+(((-0.0123570853959680)*(x31)*(x33))));
if( IKabs(j3evalpoly[0]) < 0.0000001000000000  )
{
    continue;
}
{
IKReal dummyeval[2];
IKReal x34=x9;
IKReal x35=((sj1)*(x34));
IKReal x36=x8;
IKReal x37=((sj1)*(x36));
IKReal x38=((x37)+(x35));
dummyeval[0]=x38;
dummyeval[1]=x38;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.239400000000000)+(((0.0290000000000000)*(cj3)))+(((-1.00000000000000)*(pz)))+(((0.153000000000000)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x39=((0.138000000000000)*(py));
IKReal x40=((0.0580000000000000)*(px));
IKReal x41=((((-1.00000000000000)*(x40)))+(x39));
IKReal x42=((0.0580000000000000)*(py));
IKReal x43=((0.138000000000000)*(px));
IKReal x44=((x42)+(x43));
IKReal x45=(x41)*(x41);
IKReal x46=(x44)*(x44);
IKReal x47=((x46)+(x45));
if( (x47) < (IKReal)-0.00001 )
    continue;
IKReal x48=IKsqrt(x47);
IKReal x49=IKabs(x48);
IKReal x50=((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30);
IKReal x51=((0.0227592000000000)*(cj3));
IKReal x52=((0.0715744000000000)*(sj3));
IKReal x53=((0.0768013600000000)+(x51)+(x52));
IKReal x54=((x53)+(((-1.00000000000000)*(pp))));
IKReal x55=((x50)*(x54));
if( (x55) < -1.0001 || (x55) > 1.0001 )
    continue;
IKReal x56=IKasin(x55);
IKReal x57=IKatan2(x44, x41);
j0array[0]=((((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x57))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(x56)+(((-1.00000000000000)*(x57))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x58=((5.27586206896552)*(cj3));
IKReal x59=((1.00000000000000)+(x58));
IKReal x60=((x59)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x60;
dummyeval[1]=x60;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x61=((5.27586206896552)*(cj3));
dummyeval[0]=((1.00000000000000)+(x61)+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(((-181.926278240190)*(cj0)*(cj3)*(py)))+(((34.4827586206897)*(cj0)*(py)*(sj3)))+(x61)+(((181.926278240190)*(cj3)*(px)*(sj0)))+(((34.4827586206897)*(px)*(sj0)))+(((-34.4827586206897)*(cj0)*(py)))+(((-34.4827586206897)*(px)*(sj0)*(sj3)))+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x62=((5.27586206896552)*(cj3));
dummyeval[0]=((1.00000000000000)+(((14.4927536231884)*(py)*(sj0)*(sj3)))+(((-76.4617691154423)*(cj3)*(py)*(sj0)))+(((-14.4927536231884)*(py)*(sj0)))+(((-76.4617691154423)*(cj0)*(cj3)*(px)))+(((14.4927536231884)*(cj0)*(px)*(sj3)))+(((-14.4927536231884)*(cj0)*(px)))+(x62)+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(x62)+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[2]=((0.392400000000000)+(((-1.00000000000000)*(pz))));
evalcond[3]=((0.148375760000000)+(((-0.0580000000000000)*(px)*(sj0)))+(((0.138000000000000)*(cj0)*(px)))+(((0.0580000000000000)*(cj0)*(py)))+(((0.138000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x63=(cj0)*(cj0);
IKReal x64=x8;
IKReal x65=x9;
IKReal x66=(sj0)*(sj0);
IKReal x67=((10.3534451981435)*(px)*(sj0));
IKReal x68=((178.507675830061)*(x63)*(x65));
IKReal x69=((178.507675830061)*(x64)*(x66));
IKReal x70=((178.507675830061)*(x63)*(x64));
IKReal x71=((178.507675830061)*(x65)*(x66));
IKReal x72=((1.00000000000000)+(x71)+(x70)+(x67)+(x68)+(x69));
IKReal x73=((24.6340592645484)*(py)*(sj0));
IKReal x74=((24.6340592645484)*(cj0)*(px));
IKReal x75=((10.3534451981435)*(cj0)*(py));
IKReal x76=((x75)+(x74)+(x73));
IKReal x77=((((-1.00000000000000)*(x76)))+(x72));
dummyeval[0]=x77;
dummyeval[1]=x77;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x78=x9;
IKReal x79=(cj0)*(cj0);
IKReal x80=x8;
IKReal x81=(sj0)*(sj0);
IKReal x82=((0.478800000000000)*(pz));
IKReal x83=((0.138000000000000)*(cj0)*(px));
IKReal x84=((0.0580000000000000)*(cj0)*(py));
IKReal x85=((0.138000000000000)*(py)*(sj0));
IKReal x86=((0.0580000000000000)*(x78)*(x81));
IKReal x87=((0.0580000000000000)*(x78)*(x79));
IKReal x88=((0.0580000000000000)*(x79)*(x80));
IKReal x89=((0.0580000000000000)*(x80)*(x81));
IKReal x90=((0.00336400000000000)*(px)*(sj0));
IKReal x91=((0.000324916000000000)+(x88)+(x89)+(x86)+(x87)+(x90));
IKReal x92=((0.00800400000000000)*(cj0)*(px));
IKReal x93=((0.00800400000000000)*(py)*(sj0));
IKReal x94=((0.00336400000000000)*(cj0)*(py));
IKReal x95=((x93)+(x92)+(x94));
IKReal x96=((x91)+(((-1.00000000000000)*(x95))));
IKReal x97=((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(x97)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))*(((0.0395053600000000)+(((0.0580000000000000)*(px)*(sj0)))+(pp)+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85)))))), ((-1.00000000000000)*(x97)*(((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.0395053600000000)+(((0.0580000000000000)*(px)*(sj0)))+(pp)+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((-1.00000000000000)*(pz))));
evalcond[2]=((0.00186295967181242)+(((-0.0580000000000000)*(px)*(sj0)))+(((0.138000000000000)*(cj0)*(px)))+(((0.0580000000000000)*(cj0)*(py)))+(((0.138000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-136105573.769954)+(((4693295647.23979)*(cj0)*(py)))+(((-4693295647.23979)*(px)*(sj0)))), ((-323837399.659546)+(((4693295647.23979)*(cj0)*(px)))+(((4693295647.23979)*(py)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x183=((cj0)*(px));
IKReal x184=((py)*(sj0));
IKReal x185=((x184)+(x183));
IKReal x186=((0.0690000000000000)+(((-1.00000000000000)*(x185))));
j2array[0]=IKatan2(((-1.00000000000000)*(x186)*(((IKabs(((0.00200100000000000)+(((-0.153000000000000)*(cj3)*(x183)))+(((-0.153000000000000)*(cj3)*(x184)))+(((0.0290000000000000)*(sj3)*(x183)))+(((0.0290000000000000)*(sj3)*(x184)))+(((0.0105570000000000)*(cj3)))+(((-0.0290000000000000)*(x184)))+(((-0.0290000000000000)*(x183)))+(((-0.00200100000000000)*(sj3))))) != 0)?((IKReal)1/(((0.00200100000000000)+(((-0.153000000000000)*(cj3)*(x183)))+(((-0.153000000000000)*(cj3)*(x184)))+(((0.0290000000000000)*(sj3)*(x183)))+(((0.0290000000000000)*(sj3)*(x184)))+(((0.0105570000000000)*(cj3)))+(((-0.0290000000000000)*(x184)))+(((-0.0290000000000000)*(x183)))+(((-0.00200100000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))), ((-1.00000000000000)*(x186)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x187=((cj0)*(py));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(x187)))+(((px)*(sj0)))))), ((-1.00000000000000)*(((IKabs(((0.000841000000000000)+(((-0.0290000000000000)*(px)*(sj0)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((-0.153000000000000)*(cj3)*(x187)))+(((0.153000000000000)*(cj3)*(px)*(sj0)))+(((0.0290000000000000)*(sj3)*(x187)))+(((-0.0290000000000000)*(x187)))+(((0.00443700000000000)*(cj3)))+(((-0.000841000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((-0.0290000000000000)*(px)*(sj0)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((-0.153000000000000)*(cj3)*(x187)))+(((0.153000000000000)*(cj3)*(px)*(sj0)))+(((0.0290000000000000)*(sj3)*(x187)))+(((-0.0290000000000000)*(x187)))+(((0.00443700000000000)*(cj3)))+(((-0.000841000000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.0290000000000000)+(((-1.00000000000000)*(x187)))+(((px)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x188=((0.153000000000000)*(cj3));
IKReal x189=((0.0290000000000000)+(x188));
IKReal x190=((0.0290000000000000)*(sj3));
IKReal x191=((((-1.00000000000000)*(x190)))+(x189));
IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(x192)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))), ((-1.00000000000000)*(x192)*(((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.239400000000000)+(((0.0290000000000000)*(cj3)))+(pz)+(((0.153000000000000)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x193=((0.138000000000000)*(py));
IKReal x194=((0.0580000000000000)*(px));
IKReal x195=((((-1.00000000000000)*(x194)))+(x193));
IKReal x196=((0.0580000000000000)*(py));
IKReal x197=((0.138000000000000)*(px));
IKReal x198=((x197)+(x196));
IKReal x199=(x195)*(x195);
IKReal x200=(x198)*(x198);
IKReal x201=((x199)+(x200));
if( (x201) < (IKReal)-0.00001 )
    continue;
IKReal x202=IKsqrt(x201);
IKReal x203=IKabs(x202);
IKReal x204=((IKabs(x203) != 0)?((IKReal)1/(x203)):(IKReal)1.0e30);
IKReal x205=((0.0227592000000000)*(cj3));
IKReal x206=((0.0715744000000000)*(sj3));
IKReal x207=((0.0768013600000000)+(x206)+(x205));
IKReal x208=((x207)+(((-1.00000000000000)*(pp))));
IKReal x209=((x204)*(x208));
if( (x209) < -1.0001 || (x209) > 1.0001 )
    continue;
IKReal x210=IKasin(x209);
IKReal x211=IKatan2(x198, x195);
j0array[0]=((((-1.00000000000000)*(x211)))+(((-1.00000000000000)*(x210))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(x210)+(((-1.00000000000000)*(x211))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x212=((5.27586206896552)*(cj3));
IKReal x213=((1.00000000000000)+(x212));
IKReal x214=((x213)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x214;
dummyeval[1]=x214;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x215=((5.27586206896552)*(cj3));
dummyeval[0]=((1.00000000000000)+(x215)+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(((-181.926278240190)*(cj0)*(cj3)*(py)))+(((34.4827586206897)*(cj0)*(py)*(sj3)))+(x215)+(((181.926278240190)*(cj3)*(px)*(sj0)))+(((34.4827586206897)*(px)*(sj0)))+(((-34.4827586206897)*(cj0)*(py)))+(((-34.4827586206897)*(px)*(sj0)*(sj3)))+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x216=((5.27586206896552)*(cj3));
dummyeval[0]=((1.00000000000000)+(((14.4927536231884)*(py)*(sj0)*(sj3)))+(((-76.4617691154423)*(cj3)*(py)*(sj0)))+(((-14.4927536231884)*(py)*(sj0)))+(((-76.4617691154423)*(cj0)*(cj3)*(px)))+(x216)+(((14.4927536231884)*(cj0)*(px)*(sj3)))+(((-14.4927536231884)*(cj0)*(px)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(x216)+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[2]=((0.392400000000000)+(pz));
evalcond[3]=((0.148375760000000)+(((-0.0580000000000000)*(px)*(sj0)))+(((0.138000000000000)*(cj0)*(px)))+(((0.0580000000000000)*(cj0)*(py)))+(((0.138000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-0.0690000000000000)+(((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x217=(cj0)*(cj0);
IKReal x218=x8;
IKReal x219=x9;
IKReal x220=(sj0)*(sj0);
IKReal x221=((10.3534451981435)*(px)*(sj0));
IKReal x222=((178.507675830061)*(x217)*(x219));
IKReal x223=((178.507675830061)*(x218)*(x220));
IKReal x224=((178.507675830061)*(x217)*(x218));
IKReal x225=((178.507675830061)*(x219)*(x220));
IKReal x226=((1.00000000000000)+(x221)+(x223)+(x222)+(x225)+(x224));
IKReal x227=((24.6340592645484)*(py)*(sj0));
IKReal x228=((24.6340592645484)*(cj0)*(px));
IKReal x229=((10.3534451981435)*(cj0)*(py));
IKReal x230=((x229)+(x228)+(x227));
IKReal x231=((((-1.00000000000000)*(x230)))+(x226));
dummyeval[0]=x231;
dummyeval[1]=x231;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x232=x9;
IKReal x233=(cj0)*(cj0);
IKReal x234=x8;
IKReal x235=(sj0)*(sj0);
IKReal x236=((0.138000000000000)*(cj0)*(px));
IKReal x237=((0.0580000000000000)*(cj0)*(py));
IKReal x238=((0.138000000000000)*(py)*(sj0));
IKReal x239=((0.0580000000000000)*(x232)*(x235));
IKReal x240=((0.0580000000000000)*(x232)*(x233));
IKReal x241=((0.0580000000000000)*(x233)*(x234));
IKReal x242=((0.0580000000000000)*(x234)*(x235));
IKReal x243=((0.00336400000000000)*(px)*(sj0));
IKReal x244=((0.000324916000000000)+(x239)+(x243)+(x242)+(x241)+(x240));
IKReal x245=((0.00800400000000000)*(cj0)*(px));
IKReal x246=((0.00800400000000000)*(py)*(sj0));
IKReal x247=((0.00336400000000000)*(cj0)*(py));
IKReal x248=((x247)+(x246)+(x245));
IKReal x249=((x244)+(((-1.00000000000000)*(x248))));
IKReal x250=((IKabs(x249) != 0)?((IKReal)1/(x249)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(x250)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))*(((0.0395053600000000)+(((0.478800000000000)*(pz)))+(((0.0580000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(x238)))+(((-1.00000000000000)*(x237)))+(((-1.00000000000000)*(x236)))+(pp)))), ((x250)*(((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.0395053600000000)+(((0.478800000000000)*(pz)))+(((0.0580000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(x238)))+(((-1.00000000000000)*(x237)))+(((-1.00000000000000)*(x236)))+(pp)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(pz));
evalcond[2]=((0.00186295967181242)+(((-0.0580000000000000)*(px)*(sj0)))+(((0.138000000000000)*(cj0)*(px)))+(((0.0580000000000000)*(cj0)*(py)))+(((0.138000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-136105573.769954)+(((4693295647.23979)*(cj0)*(py)))+(((-4693295647.23979)*(px)*(sj0)))), ((323837399.659546)+(((-4693295647.23979)*(py)*(sj0)))+(((-4693295647.23979)*(cj0)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x251=((cj0)*(px));
IKReal x252=((py)*(sj0));
IKReal x253=((x251)+(x252));
IKReal x254=((0.0690000000000000)+(((-1.00000000000000)*(x253))));
j2array[0]=IKatan2(((-1.00000000000000)*(x254)*(((IKabs(((0.00200100000000000)+(((-0.153000000000000)*(cj3)*(x252)))+(((-0.153000000000000)*(cj3)*(x251)))+(((0.0290000000000000)*(sj3)*(x252)))+(((0.0290000000000000)*(sj3)*(x251)))+(((0.0105570000000000)*(cj3)))+(((-0.00200100000000000)*(sj3)))+(((-0.0290000000000000)*(x251)))+(((-0.0290000000000000)*(x252))))) != 0)?((IKReal)1/(((0.00200100000000000)+(((-0.153000000000000)*(cj3)*(x252)))+(((-0.153000000000000)*(cj3)*(x251)))+(((0.0290000000000000)*(sj3)*(x252)))+(((0.0290000000000000)*(sj3)*(x251)))+(((0.0105570000000000)*(cj3)))+(((-0.00200100000000000)*(sj3)))+(((-0.0290000000000000)*(x251)))+(((-0.0290000000000000)*(x252)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))), ((x254)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x255=((cj0)*(py));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x255)))))), ((((IKabs(((0.000841000000000000)+(((-0.0290000000000000)*(px)*(sj0)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((-0.153000000000000)*(cj3)*(x255)))+(((0.153000000000000)*(cj3)*(px)*(sj0)))+(((0.0290000000000000)*(sj3)*(x255)))+(((0.00443700000000000)*(cj3)))+(((-0.0290000000000000)*(x255)))+(((-0.000841000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((-0.0290000000000000)*(px)*(sj0)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((-0.153000000000000)*(cj3)*(x255)))+(((0.153000000000000)*(cj3)*(px)*(sj0)))+(((0.0290000000000000)*(sj3)*(x255)))+(((0.00443700000000000)*(cj3)))+(((-0.0290000000000000)*(x255)))+(((-0.000841000000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x255)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x256=((0.153000000000000)*(cj3));
IKReal x257=((0.0290000000000000)+(x256));
IKReal x258=((0.0290000000000000)*(sj3));
IKReal x259=((x257)+(((-1.00000000000000)*(x258))));
IKReal x260=((IKabs(x259) != 0)?((IKReal)1/(x259)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(x260)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))), ((x260)*(((0.0690000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x261=x9;
IKReal x262=((0.0580000000000000)*(sj1)*(x261));
IKReal x263=x8;
IKReal x264=((0.0580000000000000)*(sj1)*(x263));
IKReal x265=((x264)+(x262));
IKReal x266=((IKabs(x265) != 0)?((IKReal)1/(x265)):(IKReal)1.0e30);
IKReal x267=((0.0290000000000000)*(cj3));
IKReal x268=((0.153000000000000)*(sj3));
IKReal x269=((0.239400000000000)+(x267)+(x268));
IKReal x270=((0.0690000000000000)*(sj1));
IKReal x271=((cj1)*(pz));
IKReal x272=((x270)+(x271));
IKReal x273=((x269)+(((-1.00000000000000)*(x272))));
IKReal x274=((0.0227592000000000)*(cj3));
IKReal x275=((0.0715744000000000)*(sj3));
IKReal x276=((0.0768013600000000)+(x274)+(x275));
IKReal x277=((x276)+(((-1.00000000000000)*(pp))));
j0array[0]=IKatan2(((x266)*(((((px)*(sj1)*(x277)))+(((x273)*(((((-0.138000000000000)*(px)))+(((-0.0580000000000000)*(py)))))))))), ((x266)*(((((-1.00000000000000)*(py)*(sj1)*(x277)))+(((x273)*(((((0.138000000000000)*(py)))+(((-0.0580000000000000)*(px)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x278=((5.27586206896552)*(cj3));
IKReal x279=((1.00000000000000)+(x278));
IKReal x280=((x279)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x280;
dummyeval[1]=x280;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x281=((5.27586206896552)*(cj3));
dummyeval[0]=((1.00000000000000)+(x281)+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((1.00000000000000)+(((-181.926278240190)*(cj0)*(cj3)*(py)))+(((34.4827586206897)*(cj0)*(py)*(sj3)))+(x281)+(((181.926278240190)*(cj3)*(px)*(sj0)))+(((34.4827586206897)*(px)*(sj0)))+(((-34.4827586206897)*(cj0)*(py)))+(((-34.4827586206897)*(px)*(sj0)*(sj3)))+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((1.00000000000000)+(((5.27586206896552)*(cj3)))+(((-1.00000000000000)*(sj3))));
dummyeval[1]=((((-14.4927536231884)*(cj0)*(cj1)*(px)))+(((14.4927536231884)*(cj1)*(py)*(sj0)*(sj3)))+(cj1)+(((-76.4617691154423)*(cj0)*(cj1)*(cj3)*(px)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((-76.4617691154423)*(cj3)*(pz)*(sj1)))+(((-14.4927536231884)*(cj1)*(py)*(sj0)))+(((-76.4617691154423)*(cj1)*(cj3)*(py)*(sj0)))+(((5.27586206896552)*(cj1)*(cj3)))+(((-14.4927536231884)*(pz)*(sj1)))+(((14.4927536231884)*(pz)*(sj1)*(sj3)))+(((14.4927536231884)*(cj0)*(cj1)*(px)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[2]=((0.392400000000000)+(((-0.0690000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[3]=((0.148375760000000)+(((-0.0580000000000000)*(px)*(sj0)))+(((0.138000000000000)*(cj0)*(px)))+(((0.0580000000000000)*(cj0)*(py)))+(((0.138000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((0.0690000000000000)*(cj1)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x282=x16;
IKReal x283=(cj0)*(cj0);
IKReal x284=x9;
IKReal x285=x8;
IKReal x286=(sj0)*(sj0);
IKReal x287=((2378.12128418549)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x288=((1189.06064209275)*(x282)*(x284)*(x286));
IKReal x289=((1189.06064209275)*(x282)*(x283)*(x285));
IKReal x290=((2378.12128418549)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x291=((1189.06064209275)*(x283)*(x284));
IKReal x292=((1189.06064209275)*(x285)*(x286));
IKReal x293=((5.66111771700357)*(x282));
IKReal x294=((2378.12128418549)*(cj0)*(px)*(py)*(sj0)*(x282));
IKReal x295=x17;
IKReal x296=x11;
IKReal x297=((1189.06064209275)*(x295)*(x296));
IKReal x298=((68.9655172413793)*(px)*(sj0));
IKReal x299=((1.00000000000000)+(x298)+(x290)+(x291)+(x292)+(x293)+(x294)+(x297)+(x289)+(x288)+(x287));
IKReal x300=((164.090368608799)*(cj0)*(px)*(x282));
IKReal x301=((164.090368608799)*(py)*(sj0)*(x282));
IKReal x302=((68.9655172413793)*(cj0)*(py));
IKReal x303=((2378.12128418549)*(cj0)*(px)*(py)*(sj0));
IKReal x304=((164.090368608799)*(cj1)*(pz)*(sj1));
IKReal x305=((x304)+(x302)+(x303)+(x300)+(x301));
IKReal x306=((x299)+(((-1.00000000000000)*(x305))));
dummyeval[0]=x306;
dummyeval[1]=x306;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x307=(cj0)*(cj0);
IKReal x308=x16;
IKReal x309=x8;
IKReal x310=x9;
IKReal x311=(sj0)*(sj0);
IKReal x312=((0.478800000000000)*(cj1)*(pz));
IKReal x313=((0.0330372000000000)*(sj1));
IKReal x314=((0.138000000000000)*(cj0)*(px));
IKReal x315=((0.0580000000000000)*(cj0)*(py));
IKReal x316=((0.138000000000000)*(py)*(sj0));
IKReal x317=((0.000276138000000000)*(x308));
IKReal x318=((0.116000000000000)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x319=x17;
IKReal x320=x11;
IKReal x321=((0.0580000000000000)*(x319)*(x320));
IKReal x322=((0.0580000000000000)*(x307)*(x310));
IKReal x323=((0.0580000000000000)*(x309)*(x311));
IKReal x324=((0.00336400000000000)*(px)*(sj0));
IKReal x325=((0.0580000000000000)*(x307)*(x308)*(x309));
IKReal x326=((0.116000000000000)*(cj0)*(px)*(py)*(sj0)*(x308));
IKReal x327=((0.0580000000000000)*(x308)*(x310)*(x311));
IKReal x328=((0.116000000000000)*(cj0)*(cj1)*(px)*(pz)*(sj1));
IKReal x329=((4.87780000000000e-5)+(x324)+(x325)+(x326)+(x327)+(x321)+(x322)+(x323)+(x328)+(x318)+(x317));
IKReal x330=((0.116000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x331=((0.00800400000000000)*(cj1)*(pz)*(sj1));
IKReal x332=((0.00800400000000000)*(cj0)*(px)*(x308));
IKReal x333=((0.00336400000000000)*(cj0)*(py));
IKReal x334=((0.00800400000000000)*(py)*(sj0)*(x308));
IKReal x335=((x333)+(x332)+(x331)+(x330)+(x334));
IKReal x336=((x329)+(((-1.00000000000000)*(x335))));
IKReal x337=((IKabs(x336) != 0)?((IKReal)1/(x336)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(x337)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))*(((0.0395053600000000)+(((0.0580000000000000)*(px)*(sj0)))+(((0.478800000000000)*(py)*(sj0)*(sj1)))+(((0.478800000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x315)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313)))+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x314)))+(pp)))), ((x337)*(((((-0.0690000000000000)*(cj1)))+(((cj1)*(py)*(sj0)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))))*(((0.0395053600000000)+(((0.0580000000000000)*(px)*(sj0)))+(((0.478800000000000)*(py)*(sj0)*(sj1)))+(((0.478800000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x315)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313)))+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x314)))+(pp)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((-0.0690000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[2]=((0.00186295967181242)+(((-0.0580000000000000)*(px)*(sj0)))+(((0.138000000000000)*(cj0)*(px)))+(((0.0580000000000000)*(cj0)*(py)))+(((0.138000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-136105573.769954)+(((4693295647.23979)*(cj0)*(py)))+(((-4693295647.23979)*(px)*(sj0)))), ((((4693295647.23979)*(cj1)*(py)*(sj0)))+(((-323837399.659546)*(cj1)))+(((4693295647.23979)*(pz)*(sj1)))+(((4693295647.23979)*(cj0)*(cj1)*(px)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x338=((0.153000000000000)*(cj3));
IKReal x339=((0.0290000000000000)+(x338));
IKReal x340=((0.0290000000000000)*(sj3));
IKReal x341=((x339)+(((-1.00000000000000)*(x340))));
IKReal x342=((cj0)*(py));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x341) != 0)?((IKReal)1/(x341)):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x342)))))), ((((IKabs(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(pz)*(sj1)*(x338)))+(((-0.00200100000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((0.0105570000000000)*(cj1)*(cj3)))+(((1.00000000000000)*(pz)*(sj1)*(x340)))+(((1.00000000000000)*(cj1)*(py)*(sj0)*(x340)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x338)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x340)))+(((0.00200100000000000)*(cj1)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)*(x338))))) != 0)?((IKReal)1/(((((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(pz)*(sj1)*(x338)))+(((-0.00200100000000000)*(cj1)*(sj3)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((0.0105570000000000)*(cj1)*(cj3)))+(((1.00000000000000)*(pz)*(sj1)*(x340)))+(((1.00000000000000)*(cj1)*(py)*(sj0)*(x340)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)*(x338)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((1.00000000000000)*(cj0)*(cj1)*(px)*(x340)))+(((0.00200100000000000)*(cj1)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)*(x338)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*((x341)*(x341))))+((((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x342)))))*(((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x342))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x343=((cj0)*(py));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj3)))+(((-0.0290000000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x343)))))), ((((IKabs(((0.000841000000000000)+(((0.0290000000000000)*(sj3)*(x343)))+(((-0.0290000000000000)*(px)*(sj0)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((0.153000000000000)*(cj3)*(px)*(sj0)))+(((-0.0290000000000000)*(x343)))+(((0.00443700000000000)*(cj3)))+(((-0.153000000000000)*(cj3)*(x343)))+(((-0.000841000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.000841000000000000)+(((0.0290000000000000)*(sj3)*(x343)))+(((-0.0290000000000000)*(px)*(sj0)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((0.153000000000000)*(cj3)*(px)*(sj0)))+(((-0.0290000000000000)*(x343)))+(((0.00443700000000000)*(cj3)))+(((-0.153000000000000)*(cj3)*(x343)))+(((-0.000841000000000000)*(sj3)))))):(IKReal)1.0e30))*(((0.0290000000000000)+(((px)*(sj0)))+(((-1.00000000000000)*(x343)))))*(((((-0.0690000000000000)*(cj1)))+(((cj1)*(py)*(sj0)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x344=((0.153000000000000)*(cj3));
IKReal x345=((0.0290000000000000)+(x344));
IKReal x346=((0.0290000000000000)*(sj3));
IKReal x347=((x345)+(((-1.00000000000000)*(x346))));
IKReal x348=((IKabs(x347) != 0)?((IKReal)1/(x347)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(x348)*(((0.0290000000000000)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))), ((x348)*(((((-0.0690000000000000)*(cj1)))+(((cj1)*(py)*(sj0)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x98=((cj0)*(cj2));
IKReal x99=((cj1)*(sj0)*(sj2));
IKReal x100=((x98)+(((-1.00000000000000)*(x99))));
IKReal x101=((cj2)*(sj0));
IKReal x102=((cj0)*(cj1)*(sj2));
IKReal x103=((x101)+(x102));
IKReal x104=((-1.00000000000000)*(x103));
IKReal x105=((cj1)*(cj2)*(sj3));
IKReal x106=((cj3)*(sj1));
IKReal x107=((x105)+(x106));
IKReal x108=((-1.00000000000000)*(x107));
IKReal x109=((sj0)*(x108));
IKReal x110=((cj1)*(cj3));
IKReal x111=((cj2)*(sj1)*(sj3));
IKReal x112=((((-1.00000000000000)*(x111)))+(x110));
IKReal x113=((cj0)*(x108));
IKReal x114=((sj0)*(sj2)*(sj3));
IKReal x115=((x113)+(x114));
IKReal x116=((-1.00000000000000)*(cj0)*(sj2)*(sj3));
IKReal x117=((x116)+(x109));
IKReal x118=((cj2)*(x110));
IKReal x119=((sj1)*(sj3));
IKReal x120=((((-1.00000000000000)*(x119)))+(x118));
IKReal x121=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IKReal x122=((cj0)*(x120));
IKReal x123=((x122)+(x121));
IKReal x124=((cj0)*(cj3)*(sj2));
IKReal x125=((sj0)*(x120));
IKReal x126=((x124)+(x125));
IKReal x127=((cj1)*(sj3));
IKReal x128=((cj2)*(x106));
IKReal x129=((x127)+(x128));
new_r00=((((r10)*(x100)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x104))));
new_r01=((((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x104)))+(((r11)*(x100))));
new_r02=((((r02)*(x104)))+(((r12)*(x100)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2))));
new_r10=((((r10)*(x117)))+(((r20)*(x112)))+(((r00)*(x115))));
new_r11=((((r21)*(x112)))+(((r11)*(((x109)+(((-1.00000000000000)*(cj0)*(sj2)*(sj3)))))))+(((r01)*(x115))));
new_r12=((((r22)*(x112)))+(((r02)*(x115)))+(((r12)*(x117))));
new_r20=((((r00)*(x123)))+(((r20)*(x129)))+(((r10)*(x126))));
new_r21=((((r21)*(x129)))+(((r01)*(x123)))+(((r11)*(x126))));
new_r22=((((r02)*(x123)))+(((r22)*(x129)))+(((r12)*(x126))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj5)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
IKReal x130=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=x130;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x130;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x131=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x131));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x131))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x132=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x132));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x132))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x133=((new_r10)*(new_r12)*(sj5));
IKReal x134=((new_r00)*(new_r02)*(sj5));
IKReal x135=((x134)+(x133));
IKReal x136=((-1.00000000000000)*(x135));
IKReal x137=((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj5)*(new_r12)*(new_r20)*(x137)), ((cj5)*(new_r02)*(new_r20)*(x137)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x138=((cj4)*(new_r12));
IKReal x139=((new_r02)*(sj4));
IKReal x140=((x138)+(((-1.00000000000000)*(x139))));
IKReal x141=((-1.00000000000000)+(new_r22));
IKReal x142=((new_r12)*(sj4));
IKReal x143=((cj4)*(new_r02));
IKReal x144=((x142)+(x143));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=x141;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x140;
evalcond[5]=x140;
evalcond[6]=x144;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x141;
evalcond[10]=x144;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x145=((cj4)*(new_r12));
IKReal x146=((new_r02)*(sj4));
IKReal x147=((((-1.00000000000000)*(x146)))+(x145));
IKReal x148=((new_r12)*(sj4));
IKReal x149=((cj4)*(new_r02));
IKReal x150=((x148)+(x149));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x147;
evalcond[5]=x147;
evalcond[6]=x150;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x150));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x151=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x151)), ((-1.00000000000000)*(new_r20)*(x151)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x152=(new_r12)*(new_r12);
IKReal x153=(new_r02)*(new_r02);
IKReal x154=((x153)+(x152));
IKReal x155=((IKabs(x154) != 0)?((IKReal)1/(x154)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(x155)), ((new_r02)*(sj5)*(x155)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x156=((cj4)*(new_r12));
IKReal x157=((new_r02)*(sj4));
IKReal x158=((((-1.00000000000000)*(x157)))+(x156));
IKReal x159=((-1.00000000000000)+(new_r22));
IKReal x160=((new_r12)*(sj4));
IKReal x161=((cj4)*(new_r02));
IKReal x162=((x160)+(x161));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=x159;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x158;
evalcond[5]=x158;
evalcond[6]=x162;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x159;
evalcond[10]=x162;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x163=((cj4)*(new_r12));
IKReal x164=((new_r02)*(sj4));
IKReal x165=((((-1.00000000000000)*(x164)))+(x163));
IKReal x166=((new_r12)*(sj4));
IKReal x167=((cj4)*(new_r02));
IKReal x168=((x166)+(x167));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x165;
evalcond[5]=x165;
evalcond[6]=x168;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x168));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x169=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x169)), ((-1.00000000000000)*(new_r20)*(x169)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x170=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x170)), ((-1.00000000000000)*(new_r20)*(x170)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x171=((new_r02)*(new_r11));
IKReal x172=((new_r01)*(new_r12));
IKReal x173=((((-1.00000000000000)*(x172)))+(x171));
IKReal x174=((IKabs(x173) != 0)?((IKReal)1/(x173)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj6)*(new_r12)*(x174)), ((cj6)*(new_r02)*(x174)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x175=((new_r02)*(new_r10));
IKReal x176=((new_r00)*(new_r12));
IKReal x177=((((-1.00000000000000)*(x176)))+(x175));
IKReal x178=((IKabs(x177) != 0)?((IKReal)1/(x177)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x178)), ((new_r02)*(sj6)*(x178)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x179=(new_r12)*(new_r12);
IKReal x180=(new_r02)*(new_r02);
IKReal x181=((x179)+(x180));
IKReal x182=((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(x182)), ((new_r02)*(sj5)*(x182)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "355b429090f914bbe775a07ea2a6c95f"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
