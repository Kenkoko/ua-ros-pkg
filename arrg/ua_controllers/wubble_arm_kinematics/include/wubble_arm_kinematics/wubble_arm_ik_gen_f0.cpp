/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-12-03 12:40:27.635007
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[6]);
x3=IKsin(j[2]);
x4=IKsin(j[4]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKsin(j[6]);
x8=IKcos(j[2]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[3]);
x12=IKsin(j[1]);
x13=IKcos(j[5]);
eerot[0]=((((x0)*(x1)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x3)*(x9)))+(((x4)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x7)*(x9)))+(((-1.00000000000000)*(x10)*(x2)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x3)*(x5)))+(((-1.00000000000000)*(x0)*(x1)*(x6)*(x7)*(x8)*(x9)))+(((x3)*(x5)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x12)*(x2)*(x4)))+(((x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x2)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x4)*(x6)*(x8))));
eerot[1]=((((x0)*(x10)*(x11)*(x12)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x2)*(x6)*(x8)*(x9)))+(((x0)*(x1)*(x10)*(x3)*(x7)*(x9)))+(((x0)*(x1)*(x10)*(x4)*(x6)*(x7)*(x8)))+(((x11)*(x13)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x7)*(x8)))+(((x0)*(x1)*(x2)*(x3)*(x4)))+(((x0)*(x12)*(x13)*(x6)*(x7)))+(((x10)*(x5)*(x7)*(x8)*(x9)))+(((x2)*(x4)*(x5)*(x8)))+(((x2)*(x3)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x2)*(x9))));
eerot[2]=((((-1.00000000000000)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((x13)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x6)))+(((x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((x0)*(x1)*(x10)*(x11)*(x8)))+(((x0)*(x11)*(x12)*(x13)*(x4)))+(((-1.00000000000000)*(x10)*(x11)*(x3)*(x5)))+(((x0)*(x1)*(x13)*(x3)*(x9))));
eetrans[0]=((0.0290000000000000)+(((2.77757644662202e-9)*(x3)*(x5)*(x6)*(x7)*(x9)))+(((-2.77757644662202e-9)*(x11)*(x13)*(x2)*(x3)*(x5)))+(((-2.77757644662202e-9)*(x10)*(x2)*(x5)*(x8)*(x9)))+(((9.49949008344220e-11)*(x0)*(x1)*(x10)*(x11)*(x8)))+(((9.49949008344220e-11)*(x0)*(x1)*(x13)*(x3)*(x9)))+(((-9.49949008344220e-11)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((-2.77757644662202e-9)*(x0)*(x1)*(x6)*(x7)*(x8)*(x9)))+(((-0.0290000000000000)*(x3)*(x5)))+(((2.77757644662202e-9)*(x4)*(x5)*(x7)*(x8)))+(((0.0289900000000000)*(x3)*(x5)*(x6)))+(((-2.77757644662202e-9)*(x0)*(x12)*(x13)*(x2)*(x6)))+(((-9.49949008344220e-11)*(x0)*(x10)*(x12)*(x6)))+(((2.77757644662202e-9)*(x0)*(x1)*(x3)*(x4)*(x7)))+(((-0.261080000000000)*(x0)*(x12)*(x6)))+(((2.77757644662202e-9)*(x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((0.0290000000000000)*(x0)*(x1)*(x8)))+(((2.77757644662202e-9)*(x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((-9.49949008344220e-11)*(x10)*(x11)*(x3)*(x5)))+(((9.49949008344220e-11)*(x0)*(x11)*(x12)*(x13)*(x4)))+(((-2.77757644662202e-9)*(x0)*(x1)*(x10)*(x2)*(x3)*(x9)))+(((-2.77757644662202e-9)*(x0)*(x11)*(x12)*(x7)*(x9)))+(((-2.77757644662202e-9)*(x0)*(x10)*(x11)*(x12)*(x2)*(x4)))+(((-2.77757644662202e-9)*(x0)*(x1)*(x10)*(x2)*(x4)*(x6)*(x8)))+(((9.49949008344220e-11)*(x13)*(x5)*(x8)*(x9)))+(((9.49949008344220e-11)*(x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((-0.0289900000000000)*(x0)*(x11)*(x12)))+(((-0.261080000000000)*(x11)*(x3)*(x5)))+(((-0.0289900000000000)*(x0)*(x1)*(x6)*(x8)))+(((-0.289820000000000)*(x0)*(x12)))+(((0.261080000000000)*(x0)*(x1)*(x11)*(x8))));
eerot[3]=((((x1)*(x13)*(x2)*(x6)))+(((x12)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((x1)*(x11)*(x7)*(x9)))+(((-1.00000000000000)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((x11)*(x12)*(x13)*(x2)*(x8)))+(((x1)*(x10)*(x11)*(x2)*(x4))));
eerot[4]=((((-1.00000000000000)*(x11)*(x12)*(x13)*(x7)*(x8)))+(((x10)*(x12)*(x3)*(x7)*(x9)))+(((x1)*(x11)*(x2)*(x9)))+(((x10)*(x12)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x4)*(x7)))+(((-1.00000000000000)*(x1)*(x13)*(x6)*(x7)))+(((x12)*(x2)*(x3)*(x4)))+(((-1.00000000000000)*(x12)*(x2)*(x6)*(x8)*(x9))));
eerot[5]=((((-1.00000000000000)*(x1)*(x11)*(x13)*(x4)))+(((x1)*(x10)*(x6)))+(((x12)*(x13)*(x4)*(x6)*(x8)))+(((x10)*(x11)*(x12)*(x8)))+(((x12)*(x13)*(x3)*(x9))));
eetrans[1]=((0.0930000000000000)+(((0.261080000000000)*(x11)*(x12)*(x8)))+(((0.0289900000000000)*(x1)*(x11)))+(((9.49949008344220e-11)*(x12)*(x13)*(x4)*(x6)*(x8)))+(((-2.77757644662202e-9)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((-2.77757644662202e-9)*(x10)*(x12)*(x2)*(x4)*(x6)*(x8)))+(((0.0290000000000000)*(x12)*(x8)))+(((2.77757644662202e-9)*(x12)*(x3)*(x4)*(x7)))+(((9.49949008344220e-11)*(x12)*(x13)*(x3)*(x9)))+(((0.261080000000000)*(x1)*(x6)))+(((9.49949008344220e-11)*(x10)*(x11)*(x12)*(x8)))+(((9.49949008344220e-11)*(x1)*(x10)*(x6)))+(((-9.49949008344220e-11)*(x1)*(x11)*(x13)*(x4)))+(((-0.0289900000000000)*(x12)*(x6)*(x8)))+(((2.77757644662202e-9)*(x1)*(x11)*(x7)*(x9)))+(((-2.77757644662202e-9)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((2.77757644662202e-9)*(x11)*(x12)*(x13)*(x2)*(x8)))+(((2.77757644662202e-9)*(x1)*(x13)*(x2)*(x6)))+(((2.77757644662202e-9)*(x1)*(x10)*(x11)*(x2)*(x4)))+(((0.289820000000000)*(x1))));
eerot[6]=((((x11)*(x12)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x5)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x8)*(x9)))+(((x1)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((x1)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((x0)*(x10)*(x2)*(x3)*(x4)*(x6)))+(((x0)*(x4)*(x7)*(x8)))+(((x0)*(x3)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x13)*(x2)*(x3)))+(((-1.00000000000000)*(x1)*(x3)*(x4)*(x5)*(x7)))+(((x1)*(x10)*(x2)*(x3)*(x5)*(x9)))+(((x10)*(x11)*(x12)*(x2)*(x4)*(x5)))+(((x12)*(x13)*(x2)*(x5)*(x6))));
eerot[7]=((((x0)*(x2)*(x3)*(x6)*(x9)))+(((x1)*(x2)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((x0)*(x2)*(x4)*(x8)))+(((x0)*(x10)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x12)*(x13)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x3)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x6)*(x7)))+(((x1)*(x11)*(x13)*(x5)*(x7)*(x8)))+(((x0)*(x11)*(x13)*(x3)*(x7)))+(((x11)*(x12)*(x2)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x2)*(x3)*(x4)*(x5))));
eerot[8]=((((-1.00000000000000)*(x1)*(x13)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x13)*(x3)*(x4)*(x6)))+(((x0)*(x13)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x13)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x5)*(x8)))+(((x10)*(x12)*(x5)*(x6)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x3))));
eetrans[2]=((((0.0289900000000000)*(x1)*(x5)*(x6)*(x8)))+(((-9.49949008344220e-11)*(x11)*(x12)*(x13)*(x4)*(x5)))+(((-2.77757644662202e-9)*(x1)*(x11)*(x13)*(x2)*(x5)*(x8)))+(((2.77757644662202e-9)*(x0)*(x3)*(x6)*(x7)*(x9)))+(((-9.49949008344220e-11)*(x1)*(x13)*(x3)*(x5)*(x9)))+(((2.77757644662202e-9)*(x1)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((-9.49949008344220e-11)*(x0)*(x10)*(x11)*(x3)))+(((2.77757644662202e-9)*(x1)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((-2.77757644662202e-9)*(x0)*(x11)*(x13)*(x2)*(x3)))+(((2.77757644662202e-9)*(x12)*(x13)*(x2)*(x5)*(x6)))+(((-0.261080000000000)*(x1)*(x11)*(x5)*(x8)))+(((-9.49949008344220e-11)*(x0)*(x13)*(x3)*(x4)*(x6)))+(((9.49949008344220e-11)*(x10)*(x12)*(x5)*(x6)))+(((0.261080000000000)*(x12)*(x5)*(x6)))+(((-9.49949008344220e-11)*(x1)*(x10)*(x11)*(x5)*(x8)))+(((-2.77757644662202e-9)*(x1)*(x3)*(x4)*(x5)*(x7)))+(((2.77757644662202e-9)*(x10)*(x11)*(x12)*(x2)*(x4)*(x5)))+(((2.77757644662202e-9)*(x0)*(x10)*(x2)*(x3)*(x4)*(x6)))+(((-0.261080000000000)*(x0)*(x11)*(x3)))+(((2.77757644662202e-9)*(x0)*(x4)*(x7)*(x8)))+(((2.77757644662202e-9)*(x1)*(x10)*(x2)*(x3)*(x5)*(x9)))+(((-9.49949008344220e-11)*(x1)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((0.0289900000000000)*(x0)*(x3)*(x6)))+(((2.77757644662202e-9)*(x11)*(x12)*(x5)*(x7)*(x9)))+(((0.0289900000000000)*(x11)*(x12)*(x5)))+(((-2.77757644662202e-9)*(x0)*(x10)*(x2)*(x8)*(x9)))+(((0.289820000000000)*(x12)*(x5)))+(((-0.0290000000000000)*(x1)*(x5)*(x8)))+(((-0.0290000000000000)*(x0)*(x3)))+(((9.49949008344220e-11)*(x0)*(x13)*(x8)*(x9))));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j0, cj0, sj0,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.0290000000000000)+(((-2.77757644662202e-9)*(r00)))+(px)+(((-9.49949008344220e-11)*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.0930000000000000)+(((-2.77757644662202e-9)*(r10)))+(py)+(((-9.49949008344220e-11)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((-2.77757644662202e-9)*(r20)))+(((-9.49949008344220e-11)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=(pz)*(pz);
IKReal x1=((6.53497184281647)*(x0));
IKReal x2=(py)*(py);
IKReal x3=((6.53497184281647)*(x2));
IKReal x4=(px)*(px);
IKReal x5=((6.53497184281647)*(x4));
IKReal x6=((-1.00533888481549)+(x3)+(x1)+(x5));
if( (x6) < -1.0001 || (x6) > 1.0001 )
    continue;
IKReal x7=IKasin(x6);
j3array[0]=((-0.210315898568178)+(x7));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.93127675502162)+(((-1.00000000000000)*(x7))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
if( j3array[1] > IKPI )
    j3array[1]-=IK2PI;
else if( j3array[1] < -IKPI )
    j3array[1]+=IK2PI;
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x8=((cj0)*(px));
IKReal x9=((pz)*(sj0));
IKReal x10=((x8)+(((-1.00000000000000)*(x9))));
IKReal x11=x2;
IKReal x12=(x10)*(x10);
IKReal x13=((x11)+(x12));
if( (x13) < (IKReal)-0.00001 )
    continue;
IKReal x14=IKsqrt(x13);
IKReal x15=IKabs(x14);
IKReal x16=((IKabs(x15) != 0)?((IKReal)1/(x15)):(IKReal)1.0e30);
IKReal x17=((0.261080000000000)*(sj3));
IKReal x18=((0.0289900000000000)*(cj3));
IKReal x19=((0.289820000000000)+(x17)+(x18));
IKReal x20=((x16)*(x19));
if( (x20) < -1.0001 || (x20) > 1.0001 )
    continue;
IKReal x21=IKasin(x20);
IKReal x22=((-1.00000000000000)*(py));
IKReal x23=IKatan2(x22, x10);
j1array[0]=((((-1.00000000000000)*(x23)))+(((-1.00000000000000)*(x21))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x23)))+(x21));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
if( j1array[1] > IKPI )
    j1array[1]-=IK2PI;
else if( j1array[1] < -IKPI )
    j1array[1]+=IK2PI;
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
    j1valid[1]=false;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal j2eval[1];
j2eval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
j2eval[1]=((((-0.0289900000000000)*(sj1)*(sj3)))+(((0.0290000000000000)*(sj1)))+(((0.261080000000000)*(cj3)*(sj1))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
j2eval[1]=((((0.0290000000000000)*(cj1)))+(((0.261080000000000)*(cj1)*(cj3)))+(((-0.0289900000000000)*(cj1)*(sj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x24=x4;
IKReal x25=x2;
IKReal x26=x0;
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.000826051437457690)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x25)))+(((-1.00000000000000)*(x24))));
evalcond[2]=((0.0287411105814949)+(((-1.00000000000000)*(cj1)*(py)))+(((-1.00000000000000)*(pz)*(sj0)*(sj1)))+(((cj0)*(px)*(sj1))));
evalcond[3]=((0.000826051437457720)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x25)))+(((-1.00000000000000)*(x24)))+(((-2.58001953663997e-18)*((cj0)*(cj0)))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
IKReal x27=(cj0)*(cj0);
IKReal x28=(cj1)*(cj1);
IKReal x29=x0;
IKReal x30=x4;
IKReal x31=(sj0)*(sj0);
j2eval[0]=((((-0.219410113824852)*(x30)*(x31)))+(((-0.219410113824852)*((py)*(py))*((sj1)*(sj1))))+(((-0.219410113824852)*(x27)*(x29)))+(((0.438820227649703)*(cj0)*(px)*(pz)*(sj0)*(x28)))+(((-0.219410113824852)*(x28)*(x29)*(x31)))+(((-0.219410113824852)*(x27)*(x28)*(x30)))+(((0.438820227649703)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((-0.438820227649703)*(cj0)*(cj1)*(px)*(py)*(sj1)))+(((-0.438820227649703)*(cj0)*(px)*(pz)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x32=(cj0)*(cj0);
IKReal x33=x4;
IKReal x34=(cj1)*(cj1);
IKReal x35=x0;
IKReal x36=(sj0)*(sj0);
j2eval[0]=((((0.975632718778622)*((py)*(py))*((sj1)*(sj1))))+(((1.95126543755724)*(cj0)*(cj1)*(px)*(py)*(sj1)))+(((-1.95126543755724)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((0.975632718778622)*(x33)*(x36)))+(((0.975632718778622)*(x34)*(x35)*(x36)))+(((0.975632718778622)*(x32)*(x35)))+(((1.95126543755724)*(cj0)*(px)*(pz)*(sj0)))+(((0.975632718778622)*(x32)*(x33)*(x34)))+(((-1.95126543755724)*(cj0)*(px)*(pz)*(sj0)*(x34))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x37=(cj1)*(cj1);
IKReal x38=x0;
IKReal x39=(sj0)*(sj0);
IKReal x40=(cj0)*(cj0);
IKReal x41=x4;
j2eval[0]=((((-0.0580000000000000)*(x39)*(x41)))+(((0.116000000000000)*(cj0)*(px)*(pz)*(sj0)*(x37)))+(((-0.116000000000000)*(cj0)*(cj1)*(px)*(py)*(sj1)))+(((-0.0580000000000000)*(x38)*(x40)))+(((0.116000000000000)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((-0.116000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-0.0580000000000000)*(x37)*(x40)*(x41)))+(((-0.0580000000000000)*((py)*(py))*((sj1)*(sj1))))+(((-0.0580000000000000)*(x37)*(x38)*(x39))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x42=x0;
IKReal x43=(cj1)*(cj1);
IKReal x44=x2;
IKReal x45=x4;
IKReal x46=(sj0)*(sj0);
IKReal x47=(cj0)*(cj0);
IKReal x48=((0.0580000000000000)*(x42)*(x47));
IKReal x49=((0.0580000000000000)*(x42)*(x43)*(x46));
IKReal x50=((0.116000000000000)*(cj0)*(cj1)*(px)*(py)*(sj1));
IKReal x51=(sj1)*(sj1);
IKReal x52=((0.0580000000000000)*(x44)*(x51));
IKReal x53=((0.0580000000000000)*(x45)*(x46));
IKReal x54=((0.0580000000000000)*(x43)*(x45)*(x47));
IKReal x55=((0.116000000000000)*(cj0)*(px)*(pz)*(sj0));
IKReal x56=((x48)+(x49)+(x55)+(x54)+(x50)+(x53)+(x52));
IKReal x57=((1.00000000000000)*(x43)*(x55));
IKReal x58=((0.116000000000000)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x59=((x58)+(x57));
IKReal x60=((0.579640000000000)*(cj1)*(py));
IKReal x61=((0.579640000000000)*(pz)*(sj0)*(sj1));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((x59)+(((-1.00000000000000)*(x56))))) != 0)?((IKReal)1/(((x59)+(((-1.00000000000000)*(x56)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(((0.579640000000000)*(cj0)*(px)*(sj1)))+(x44)+(x45)+(x42)+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))))), ((((IKabs(((x56)+(((-1.00000000000000)*(x59))))) != 0)?((IKReal)1/(((x56)+(((-1.00000000000000)*(x59)))))):(IKReal)1.0e30))*(((((cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(pz)*(sj0)))+(((py)*(sj1)))))*(((0.0158334459000000)+(((0.579640000000000)*(cj0)*(px)*(sj1)))+(x44)+(x45)+(x42)+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x101=(cj0)*(cj0);
IKReal x102=x4;
IKReal x103=(cj1)*(cj1);
IKReal x104=x0;
IKReal x105=(sj0)*(sj0);
IKReal x106=((1.95126543755724)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x107=((1.95126543755724)*(cj0)*(px)*(pz)*(sj0)*(x103));
IKReal x108=((x106)+(x107));
IKReal x109=((0.975632718778622)*(x101)*(x102)*(x103));
IKReal x110=x2;
IKReal x111=(sj1)*(sj1);
IKReal x112=((0.975632718778622)*(x110)*(x111));
IKReal x113=((1.95126543755724)*(cj0)*(cj1)*(px)*(py)*(sj1));
IKReal x114=((0.975632718778622)*(x101)*(x104));
IKReal x115=((0.975632718778622)*(x102)*(x105));
IKReal x116=((0.975632718778622)*(x103)*(x104)*(x105));
IKReal x117=((1.95126543755724)*(cj0)*(px)*(pz)*(sj0));
IKReal x118=((x113)+(x112)+(x117)+(x116)+(x115)+(x114)+(x109));
IKReal x119=((0.219410113824852)*(cj1)*(py));
IKReal x120=((0.219410113824852)*(pz)*(sj0)*(sj1));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x108)))+(x118))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x108)))+(x118)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.00630609034413843)+(((0.219410113824852)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x120)))))), ((((IKabs(((((-1.00000000000000)*(x118)))+(x108))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x118)))+(x108)))):(IKReal)1.0e30))*(((((cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(pz)*(sj0)))+(((py)*(sj1)))))*(((0.00630609034413843)+(((0.219410113824852)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x120)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x121=(cj0)*(cj0);
IKReal x122=(cj1)*(cj1);
IKReal x123=x0;
IKReal x124=x4;
IKReal x125=(sj0)*(sj0);
IKReal x126=((0.438820227649703)*(cj0)*(px)*(pz)*(sj0));
IKReal x127=x2;
IKReal x128=(sj1)*(sj1);
IKReal x129=((0.219410113824852)*(x127)*(x128));
IKReal x130=((0.219410113824852)*(x121)*(x123));
IKReal x131=((0.438820227649703)*(cj0)*(cj1)*(px)*(py)*(sj1));
IKReal x132=((0.219410113824852)*(x121)*(x122)*(x124));
IKReal x133=((0.219410113824852)*(x122)*(x123)*(x125));
IKReal x134=((0.219410113824852)*(x124)*(x125));
IKReal x135=((x134)+(x131)+(x130)+(x133)+(x132)+(x126)+(x129));
IKReal x136=((x122)*(x126));
IKReal x137=((0.438820227649703)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x138=((x137)+(x136));
IKReal x139=((0.975632718778622)*(cj1)*(py));
IKReal x140=((0.975632718778622)*(pz)*(sj0)*(sj1));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((x138)+(((-1.00000000000000)*(x135))))) != 0)?((IKReal)1/(((x138)+(((-1.00000000000000)*(x135)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0280407678573409)+(((-1.00000000000000)*(x140)))+(((0.975632718778622)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x139)))))), ((((IKabs(((x135)+(((-1.00000000000000)*(x138))))) != 0)?((IKReal)1/(((x135)+(((-1.00000000000000)*(x138)))))):(IKReal)1.0e30))*(((((cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(pz)*(sj0)))+(((py)*(sj1)))))*(((0.0280407678573409)+(((-1.00000000000000)*(x140)))+(((0.975632718778622)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x139)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x141=x4;
IKReal x142=x2;
IKReal x143=x0;
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.303489586362542)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141))));
evalcond[2]=((0.550898889418505)+(((-1.00000000000000)*(cj1)*(py)))+(((-1.00000000000000)*(pz)*(sj0)*(sj1)))+(((cj0)*(px)*(sj1))));
evalcond[3]=((0.303489586362542)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-2.71050542723722e-18)*((cj0)*(cj0)))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
IKReal x144=(cj1)*(cj1);
IKReal x145=(sj0)*(sj0);
IKReal x146=x4;
IKReal x147=(cj0)*(cj0);
IKReal x148=x0;
j2eval[0]=((((-3.83025174864983e-5)*(x147)*(x148)))+(((-3.83025174864983e-5)*(x145)*(x146)))+(((-3.83025174864983e-5)*((py)*(py))*((sj1)*(sj1))))+(((-3.83025174864983e-5)*(x144)*(x146)*(x147)))+(((-7.66050349729967e-5)*(cj0)*(cj1)*(px)*(py)*(sj1)))+(((-3.83025174864983e-5)*(x144)*(x145)*(x148)))+(((7.66050349729967e-5)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0)*(x144)))+(((-7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x149=(cj1)*(cj1);
IKReal x150=x0;
IKReal x151=(sj0)*(sj0);
IKReal x152=(cj0)*(cj0);
IKReal x153=x4;
j2eval[0]=((((-0.116000000000000)*(cj0)*(cj1)*(px)*(py)*(sj1)))+(((0.116000000000000)*(cj1)*(py)*(pz)*(sj0)*(sj1)))+(((0.116000000000000)*(cj0)*(px)*(pz)*(sj0)*(x149)))+(((-0.0580000000000000)*(x151)*(x153)))+(((-0.116000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-0.0580000000000000)*(x150)*(x152)))+(((-0.0580000000000000)*(x149)*(x150)*(x151)))+(((-0.0580000000000000)*((py)*(py))*((sj1)*(sj1))))+(((-0.0580000000000000)*(x149)*(x152)*(x153))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x154=x0;
IKReal x155=(cj1)*(cj1);
IKReal x156=x2;
IKReal x157=x4;
IKReal x158=(sj0)*(sj0);
IKReal x159=(cj0)*(cj0);
IKReal x160=((0.0580000000000000)*(x154)*(x159));
IKReal x161=((0.0580000000000000)*(x154)*(x155)*(x158));
IKReal x162=((0.116000000000000)*(cj0)*(cj1)*(px)*(py)*(sj1));
IKReal x163=(sj1)*(sj1);
IKReal x164=((0.0580000000000000)*(x156)*(x163));
IKReal x165=((0.0580000000000000)*(x157)*(x158));
IKReal x166=((0.0580000000000000)*(x155)*(x157)*(x159));
IKReal x167=((0.116000000000000)*(cj0)*(px)*(pz)*(sj0));
IKReal x168=((x162)+(x160)+(x161)+(x166)+(x167)+(x164)+(x165));
IKReal x169=((1.00000000000000)*(x155)*(x167));
IKReal x170=((0.116000000000000)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x171=((x170)+(x169));
IKReal x172=((0.579640000000000)*(cj1)*(py));
IKReal x173=((0.579640000000000)*(pz)*(sj0)*(sj1));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x168)))+(x171))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x168)))+(x171)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x173)))+(x157)+(x156)+(x154)+(((0.579640000000000)*(cj0)*(px)*(sj1)))))), ((((IKabs(((((-1.00000000000000)*(x171)))+(x168))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x171)))+(x168)))):(IKReal)1.0e30))*(((((cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(pz)*(sj0)))+(((py)*(sj1)))))*(((0.0158334459000000)+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x173)))+(x157)+(x156)+(x154)+(((0.579640000000000)*(cj0)*(px)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x174=(cj1)*(cj1);
IKReal x175=(sj0)*(sj0);
IKReal x176=x4;
IKReal x177=(cj0)*(cj0);
IKReal x178=x0;
IKReal x179=((7.66050349729967e-5)*(cj0)*(cj1)*(px)*(py)*(sj1));
IKReal x180=((3.83025174864983e-5)*(x175)*(x176));
IKReal x181=((7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0));
IKReal x182=((3.83025174864983e-5)*(x174)*(x175)*(x178));
IKReal x183=x2;
IKReal x184=(sj1)*(sj1);
IKReal x185=((3.83025174864983e-5)*(x183)*(x184));
IKReal x186=((3.83025174864983e-5)*(x174)*(x176)*(x177));
IKReal x187=((3.83025174864983e-5)*(x177)*(x178));
IKReal x188=((x179)+(x185)+(x186)+(x187)+(x180)+(x181)+(x182));
IKReal x189=((x174)*(x181));
IKReal x190=((7.66050349729967e-5)*(cj1)*(py)*(pz)*(sj0)*(sj1));
IKReal x191=((x190)+(x189));
IKReal x192=((0.999999999266459)*(cj0)*(px)*(sj1));
IKReal x193=((0.550898889014398)+(x192));
IKReal x194=((0.999999999266459)*(pz)*(sj0)*(sj1));
IKReal x195=((0.999999999266459)*(cj1)*(py));
IKReal x196=((x195)+(x194));
IKReal x197=((((-1.00000000000000)*(x196)))+(x193));
j2array[0]=IKatan2(((x197)*(((IKabs(((((-1.00000000000000)*(x188)))+(x191))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x188)))+(x191)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((x197)*(((IKabs(((((-1.00000000000000)*(x191)))+(x188))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x191)))+(x188)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))+(((cj1)*(pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x198=x4;
IKReal x199=x2;
IKReal x200=x0;
IKReal x201=x9;
IKReal x202=x18;
IKReal x203=x17;
IKReal x204=x8;
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*(x198)))+(((-1.00000000000000)*(x199)))+(((-1.00000000000000)*(x200))));
evalcond[2]=((0.289820000000000)+(((-1.00000000000000)*(x201)))+(x204)+(x203)+(x202));
evalcond[3]=((0.153839818900000)+(((0.0319464036000000)*(cj3)))+(((-2.71050543121376e-18)*((cj0)*(cj0))*((sj3)*(sj3))))+(((0.149650991200000)*(sj3)))+(((-1.00000000000000)*(x198)))+(((-1.00000000000000)*(x199)))+(((-1.00000000000000)*(x200))));
evalcond[4]=((-0.289820000000000)+(((-1.00000000000000)*(x202)))+(((-1.00000000000000)*(x203)))+(((-1.00000000000000)*(x204)))+(x201));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((0.0289900000000000)*(py)*(sj3)))+(((-0.0290000000000000)*(py)))+(((-0.261080000000000)*(cj3)*(py))));
j2eval[1]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((-0.0289900000000000)*(px)*(sj0)*(sj3)))+(((0.261080000000000)*(cj0)*(cj3)*(pz)))+(((-0.0289900000000000)*(cj0)*(pz)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((0.0290000000000000)*(cj0)*(pz)))+(((0.261080000000000)*(cj3)*(px)*(sj0))));
j2eval[1]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x205=x4;
IKReal x206=x2;
IKReal x207=x0;
IKReal x208=x9;
IKReal x209=x8;
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.000826051437457690)+(((-1.00000000000000)*(x205)))+(((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x207))));
evalcond[2]=((0.0287411105814949)+(((-1.00000000000000)*(x208)))+(x209));
evalcond[3]=((0.000826051437457720)+(((-1.00000000000000)*(x205)))+(((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x207)))+(((-2.58001953663997e-18)*((cj0)*(cj0)))));
evalcond[4]=((-0.0287411105814949)+(((-1.00000000000000)*(x209)))+(x208));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.219410113824852)*((cj0)*(cj0))*((pz)*(pz))))+(((-0.219410113824852)*((py)*(py))))+(((-0.438820227649703)*(cj0)*(px)*(pz)*(sj0)))+(((-0.219410113824852)*((px)*(px))*((sj0)*(sj0)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((0.975632718778622)*((cj0)*(cj0))*((pz)*(pz))))+(((0.975632718778622)*((py)*(py))))+(((0.975632718778622)*((px)*(px))*((sj0)*(sj0))))+(((1.95126543755724)*(cj0)*(px)*(pz)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0580000000000000)*((px)*(px))*((sj0)*(sj0))))+(((-0.0580000000000000)*((py)*(py))))+(((-0.116000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-0.0580000000000000)*((cj0)*(cj0))*((pz)*(pz)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x210=x0;
IKReal x211=x2;
IKReal x212=x4;
IKReal x213=(cj0)*(cj0);
IKReal x214=((0.0580000000000000)*(x210)*(x213));
IKReal x215=((0.0580000000000000)*(x211));
IKReal x216=(sj0)*(sj0);
IKReal x217=((0.0580000000000000)*(x212)*(x216));
IKReal x218=((0.116000000000000)*(cj0)*(px)*(pz)*(sj0));
IKReal x219=((x214)+(x215)+(x217)+(x218));
IKReal x220=((0.579640000000000)*(pz)*(sj0));
j2array[0]=IKatan2(((((IKabs(x219) != 0)?((IKReal)1/(x219)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(((0.579640000000000)*(cj0)*(px)))+(x210)+(x211)+(x212)+(((-1.00000000000000)*(x220)))))), ((py)*(((IKabs(x219) != 0)?((IKReal)1/(x219)):(IKReal)1.0e30))*(((0.0158334459000000)+(((0.579640000000000)*(cj0)*(px)))+(x210)+(x211)+(x212)+(((-1.00000000000000)*(x220)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x221=(cj0)*(cj0);
IKReal x222=x0;
IKReal x223=((0.975632718778622)*(x221)*(x222));
IKReal x224=x2;
IKReal x225=((0.975632718778622)*(x224));
IKReal x226=x4;
IKReal x227=(sj0)*(sj0);
IKReal x228=((0.975632718778622)*(x226)*(x227));
IKReal x229=((1.95126543755724)*(cj0)*(px)*(pz)*(sj0));
IKReal x230=((x229)+(x228)+(x223)+(x225));
IKReal x231=((0.219410113824852)*(cj0)*(px));
IKReal x232=((0.00630609034413843)+(x231));
IKReal x233=((0.219410113824852)*(pz)*(sj0));
IKReal x234=((((-1.00000000000000)*(x233)))+(x232));
j2array[0]=IKatan2(((-1.00000000000000)*(x234)*(((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((-1.00000000000000)*(py)*(x234)*(((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x235=((0.438820227649703)*(cj0)*(px)*(pz)*(sj0));
IKReal x236=x2;
IKReal x237=((0.219410113824852)*(x236));
IKReal x238=(cj0)*(cj0);
IKReal x239=x0;
IKReal x240=((0.219410113824852)*(x238)*(x239));
IKReal x241=x4;
IKReal x242=(sj0)*(sj0);
IKReal x243=((0.219410113824852)*(x241)*(x242));
IKReal x244=((x237)+(x235)+(x243)+(x240));
IKReal x245=((0.975632718778622)*(pz)*(sj0));
j2array[0]=IKatan2(((((IKabs(x244) != 0)?((IKReal)1/(x244)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0280407678573409)+(((0.975632718778622)*(cj0)*(px)))+(((-1.00000000000000)*(x245)))))), ((py)*(((IKabs(x244) != 0)?((IKReal)1/(x244)):(IKReal)1.0e30))*(((0.0280407678573409)+(((0.975632718778622)*(cj0)*(px)))+(((-1.00000000000000)*(x245)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x246=x4;
IKReal x247=x2;
IKReal x248=x0;
IKReal x249=x9;
IKReal x250=x8;
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.303489586362542)+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248))));
evalcond[2]=((0.550898889418505)+(x250)+(((-1.00000000000000)*(x249))));
evalcond[3]=((0.303489586362542)+(((-2.71050542723722e-18)*((cj0)*(cj0))))+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248))));
evalcond[4]=((-0.550898889418505)+(x249)+(((-1.00000000000000)*(x250))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-3.83025174864983e-5)*((cj0)*(cj0))*((pz)*(pz))))+(((-3.83025174864983e-5)*((px)*(px))*((sj0)*(sj0))))+(((-3.83025174864983e-5)*((py)*(py))))+(((-7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0580000000000000)*((px)*(px))*((sj0)*(sj0))))+(((-0.0580000000000000)*((py)*(py))))+(((-0.116000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-0.0580000000000000)*((cj0)*(cj0))*((pz)*(pz)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x251=x0;
IKReal x252=x2;
IKReal x253=x4;
IKReal x254=(cj0)*(cj0);
IKReal x255=((0.0580000000000000)*(x251)*(x254));
IKReal x256=((0.0580000000000000)*(x252));
IKReal x257=(sj0)*(sj0);
IKReal x258=((0.0580000000000000)*(x253)*(x257));
IKReal x259=((0.116000000000000)*(cj0)*(px)*(pz)*(sj0));
IKReal x260=((x258)+(x259)+(x255)+(x256));
IKReal x261=((0.579640000000000)*(pz)*(sj0));
j2array[0]=IKatan2(((((IKabs(x260) != 0)?((IKReal)1/(x260)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(((0.579640000000000)*(cj0)*(px)))+(x251)+(x252)+(x253)+(((-1.00000000000000)*(x261)))))), ((py)*(((IKabs(x260) != 0)?((IKReal)1/(x260)):(IKReal)1.0e30))*(((0.0158334459000000)+(((0.579640000000000)*(cj0)*(px)))+(x251)+(x252)+(x253)+(((-1.00000000000000)*(x261)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x262=x4;
IKReal x263=(sj0)*(sj0);
IKReal x264=((3.83025174864983e-5)*(x262)*(x263));
IKReal x265=((7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0));
IKReal x266=x2;
IKReal x267=((3.83025174864983e-5)*(x266));
IKReal x268=(cj0)*(cj0);
IKReal x269=x0;
IKReal x270=((3.83025174864983e-5)*(x268)*(x269));
IKReal x271=((x265)+(x264)+(x267)+(x270));
IKReal x272=((0.999999999266459)*(cj0)*(px));
IKReal x273=((0.550898889014398)+(x272));
IKReal x274=((0.999999999266459)*(pz)*(sj0));
IKReal x275=((x273)+(((-1.00000000000000)*(x274))));
j2array[0]=IKatan2(((-1.00000000000000)*(x275)*(((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((-1.00000000000000)*(py)*(x275)*(((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x276=((0.261080000000000)*(cj3));
IKReal x277=((0.0290000000000000)+(x276));
IKReal x278=((0.0289900000000000)*(sj3));
IKReal x279=((x277)+(((-1.00000000000000)*(x278))));
j2array[0]=IKatan2(((((IKabs(((((px)*(sj0)*(x276)))+(((cj0)*(pz)*(x276)))+(((0.0290000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(x278)))+(((0.0290000000000000)*(cj0)*(pz)))+(((-1.00000000000000)*(px)*(sj0)*(x278))))) != 0)?((IKReal)1/(((((px)*(sj0)*(x276)))+(((cj0)*(pz)*(x276)))+(((0.0290000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(x278)))+(((0.0290000000000000)*(cj0)*(pz)))+(((-1.00000000000000)*(px)*(sj0)*(x278)))))):(IKReal)1.0e30))*((((py)*(py))+(((-1.00000000000000)*((x279)*(x279))))))), ((py)*(((IKabs(x279) != 0)?((IKReal)1/(x279)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1.00000000000000)*(py)*(((IKabs(((((0.0289900000000000)*(py)*(sj3)))+(((-0.0290000000000000)*(py)))+(((-0.261080000000000)*(cj3)*(py))))) != 0)?((IKReal)1/(((((0.0289900000000000)*(py)*(sj3)))+(((-0.0290000000000000)*(py)))+(((-0.261080000000000)*(cj3)*(py)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((py)*(((IKabs(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x280=((0.261080000000000)*(cj3));
IKReal x281=((0.0290000000000000)+(x280));
IKReal x282=((0.0289900000000000)*(sj3));
IKReal x283=((x281)+(((-1.00000000000000)*(x282))));
IKReal x284=((IKabs(x283) != 0)?((IKReal)1/(x283)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x284)*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((py)*(x284)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x285=x4;
IKReal x286=x2;
IKReal x287=x0;
IKReal x288=x18;
IKReal x289=x17;
IKReal x290=x9;
IKReal x291=((0.289820000000000)+(x290)+(x289)+(x288));
IKReal x292=x8;
IKReal x293=((((-1.00000000000000)*(x292)))+(x291));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(x287))));
evalcond[2]=x293;
evalcond[3]=((0.153839818900000)+(((0.0319464036000000)*(cj3)))+(((-2.71050543121376e-18)*((cj0)*(cj0))*((sj3)*(sj3))))+(((0.149650991200000)*(sj3)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(x287))));
evalcond[4]=x293;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((0.261080000000000)*(cj3)*(py)))+(((0.0290000000000000)*(py)))+(((-0.0289900000000000)*(py)*(sj3))));
j2eval[1]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((-0.0289900000000000)*(px)*(sj0)*(sj3)))+(((0.261080000000000)*(cj0)*(cj3)*(pz)))+(((-0.0289900000000000)*(cj0)*(pz)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((0.0290000000000000)*(cj0)*(pz)))+(((0.261080000000000)*(cj3)*(px)*(sj0))));
j2eval[1]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x294=x4;
IKReal x295=x2;
IKReal x296=x0;
IKReal x297=x9;
IKReal x298=((0.0287411105814949)+(x297));
IKReal x299=x8;
IKReal x300=((((-1.00000000000000)*(x299)))+(x298));
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.000826051437457690)+(((-1.00000000000000)*(x295)))+(((-1.00000000000000)*(x294)))+(((-1.00000000000000)*(x296))));
evalcond[2]=x300;
evalcond[3]=((0.000826051437457720)+(((-1.00000000000000)*(x295)))+(((-1.00000000000000)*(x294)))+(((-1.00000000000000)*(x296)))+(((-2.58001953663997e-18)*((cj0)*(cj0)))));
evalcond[4]=x300;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.219410113824852)*((cj0)*(cj0))*((pz)*(pz))))+(((-0.219410113824852)*((py)*(py))))+(((-0.438820227649703)*(cj0)*(px)*(pz)*(sj0)))+(((-0.219410113824852)*((px)*(px))*((sj0)*(sj0)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((0.975632718778622)*((cj0)*(cj0))*((pz)*(pz))))+(((0.975632718778622)*((py)*(py))))+(((0.975632718778622)*((px)*(px))*((sj0)*(sj0))))+(((1.95126543755724)*(cj0)*(px)*(pz)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0580000000000000)*((px)*(px))*((sj0)*(sj0))))+(((-0.0580000000000000)*((py)*(py))))+(((-0.116000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-0.0580000000000000)*((cj0)*(cj0))*((pz)*(pz)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x301=x0;
IKReal x302=x2;
IKReal x303=x4;
IKReal x304=(cj0)*(cj0);
IKReal x305=((0.0580000000000000)*(x301)*(x304));
IKReal x306=((0.0580000000000000)*(x302));
IKReal x307=(sj0)*(sj0);
IKReal x308=((0.0580000000000000)*(x303)*(x307));
IKReal x309=((0.116000000000000)*(cj0)*(px)*(pz)*(sj0));
IKReal x310=((x308)+(x309)+(x306)+(x305));
IKReal x311=((0.579640000000000)*(cj0)*(px));
j2array[0]=IKatan2(((((IKabs(x310) != 0)?((IKReal)1/(x310)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(x302)+(x303)+(x301)+(((-1.00000000000000)*(x311)))+(((0.579640000000000)*(pz)*(sj0)))))), ((-1.00000000000000)*(py)*(((IKabs(x310) != 0)?((IKReal)1/(x310)):(IKReal)1.0e30))*(((0.0158334459000000)+(x302)+(x303)+(x301)+(((-1.00000000000000)*(x311)))+(((0.579640000000000)*(pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x312=(cj0)*(cj0);
IKReal x313=x0;
IKReal x314=((0.975632718778622)*(x312)*(x313));
IKReal x315=x2;
IKReal x316=((0.975632718778622)*(x315));
IKReal x317=x4;
IKReal x318=(sj0)*(sj0);
IKReal x319=((0.975632718778622)*(x317)*(x318));
IKReal x320=((1.95126543755724)*(cj0)*(px)*(pz)*(sj0));
IKReal x321=((x320)+(x319)+(x314)+(x316));
IKReal x322=((0.219410113824852)*(pz)*(sj0));
IKReal x323=((0.00630609034413843)+(x322));
IKReal x324=((0.219410113824852)*(cj0)*(px));
IKReal x325=((((-1.00000000000000)*(x324)))+(x323));
j2array[0]=IKatan2(((-1.00000000000000)*(x325)*(((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((py)*(x325)*(((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x326=((0.438820227649703)*(cj0)*(px)*(pz)*(sj0));
IKReal x327=x2;
IKReal x328=((0.219410113824852)*(x327));
IKReal x329=(cj0)*(cj0);
IKReal x330=x0;
IKReal x331=((0.219410113824852)*(x329)*(x330));
IKReal x332=x4;
IKReal x333=(sj0)*(sj0);
IKReal x334=((0.219410113824852)*(x332)*(x333));
IKReal x335=((x331)+(x334)+(x326)+(x328));
IKReal x336=((0.975632718778622)*(cj0)*(px));
j2array[0]=IKatan2(((((IKabs(x335) != 0)?((IKReal)1/(x335)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0280407678573409)+(((-1.00000000000000)*(x336)))+(((0.975632718778622)*(pz)*(sj0)))))), ((-1.00000000000000)*(py)*(((IKabs(x335) != 0)?((IKReal)1/(x335)):(IKReal)1.0e30))*(((0.0280407678573409)+(((-1.00000000000000)*(x336)))+(((0.975632718778622)*(pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x337=x4;
IKReal x338=x2;
IKReal x339=x0;
IKReal x340=x9;
IKReal x341=((0.550898889418505)+(x340));
IKReal x342=x8;
IKReal x343=((x341)+(((-1.00000000000000)*(x342))));
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.303489586362542)+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x337))));
evalcond[2]=x343;
evalcond[3]=((0.303489586362542)+(((-2.71050542723722e-18)*((cj0)*(cj0))))+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x337))));
evalcond[4]=x343;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-3.83025174864983e-5)*((cj0)*(cj0))*((pz)*(pz))))+(((-3.83025174864983e-5)*((px)*(px))*((sj0)*(sj0))))+(((-3.83025174864983e-5)*((py)*(py))))+(((-7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0580000000000000)*((px)*(px))*((sj0)*(sj0))))+(((-0.0580000000000000)*((py)*(py))))+(((-0.116000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-0.0580000000000000)*((cj0)*(cj0))*((pz)*(pz)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x344=x0;
IKReal x345=x2;
IKReal x346=x4;
IKReal x347=(cj0)*(cj0);
IKReal x348=((0.0580000000000000)*(x344)*(x347));
IKReal x349=((0.0580000000000000)*(x345));
IKReal x350=(sj0)*(sj0);
IKReal x351=((0.0580000000000000)*(x346)*(x350));
IKReal x352=((0.116000000000000)*(cj0)*(px)*(pz)*(sj0));
IKReal x353=((x351)+(x352)+(x348)+(x349));
IKReal x354=((0.579640000000000)*(cj0)*(px));
j2array[0]=IKatan2(((((IKabs(x353) != 0)?((IKReal)1/(x353)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(((-1.00000000000000)*(x354)))+(x346)+(x344)+(x345)+(((0.579640000000000)*(pz)*(sj0)))))), ((-1.00000000000000)*(py)*(((IKabs(x353) != 0)?((IKReal)1/(x353)):(IKReal)1.0e30))*(((0.0158334459000000)+(((-1.00000000000000)*(x354)))+(x346)+(x344)+(x345)+(((0.579640000000000)*(pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x355=x4;
IKReal x356=(sj0)*(sj0);
IKReal x357=((3.83025174864983e-5)*(x355)*(x356));
IKReal x358=((7.66050349729967e-5)*(cj0)*(px)*(pz)*(sj0));
IKReal x359=x2;
IKReal x360=((3.83025174864983e-5)*(x359));
IKReal x361=(cj0)*(cj0);
IKReal x362=x0;
IKReal x363=((3.83025174864983e-5)*(x361)*(x362));
IKReal x364=((x357)+(x358)+(x360)+(x363));
IKReal x365=((0.999999999266459)*(pz)*(sj0));
IKReal x366=((0.550898889014398)+(x365));
IKReal x367=((0.999999999266459)*(cj0)*(px));
IKReal x368=((((-1.00000000000000)*(x367)))+(x366));
j2array[0]=IKatan2(((-1.00000000000000)*(x368)*(((IKabs(x364) != 0)?((IKReal)1/(x364)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((py)*(x368)*(((IKabs(x364) != 0)?((IKReal)1/(x364)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x369=((0.261080000000000)*(cj3));
IKReal x370=((0.0290000000000000)+(x369));
IKReal x371=((0.0289900000000000)*(sj3));
IKReal x372=((((-1.00000000000000)*(x371)))+(x370));
j2array[0]=IKatan2(((((IKabs(((((0.0290000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(px)*(sj0)*(x371)))+(((0.0290000000000000)*(cj0)*(pz)))+(((-1.00000000000000)*(cj0)*(pz)*(x371)))+(((px)*(sj0)*(x369)))+(((cj0)*(pz)*(x369))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(px)*(sj0)*(x371)))+(((0.0290000000000000)*(cj0)*(pz)))+(((-1.00000000000000)*(cj0)*(pz)*(x371)))+(((px)*(sj0)*(x369)))+(((cj0)*(pz)*(x369)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*((x372)*(x372))))+((py)*(py))))), ((-1.00000000000000)*(py)*(((IKabs(x372) != 0)?((IKReal)1/(x372)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((py)*(((IKabs(((((0.261080000000000)*(cj3)*(py)))+(((0.0290000000000000)*(py)))+(((-0.0289900000000000)*(py)*(sj3))))) != 0)?((IKReal)1/(((((0.261080000000000)*(cj3)*(py)))+(((0.0290000000000000)*(py)))+(((-0.0289900000000000)*(py)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((-1.00000000000000)*(py)*(((IKabs(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x373=((0.261080000000000)*(cj3));
IKReal x374=((0.0290000000000000)+(x373));
IKReal x375=((0.0289900000000000)*(sj3));
IKReal x376=((((-1.00000000000000)*(x375)))+(x374));
IKReal x377=((IKabs(x376) != 0)?((IKReal)1/(x376)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x377)*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((-1.00000000000000)*(py)*(x377)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x378=x4;
IKReal x379=x2;
IKReal x380=x0;
IKReal x381=x18;
IKReal x382=x17;
IKReal x383=((0.289820000000000)+(x382)+(x381));
IKReal x384=((x383)+(((-1.00000000000000)*(py))));
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*(x379)))+(((-1.00000000000000)*(x378)))+(((-1.00000000000000)*(x380))));
evalcond[2]=x384;
evalcond[3]=((0.153839818900000)+(((0.0319464036000000)*(cj3)))+(((-2.71050543121376e-18)*((cj0)*(cj0))*((sj3)*(sj3))))+(((0.149650991200000)*(sj3)))+(((-1.00000000000000)*(x379)))+(((-1.00000000000000)*(x378)))+(((-1.00000000000000)*(x380))));
evalcond[4]=x384;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((-0.0289900000000000)*(pz)*(sj0)*(sj3)))+(((-0.0290000000000000)*(cj0)*(px)))+(((-0.261080000000000)*(cj0)*(cj3)*(px)))+(((0.261080000000000)*(cj3)*(pz)*(sj0)))+(((0.0289900000000000)*(cj0)*(px)*(sj3)))+(((0.0290000000000000)*(pz)*(sj0))));
j2eval[1]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
j2eval[1]=((((-0.0289900000000000)*(px)*(sj0)*(sj3)))+(((0.261080000000000)*(cj0)*(cj3)*(pz)))+(((-0.0289900000000000)*(cj0)*(pz)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((0.0290000000000000)*(cj0)*(pz)))+(((0.261080000000000)*(cj3)*(px)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x385=x4;
IKReal x386=x2;
IKReal x387=x0;
IKReal x388=((0.0287411105814949)+(((-1.00000000000000)*(py))));
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.000826051437457690)+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x387)))+(((-1.00000000000000)*(x386))));
evalcond[2]=x388;
evalcond[3]=((0.000826051437457720)+(((-2.58001953663997e-18)*((cj0)*(cj0))))+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x387)))+(((-1.00000000000000)*(x386))));
evalcond[4]=x388;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
IKReal x389=(cj0)*(cj0);
IKReal x390=x0;
IKReal x391=x4;
IKReal x392=(sj0)*(sj0);
j2eval[0]=((((-0.219410113824852)*(x390)*(x392)))+(((-0.219410113824852)*(x391)*(x392)))+(((-0.219410113824852)*(x389)*(x390)))+(((-0.219410113824852)*(x389)*(x391))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x393=x0;
IKReal x394=(sj0)*(sj0);
IKReal x395=(cj0)*(cj0);
IKReal x396=x4;
j2eval[0]=((((0.975632718778622)*(x394)*(x396)))+(((0.975632718778622)*(x395)*(x396)))+(((0.975632718778622)*(x393)*(x395)))+(((0.975632718778622)*(x393)*(x394))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x397=(cj0)*(cj0);
IKReal x398=x4;
IKReal x399=x0;
IKReal x400=(sj0)*(sj0);
j2eval[0]=((((-0.0580000000000000)*(x399)*(x400)))+(((-0.0580000000000000)*(x397)*(x399)))+(((-0.0580000000000000)*(x397)*(x398)))+(((-0.0580000000000000)*(x398)*(x400))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x401=x0;
IKReal x402=(cj0)*(cj0);
IKReal x403=x4;
IKReal x404=(sj0)*(sj0);
IKReal x405=((0.0580000000000000)*(x401)*(x402));
IKReal x406=((0.0580000000000000)*(x402)*(x403));
IKReal x407=((0.0580000000000000)*(x403)*(x404));
IKReal x408=((0.0580000000000000)*(x401)*(x404));
IKReal x409=((x405)+(x407)+(x406)+(x408));
IKReal x410=x2;
IKReal x411=((0.579640000000000)*(py));
j2array[0]=IKatan2(((((IKabs(x409) != 0)?((IKReal)1/(x409)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(x401)+(x403)+(x410)+(((-1.00000000000000)*(x411)))))), ((-1.00000000000000)*(((IKabs(x409) != 0)?((IKReal)1/(x409)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))*(((0.0158334459000000)+(x401)+(x403)+(x410)+(((-1.00000000000000)*(x411)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x412=x0;
IKReal x413=(sj0)*(sj0);
IKReal x414=(cj0)*(cj0);
IKReal x415=x4;
IKReal x416=((0.975632718778622)*(x412)*(x414));
IKReal x417=((0.975632718778622)*(x413)*(x415));
IKReal x418=((0.975632718778622)*(x412)*(x413));
IKReal x419=((0.975632718778622)*(x414)*(x415));
IKReal x420=((x416)+(x417)+(x418)+(x419));
IKReal x421=((0.219410113824852)*(py));
IKReal x422=((0.00630609034413843)+(((-1.00000000000000)*(x421))));
j2array[0]=IKatan2(((-1.00000000000000)*(x422)*(((IKabs(x420) != 0)?((IKReal)1/(x420)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((-1.00000000000000)*(x422)*(((IKabs(x420) != 0)?((IKReal)1/(x420)):(IKReal)1.0e30))*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x423=(cj0)*(cj0);
IKReal x424=x0;
IKReal x425=x4;
IKReal x426=(sj0)*(sj0);
IKReal x427=((0.219410113824852)*(x423)*(x424));
IKReal x428=((0.219410113824852)*(x423)*(x425));
IKReal x429=((0.219410113824852)*(x424)*(x426));
IKReal x430=((0.219410113824852)*(x425)*(x426));
IKReal x431=((x429)+(x428)+(x427)+(x430));
IKReal x432=((0.975632718778622)*(py));
IKReal x433=((0.0280407678573409)+(((-1.00000000000000)*(x432))));
j2array[0]=IKatan2(((-1.00000000000000)*(x433)*(((IKabs(x431) != 0)?((IKReal)1/(x431)):(IKReal)1.0e30))*(((((px)*(sj0)))+(((cj0)*(pz)))))), ((-1.00000000000000)*(x433)*(((IKabs(x431) != 0)?((IKReal)1/(x431)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x434=x4;
IKReal x435=x2;
IKReal x436=x0;
IKReal x437=((0.550898889418505)+(((-1.00000000000000)*(py))));
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.303489586362542)+(((-1.00000000000000)*(x436)))+(((-1.00000000000000)*(x435)))+(((-1.00000000000000)*(x434))));
evalcond[2]=x437;
evalcond[3]=((0.303489586362542)+(((-1.00000000000000)*(x436)))+(((-1.00000000000000)*(x435)))+(((-1.00000000000000)*(x434)))+(((-2.71050542723722e-18)*((cj0)*(cj0)))));
evalcond[4]=x437;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
IKReal x438=x4;
IKReal x439=(sj0)*(sj0);
IKReal x440=(cj0)*(cj0);
IKReal x441=x0;
j2eval[0]=((((-3.83025174864983e-5)*(x438)*(x439)))+(((-3.83025174864983e-5)*(x438)*(x440)))+(((-3.83025174864983e-5)*(x439)*(x441)))+(((-3.83025174864983e-5)*(x440)*(x441))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x442=x4;
IKReal x443=(sj0)*(sj0);
IKReal x444=(cj0)*(cj0);
IKReal x445=x0;
IKReal x446=((3.83025174864983e-5)*(x443)*(x445));
IKReal x447=((3.83025174864983e-5)*(x442)*(x444));
IKReal x448=((3.83025174864983e-5)*(x442)*(x443));
IKReal x449=((3.83025174864983e-5)*(x444)*(x445));
IKReal x450=((x449)+(x448)+(x447)+(x446));
IKReal x451=((0.999999999266459)*(py));
IKReal x452=((0.550898889014398)+(((-1.00000000000000)*(x451))));
j2array[0]=IKatan2(((-1.00000000000000)*(x452)*(((IKabs(x450) != 0)?((IKReal)1/(x450)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((x452)*(((IKabs(x450) != 0)?((IKReal)1/(x450)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x453=((px)*(sj0));
IKReal x454=((cj0)*(pz));
IKReal x455=((x454)+(x453));
IKReal x456=((-1.00000000000000)*(x455));
j2array[0]=IKatan2(((x456)*(((IKabs(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))):(IKReal)1.0e30))), ((x456)*(((IKabs(((((0.0290000000000000)*(x453)))+(((0.0290000000000000)*(x454)))+(((0.261080000000000)*(cj3)*(x454)))+(((0.261080000000000)*(cj3)*(x453)))+(((-0.0289900000000000)*(sj3)*(x453)))+(((-0.0289900000000000)*(sj3)*(x454))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(x453)))+(((0.0290000000000000)*(x454)))+(((0.261080000000000)*(cj3)*(x454)))+(((0.261080000000000)*(cj3)*(x453)))+(((-0.0289900000000000)*(sj3)*(x453)))+(((-0.0289900000000000)*(sj3)*(x454)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x457=x8;
IKReal x458=x9;
j2array[0]=IKatan2(((((IKabs(((((0.0290000000000000)*(x458)))+(((0.261080000000000)*(cj3)*(x458)))+(((-0.0289900000000000)*(sj3)*(x458)))+(((-0.0290000000000000)*(x457)))+(((-0.261080000000000)*(cj3)*(x457)))+(((0.0289900000000000)*(sj3)*(x457))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(x458)))+(((0.261080000000000)*(cj3)*(x458)))+(((-0.0289900000000000)*(sj3)*(x458)))+(((-0.0290000000000000)*(x457)))+(((-0.261080000000000)*(cj3)*(x457)))+(((0.0289900000000000)*(sj3)*(x457)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x457)))+(x458)))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((((IKabs(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x458)))+(x457)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x459=((0.261080000000000)*(cj3));
IKReal x460=((0.0290000000000000)+(x459));
IKReal x461=((0.0289900000000000)*(sj3));
IKReal x462=((((-1.00000000000000)*(x461)))+(x460));
IKReal x463=((IKabs(x462) != 0)?((IKReal)1/(x462)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x463)*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((x463)*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x464=x4;
IKReal x465=x2;
IKReal x466=x0;
IKReal x467=x18;
IKReal x468=x17;
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*(x465)))+(((-1.00000000000000)*(x466)))+(((-1.00000000000000)*(x464))));
evalcond[2]=((0.289820000000000)+(x468)+(x467)+(py));
evalcond[3]=((0.153839818900000)+(((0.0319464036000000)*(cj3)))+(((-2.71050543121376e-18)*((cj0)*(cj0))*((sj3)*(sj3))))+(((0.149650991200000)*(sj3)))+(((-1.00000000000000)*(x465)))+(((-1.00000000000000)*(x466)))+(((-1.00000000000000)*(x464))));
evalcond[4]=((-0.289820000000000)+(((-1.00000000000000)*(x468)))+(((-1.00000000000000)*(x467)))+(((-1.00000000000000)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((0.261080000000000)*(cj0)*(cj3)*(px)))+(((-0.0290000000000000)*(pz)*(sj0)))+(((0.0290000000000000)*(cj0)*(px)))+(((-0.261080000000000)*(cj3)*(pz)*(sj0)))+(((-0.0289900000000000)*(cj0)*(px)*(sj3)))+(((0.0289900000000000)*(pz)*(sj0)*(sj3))));
j2eval[1]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))));
j2eval[1]=((((-0.0289900000000000)*(px)*(sj0)*(sj3)))+(((0.261080000000000)*(cj0)*(cj3)*(pz)))+(((-0.0289900000000000)*(cj0)*(pz)*(sj3)))+(((0.0290000000000000)*(px)*(sj0)))+(((0.0290000000000000)*(cj0)*(pz)))+(((0.261080000000000)*(cj3)*(px)*(sj0))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x469=x4;
IKReal x470=x2;
IKReal x471=x0;
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.000826051437457690)+(((-1.00000000000000)*(x471)))+(((-1.00000000000000)*(x470)))+(((-1.00000000000000)*(x469))));
evalcond[2]=((0.0287411105814949)+(py));
evalcond[3]=((0.000826051437457720)+(((-1.00000000000000)*(x471)))+(((-1.00000000000000)*(x470)))+(((-1.00000000000000)*(x469)))+(((-2.58001953663997e-18)*((cj0)*(cj0)))));
evalcond[4]=((-0.0287411105814949)+(((-1.00000000000000)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
IKReal x472=(cj0)*(cj0);
IKReal x473=x0;
IKReal x474=x4;
IKReal x475=(sj0)*(sj0);
j2eval[0]=((((-0.219410113824852)*(x472)*(x474)))+(((-0.219410113824852)*(x472)*(x473)))+(((-0.219410113824852)*(x474)*(x475)))+(((-0.219410113824852)*(x473)*(x475))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x476=x0;
IKReal x477=(sj0)*(sj0);
IKReal x478=(cj0)*(cj0);
IKReal x479=x4;
j2eval[0]=((((0.975632718778622)*(x476)*(x478)))+(((0.975632718778622)*(x476)*(x477)))+(((0.975632718778622)*(x478)*(x479)))+(((0.975632718778622)*(x477)*(x479))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x480=(cj0)*(cj0);
IKReal x481=x4;
IKReal x482=x0;
IKReal x483=(sj0)*(sj0);
j2eval[0]=((((-0.0580000000000000)*(x480)*(x481)))+(((-0.0580000000000000)*(x480)*(x482)))+(((-0.0580000000000000)*(x482)*(x483)))+(((-0.0580000000000000)*(x481)*(x483))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x484=x0;
IKReal x485=(cj0)*(cj0);
IKReal x486=x4;
IKReal x487=(sj0)*(sj0);
IKReal x488=((0.0580000000000000)*(x484)*(x485));
IKReal x489=((0.0580000000000000)*(x485)*(x486));
IKReal x490=((0.0580000000000000)*(x486)*(x487));
IKReal x491=((0.0580000000000000)*(x484)*(x487));
IKReal x492=((x489)+(x488)+(x490)+(x491));
IKReal x493=x2;
j2array[0]=IKatan2(((((IKabs(x492) != 0)?((IKReal)1/(x492)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))*(((0.0158334459000000)+(((0.579640000000000)*(py)))+(x484)+(x486)+(x493)))), ((-1.00000000000000)*(((IKabs(x492) != 0)?((IKReal)1/(x492)):(IKReal)1.0e30))*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))*(((0.0158334459000000)+(((0.579640000000000)*(py)))+(x484)+(x486)+(x493)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x494=x0;
IKReal x495=(sj0)*(sj0);
IKReal x496=(cj0)*(cj0);
IKReal x497=x4;
IKReal x498=((0.975632718778622)*(x494)*(x496));
IKReal x499=((0.975632718778622)*(x495)*(x497));
IKReal x500=((0.975632718778622)*(x494)*(x495));
IKReal x501=((0.975632718778622)*(x496)*(x497));
IKReal x502=((x498)+(x499)+(x500)+(x501));
j2array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x502) != 0)?((IKReal)1/(x502)):(IKReal)1.0e30))*(((0.00630609034413843)+(((0.219410113824852)*(py)))))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((((IKabs(x502) != 0)?((IKReal)1/(x502)):(IKReal)1.0e30))*(((0.00630609034413843)+(((0.219410113824852)*(py)))))*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x503=(cj0)*(cj0);
IKReal x504=x0;
IKReal x505=x4;
IKReal x506=(sj0)*(sj0);
IKReal x507=((0.219410113824852)*(x503)*(x504));
IKReal x508=((0.219410113824852)*(x503)*(x505));
IKReal x509=((0.219410113824852)*(x504)*(x506));
IKReal x510=((0.219410113824852)*(x505)*(x506));
IKReal x511=((x508)+(x509)+(x507)+(x510));
j2array[0]=IKatan2(((((IKabs(x511) != 0)?((IKReal)1/(x511)):(IKReal)1.0e30))*(((0.0280407678573409)+(((0.975632718778622)*(py)))))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((-1.00000000000000)*(((IKabs(x511) != 0)?((IKReal)1/(x511)):(IKReal)1.0e30))*(((0.0280407678573409)+(((0.975632718778622)*(py)))))*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x512=x4;
IKReal x513=x2;
IKReal x514=x0;
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.303489586362542)+(((-1.00000000000000)*(x512)))+(((-1.00000000000000)*(x513)))+(((-1.00000000000000)*(x514))));
evalcond[2]=((0.550898889418505)+(py));
evalcond[3]=((0.303489586362542)+(((-2.71050542723722e-18)*((cj0)*(cj0))))+(((-1.00000000000000)*(x512)))+(((-1.00000000000000)*(x513)))+(((-1.00000000000000)*(x514))));
evalcond[4]=((-0.550898889418505)+(((-1.00000000000000)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j2eval[1];
IKReal x515=x4;
IKReal x516=(sj0)*(sj0);
IKReal x517=(cj0)*(cj0);
IKReal x518=x0;
j2eval[0]=((((-3.83025174864983e-5)*(x517)*(x518)))+(((-3.83025174864983e-5)*(x515)*(x516)))+(((-3.83025174864983e-5)*(x515)*(x517)))+(((-3.83025174864983e-5)*(x516)*(x518))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x519=x4;
IKReal x520=(sj0)*(sj0);
IKReal x521=(cj0)*(cj0);
IKReal x522=x0;
IKReal x523=((3.83025174864983e-5)*(x520)*(x522));
IKReal x524=((3.83025174864983e-5)*(x519)*(x521));
IKReal x525=((3.83025174864983e-5)*(x519)*(x520));
IKReal x526=((3.83025174864983e-5)*(x521)*(x522));
IKReal x527=((x523)+(x526)+(x524)+(x525));
IKReal x528=((0.999999999266459)*(py));
IKReal x529=((0.550898889014398)+(x528));
j2array[0]=IKatan2(((-1.00000000000000)*(x529)*(((IKabs(x527) != 0)?((IKReal)1/(x527)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((x529)*(((IKabs(x527) != 0)?((IKReal)1/(x527)):(IKReal)1.0e30))*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x530=((px)*(sj0));
IKReal x531=((cj0)*(pz));
IKReal x532=((x531)+(x530));
IKReal x533=((-1.00000000000000)*(x532));
j2array[0]=IKatan2(((x533)*(((IKabs(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))):(IKReal)1.0e30))), ((x533)*(((IKabs(((((0.0290000000000000)*(x530)))+(((0.0290000000000000)*(x531)))+(((-0.0289900000000000)*(sj3)*(x530)))+(((-0.0289900000000000)*(sj3)*(x531)))+(((0.261080000000000)*(cj3)*(x531)))+(((0.261080000000000)*(cj3)*(x530))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(x530)))+(((0.0290000000000000)*(x531)))+(((-0.0289900000000000)*(sj3)*(x530)))+(((-0.0289900000000000)*(sj3)*(x531)))+(((0.261080000000000)*(cj3)*(x531)))+(((0.261080000000000)*(cj3)*(x530)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x534=x9;
IKReal x535=x8;
j2array[0]=IKatan2(((((IKabs(((((0.0290000000000000)*(x535)))+(((-0.0289900000000000)*(sj3)*(x535)))+(((0.261080000000000)*(cj3)*(x535)))+(((-0.261080000000000)*(cj3)*(x534)))+(((-0.0290000000000000)*(x534)))+(((0.0289900000000000)*(sj3)*(x534))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(x535)))+(((-0.0289900000000000)*(sj3)*(x535)))+(((0.261080000000000)*(cj3)*(x535)))+(((-0.261080000000000)*(cj3)*(x534)))+(((-0.0290000000000000)*(x534)))+(((0.0289900000000000)*(sj3)*(x534)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x534)))+(x535)))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((((IKabs(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x535)))+(x534)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x536=((0.261080000000000)*(cj3));
IKReal x537=((0.0290000000000000)+(x536));
IKReal x538=((0.0289900000000000)*(sj3));
IKReal x539=((((-1.00000000000000)*(x538)))+(x537));
IKReal x540=((IKabs(x539) != 0)?((IKReal)1/(x539)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x540)*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((x540)*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((((IKabs(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((((IKabs(((((0.0290000000000000)*(cj1)))+(((0.261080000000000)*(cj1)*(cj3)))+(((-0.0289900000000000)*(cj1)*(sj3))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(cj1)))+(((0.261080000000000)*(cj1)*(cj3)))+(((-0.0289900000000000)*(cj1)*(sj3)))))):(IKReal)1.0e30))*(((((0.289820000000000)*(sj1)))+(((0.261080000000000)*(sj1)*(sj3)))+(((-1.00000000000000)*(pz)*(sj0)))+(((0.0289900000000000)*(cj3)*(sj1)))+(((cj0)*(px)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((((IKabs(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((((IKabs(((((-0.0289900000000000)*(sj1)*(sj3)))+(((0.0290000000000000)*(sj1)))+(((0.261080000000000)*(cj3)*(sj1))))) != 0)?((IKReal)1/(((((-0.0289900000000000)*(sj1)*(sj3)))+(((0.0290000000000000)*(sj1)))+(((0.261080000000000)*(cj3)*(sj1)))))):(IKReal)1.0e30))*(((((-0.289820000000000)*(cj1)))+(((-0.261080000000000)*(cj1)*(sj3)))+(py)+(((-0.0289900000000000)*(cj1)*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x541=((0.261080000000000)*(cj3));
IKReal x542=((0.0290000000000000)+(x541));
IKReal x543=((0.0289900000000000)*(sj3));
IKReal x544=((((-1.00000000000000)*(x543)))+(x542));
IKReal x545=((IKabs(x544) != 0)?((IKReal)1/(x544)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x545)*(((((-1.00000000000000)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)))))), ((x545)*(((((cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(pz)*(sj0)))+(((py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x62=((cj1)*(sj3));
IKReal x63=((cj2)*(cj3)*(sj1));
IKReal x64=((x62)+(x63));
IKReal x65=((sj0)*(sj1)*(sj3));
IKReal x66=((cj0)*(cj3)*(sj2));
IKReal x67=((cj1)*(cj2)*(cj3)*(sj0));
IKReal x68=((x66)+(x67));
IKReal x69=((x65)+(((-1.00000000000000)*(x68))));
IKReal x70=((cj0)*(cj1)*(cj2)*(cj3));
IKReal x71=((cj3)*(sj0)*(sj2));
IKReal x72=((cj0)*(sj1)*(sj3));
IKReal x73=((x72)+(x71));
IKReal x74=((((-1.00000000000000)*(x73)))+(x70));
IKReal x75=((cj1)*(cj3));
IKReal x76=((cj2)*(sj1)*(sj3));
IKReal x77=((((-1.00000000000000)*(x76)))+(x75));
IKReal x78=((sj0)*(sj2)*(sj3));
IKReal x79=((cj0)*(cj3)*(sj1));
IKReal x80=((cj0)*(cj2)*(x62));
IKReal x81=((x79)+(x80));
IKReal x82=((x78)+(((-1.00000000000000)*(x81))));
IKReal x83=((cj2)*(sj0)*(x62));
IKReal x84=((cj3)*(sj0)*(sj1));
IKReal x85=((cj0)*(sj2)*(sj3));
IKReal x86=((x83)+(x84)+(x85));
IKReal x87=((cj2)*(sj0));
IKReal x88=((cj0)*(cj1)*(sj2));
IKReal x89=((x88)+(x87));
IKReal x90=((cj0)*(cj2));
IKReal x91=((cj1)*(sj0)*(sj2));
IKReal x92=((x90)+(((-1.00000000000000)*(x91))));
new_r00=((((r10)*(x64)))+(((r20)*(x69)))+(((r00)*(x74))));
new_r01=((((r11)*(x64)))+(((r21)*(x69)))+(((r01)*(x74))));
new_r02=((((r22)*(x69)))+(((r02)*(x74)))+(((r12)*(x64))));
new_r10=((((r10)*(x77)))+(((r00)*(x82)))+(((r20)*(x86))));
new_r11=((((r21)*(x86)))+(((r11)*(x77)))+(((r01)*(x82))));
new_r12=((((r22)*(x86)))+(((r02)*(x82)))+(((r12)*(x77))));
new_r20=((((r10)*(sj1)*(sj2)))+(((r00)*(x89)))+(((r20)*(x92))));
new_r21=((((r21)*(x92)))+(((r01)*(x89)))+(((r11)*(sj1)*(sj2))));
new_r22=((((r12)*(sj1)*(sj2)))+(((r22)*(x92)))+(((r02)*(x89))));
{
IKReal j5eval;
j5eval=new_r02;
if( j5eval >= -1.000010 && j5eval <= -0.999990 )
{
{
j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=1.00000000000000;
j6=((-1.00000000000000)*(IKatan2(new_r21, new_r20)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
if( j5eval >= 0.999990 && j5eval <= 1.000010 )
{
{
j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=-1.00000000000000;
j6=((((-1.00000000000000)*(IKatan2(new_r21, new_r20))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(new_r12)), new_r22);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
sj4array[1] = -sj4array[0];
cj4array[1] = -cj4array[0];
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(new_r02, ((-1.00000000000000)*(new_r12)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x93=IKsin(j4);
IKReal x94=((IKabs(x93) != 0)?((IKReal)1/(x93)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r20)*(x94)), ((new_r21)*(x94)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(new_r02, ((new_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x95=IKsin(j5);
IKReal x96=((IKabs(x95) != 0)?((IKReal)1/(x95)):(IKReal)1.0e30);
IKReal x97=IKsin(j4);
IKReal x98=IKcos(j4);
j6array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(x96)*(x97)))+(((new_r21)*(x96)*(x98)))), ((((new_r21)*(x97)))+(((new_r11)*(x98)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x99=IKcos(j5);
IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x100)), ((new_r00)*(x100)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "90a77686c0ca9c5906c7319a3343c6ee"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
