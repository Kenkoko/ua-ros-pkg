/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-18 10:02:00.027284
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKcos(j[3]);
x3=IKsin(j[1]);
x4=IKsin(j[3]);
x5=IKcos(j[4]);
x6=((x0)*(x1)*(x4));
x7=((x2)*(x3));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKsin(j[2]);
x11=IKsin(j[4]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
x14=IKsin(j[5]);
x15=IKcos(j[5]);
x16=IKcos(j[0]);
x17=((x11)*(x9));
x18=((x0)*(x10)*(x5));
x19=((((-1.00000000000000)*(x18)))+(x17));
x20=((x14)*(x19));
x21=((x0)*(x1)*(x2));
x22=((x3)*(x4));
x23=((((-1.00000000000000)*(x22)))+(x21));
x24=((x15)*(x23));
x25=((x24)+(x20));
x26=((x5)*(x9));
x27=((x0)*(x10)*(x11));
x28=((x26)+(x27));
x29=IKsin(j[0]);
x30=((x10)*(x15)*(x2));
x31=((x10)*(x11)*(x4));
x32=((x1)*(x5));
x33=((((-1.00000000000000)*(x32)))+(x31));
x34=((x14)*(x33));
x35=((x1)*(x11));
x36=((x10)*(x4)*(x5));
x37=((x36)+(x35));
x38=((x0)*(x2));
x39=((x1)*(x22));
x40=((((-1.00000000000000)*(x39)))+(x38));
x41=((x0)*(x4));
x42=((x1)*(x7));
x43=((x42)+(x41));
x44=((x15)*(x43));
x45=((x11)*(x40));
x46=((x10)*(x11)*(x3));
x47=((x40)*(x5));
x48=((x46)+(x47));
x49=((x10)*(x3)*(x5));
x50=((-1.00000000000000)*(x49));
x51=((x45)+(x50));
x52=((x12)*(x37));
x53=((((-1.00000000000000)*(x30)))+(x34));
x54=((x13)*(x53));
x55=((x54)+(x52));
x56=((x13)*(x25));
x57=((x12)*(x28));
x58=((x57)+(x56));
x59=((x13)*(x28));
x60=((-1.00000000000000)*(x18));
x61=((x60)+(x17));
x62=((((-1.00000000000000)*(x34)))+(x30));
x63=((x12)*(x62));
x64=((x13)*(x37));
x65=((x63)+(x64));
x66=((((-1.00000000000000)*(x31)))+(x32));
x67=((x15)*(x66));
x68=((x10)*(x14)*(x2));
x69=((x67)+(((-1.00000000000000)*(x68))));
x70=((((-1.00000000000000)*(x17)))+(x18));
x71=((x15)*(x70));
x72=((x14)*(x23));
x73=((x72)+(x71));
x74=((0.0290000000000000)*(x10)*(x4));
x75=((0.0910000000000000)*(x36));
x76=((0.0910000000000000)*(x35));
x77=((x76)+(x75));
x78=((x12)*(x77));
x79=((0.00200000000000000)*(x31));
x80=((0.00200000000000000)*(x32));
x81=((x79)+(((-1.00000000000000)*(x80))));
x82=((x15)*(x81));
x83=((0.0910000000000000)*(x34));
x84=((0.0910000000000000)*(x30));
x85=((x83)+(((-1.00000000000000)*(x84))));
x86=((x13)*(x85));
x87=((0.00200000000000000)*(x68));
x88=((x74)+(x78)+(x82)+(x86)+(x87));
x89=((0.262000000000000)*(x10)*(x2));
x90=((0.0290000000000000)*(x10));
x91=((x89)+(x90));
x92=((x88)+(((-1.00000000000000)*(x91))));
x93=((0.290000000000000)*(x3));
x94=((0.0290000000000000)*(x7));
x95=((0.262000000000000)*(x22));
x96=((0.0290000000000000)*(x6));
x97=((x93)+(x95)+(x94)+(x96));
x98=((0.0910000000000000)*(x27));
x99=((0.0910000000000000)*(x26));
x100=((x99)+(x98));
x101=((x100)*(x12));
x102=((0.262000000000000)*(x21));
x103=((-0.00200000000000000)*(x18));
x104=((0.00200000000000000)*(x17));
x105=((x104)+(x103));
x106=((x105)*(x15));
x107=((0.00200000000000000)*(x22));
x108=((0.00200000000000000)*(x21));
x109=((((-1.00000000000000)*(x108)))+(x107));
x110=((x109)*(x14));
x111=((0.0910000000000000)*(x24));
x112=((0.0290000000000000)*(x0)*(x1));
eerot[0]=((((x16)*(x58)))+(((x29)*(x55))));
eerot[1]=((((x29)*(x65)))+(((x16)*(((x59)+(((-1.00000000000000)*(x12)*(x25))))))));
eerot[2]=((((x29)*(x69)))+(((x16)*(x73))));
eetrans[0]=((0.0290000000000000)+(((x29)*(x92)))+(((0.0290000000000000)*(x16)))+(((x16)*(((((x13)*(((((0.0910000000000000)*(x14)*(x61)))+(x111)))))+(x112)+(x110)+(x106)+(x101)+(x102)+(((-1.00000000000000)*(x97))))))));
eerot[3]=((((x13)*(((((x14)*(x51)))+(x44)))))+(((x12)*(x48))));
eerot[4]=((((x13)*(x48)))+(((-1.00000000000000)*(x12)*(((((x14)*(((((-1.00000000000000)*(x49)))+(x45)))))+(x44))))));
eerot[5]=((((x14)*(x43)))+(((x15)*(((((-1.00000000000000)*(x45)))+(x49))))));
eetrans[1]=((0.0920000000000000)+(((0.290000000000000)*(x0)))+(((0.0290000000000000)*(x38)))+(((0.262000000000000)*(x42)))+(((0.262000000000000)*(x41)))+(((x14)*(((((-0.00200000000000000)*(x41)))+(((-0.00200000000000000)*(x42)))))))+(((x13)*(((((0.0910000000000000)*(x14)*(x51)))+(((0.0910000000000000)*(x44)))))))+(((x12)*(((((0.0910000000000000)*(x46)))+(((0.0910000000000000)*(x47)))))))+(((0.0290000000000000)*(x1)*(x3)))+(((-0.0290000000000000)*(x39)))+(((x15)*(((((-0.00200000000000000)*(x49)))+(((0.00200000000000000)*(x45))))))));
eerot[6]=((((x16)*(x55)))+(((-1.00000000000000)*(x29)*(x58))));
eerot[7]=((((x16)*(x65)))+(((-1.00000000000000)*(x29)*(((((x12)*(((((-1.00000000000000)*(x24)))+(((-1.00000000000000)*(x14)*(x61)))))))+(x59))))));
eerot[8]=((((x16)*(x69)))+(((-1.00000000000000)*(x29)*(x73))));
eetrans[2]=((((x29)*(((((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x110)))+(x97)+(((-1.00000000000000)*(x13)*(((x111)+(((0.0910000000000000)*(x20)))))))))))+(((x16)*(x92)))+(((-0.0290000000000000)*(x29))));
}

class IKSolver {
public:
IKReal j1, cj1, sj1, htj1,
j2, cj2, sj2, htj2,
j3, cj3, sj3, htj3,
j4, cj4, sj4, htj4,
j5, cj5, sj5, htj5,
j6, cj6, sj6, htj6,
j0, cj0, sj0, htj0,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.00000000000000)*(r20)*(IKsin(j0))))+(((r00)*(IKcos(j0)))));
new_r01=((((r01)*(IKcos(j0))))+(((-1.00000000000000)*(r21)*(IKsin(j0)))));
new_r02=((((-1.00000000000000)*(r22)*(IKsin(j0))))+(((r02)*(IKcos(j0)))));
IKReal x0=IKcos(j0);
IKReal x1=IKsin(j0);
new_px=((-0.0290000000000000)+(((-0.00200000000000000)*(r22)*(x1)))+(((0.0910000000000000)*(r20)*(x1)))+(((px)*(x0)))+(((-0.0290000000000000)*(x0)))+(((0.00200000000000000)*(r02)*(x0)))+(((-0.0910000000000000)*(r00)*(x0)))+(((-1.00000000000000)*(pz)*(x1))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.0920000000000000)+(py)+(((0.00200000000000000)*(r12)))+(((-0.0910000000000000)*(r10))));
new_r20=((((r00)*(IKsin(j0))))+(((r20)*(IKcos(j0)))));
new_r21=((((r01)*(IKsin(j0))))+(((r21)*(IKcos(j0)))));
new_r22=((((r22)*(IKcos(j0))))+(((r02)*(IKsin(j0)))));
IKReal x2=x0;
IKReal x3=x1;
new_pz=((((-0.0910000000000000)*(r20)*(x2)))+(((0.00200000000000000)*(r22)*(x2)))+(((px)*(x3)))+(((-0.0290000000000000)*(x3)))+(((pz)*(x2)))+(((0.00200000000000000)*(r02)*(x3)))+(((-0.0910000000000000)*(r00)*(x3))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
dummyeval[0]=(((py)*(py)*(py)*(py))+((px)*(px)*(px)*(px))+(((2.00000000000000)*((px)*(px))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x4=(cj1)*(cj1);
IKReal x5=(py)*(py);
IKReal x6=(pp)*(pp);
IKReal x7=((2.36568213783404)*(pp));
IKReal x8=((236.568213783404)*(x4)*(x5));
IKReal x9=((351.617440225035)*(x6));
op[0]=((-8.35273041490858)+(x8)+(((-1.00000000000000)*(x9)))+(((-20.3727144866385)*(pp))));
op[1]=((-32.4225490014065)+(((-1.00000000000000)*(x7))));
op[2]=((-52.1494189226442)+(((-703.234880450070)*(x6)))+(((473.136427566807)*(x4)*(x5)))+(((-19.3727144866385)*(pp))));
op[3]=((-39.5404323431786)+(((-1.00000000000000)*(x7))));
op[4]=((-12.0374200014065)+(x8)+(pp)+(((-1.00000000000000)*(x9))));
polyroots4(op,zeror,numroots);
IKReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IKReal htj3 = zeror[ij3];
tempj3array[0]=((2.00000000000000)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
bool valid = true;
for( int kj3 = 0; kj3 < numsolutions; ++kj3)
{
    if( IKabs(cj3array[kj3]-cj3array[numsolutions]) < 0.0001 && IKabs(sj3array[kj3]-sj3array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+(((9.03448275862069)*(cj3)))+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x10=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
cj1array[0]=((((0.0266482758620690)*(x10)))+(((1.72413793103448)*(pp)*(x10))));
if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[2];
IKReal x11=x5;
IKReal x12=(sj1)*(sj1);
IKReal x13=((x11)*(x12));
IKReal x14=(pz)*(pz);
IKReal x15=((x13)+(x14));
dummyeval[0]=x15;
dummyeval[1]=((-1.00000000000000)*(x15));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x16=x5;
IKReal x17=(sj1)*(sj1);
IKReal x18=((29.0000000000000)*(x16)*(x17));
IKReal x19=(pz)*(pz);
IKReal x20=((29.0000000000000)*(x19));
IKReal x21=((x18)+(x20));
IKReal x22=((0.0154560000000000)+(pp));
IKReal x23=((0.580000000000000)*(cj1)*(py));
IKReal x24=((((-1.00000000000000)*(x23)))+(x22));
j2array[0]=IKatan2(((-500.000000000000)*(pz)*(x24)*(((IKabs(x21) != 0)?((IKReal)1/(x21)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj1)*(x24)*(((IKabs(x21) != 0)?((IKReal)1/(x21)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
cj1array[0]=((0.552000000000000)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30)));
if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[2];
IKReal x138=x5;
IKReal x139=(sj1)*(sj1);
IKReal x140=((x138)*(x139));
IKReal x141=(pz)*(pz);
IKReal x142=((x140)+(x141));
dummyeval[0]=x142;
dummyeval[1]=((-1.00000000000000)*(x142));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x143=x5;
IKReal x144=(sj1)*(sj1);
IKReal x145=((29.0000000000000)*(x143)*(x144));
IKReal x146=(pz)*(pz);
IKReal x147=((29.0000000000000)*(x146));
IKReal x148=((x145)+(x147));
IKReal x149=((0.0154560000000000)+(pp));
IKReal x150=((0.580000000000000)*(cj1)*(py));
IKReal x151=((((-1.00000000000000)*(x150)))+(x149));
j2array[0]=IKatan2(((-500.000000000000)*(pz)*(x151)*(((IKabs(x148) != 0)?((IKReal)1/(x148)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj1)*(x151)*(((IKabs(x148) != 0)?((IKReal)1/(x148)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
sj2array[0]=((-1521596359.18293)*(pz));
if( sj2array[0] >= -1.0001 && sj2array[0] <= 1.0001 )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
{
    j2valid[1]=false;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=((-1.00000000000000)*(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x152=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-5.38368738496162e-19)*(x152)*(((2.51077677418992e+16)+(((-3.20252237500000e+19)*(pp)))))), ((0.0279999995866351)*(x152)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x153=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((6.57204516799043e-10)*(x153)), ((0.0344827586206897)*(x153)*(((0.772799998094107)+(((50.0000000000000)*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x154=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((6.57204516799043e-10)*(x154)), ((0.0279999995866351)*(x154)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x155=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((5.38368738496162e-19)*(x155)*(((2.51077677418992e+16)+(((-3.20252237500000e+19)*(pp)))))), ((0.0279999995866351)*(x155)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x156=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-6.57204516799043e-10)*(x156)), ((0.0344827586206897)*(x156)*(((0.772799998094107)+(((50.0000000000000)*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x157=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-6.57204516799043e-10)*(x157)), ((0.0279999995866351)*(x157)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x158=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(cj2)*(pz)*(x158)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))), ((0.0279999995866351)*(x158)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x159=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((6.57204516799043e-10)*(cj2)*(x159)), ((0.0344827586206897)*(x159)*(((0.772799998094107)+(((50.0000000000000)*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x160=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((6.57204516799043e-10)*(cj2)*(x160)), ((0.0279999995866351)*(x160)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x161=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
cj1array[0]=((((0.00290000000000000)*(sj3)*(x161)))+(((1.72413793103448)*(pp)*(x161)))+(((0.0237482758620690)*(x161)))+(((-0.0262000000000000)*(cj3)*(x161))));
if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[2];
IKReal x162=((9.03448275862069)*(cj3));
IKReal x163=((1.00000000000000)+(x162));
IKReal x164=((x163)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x164;
dummyeval[1]=x164;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x165=((9.03448275862069)*(cj3));
IKReal x166=((1.00000000000000)+(x165));
IKReal x167=((x166)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x167;
dummyeval[1]=x167;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x168=((9.03448275862069)*(cj3));
IKReal x169=((1.00000000000000)+(x168));
IKReal x170=((x169)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x170;
dummyeval[1]=x170;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.552000000000000)+(((-1.00000000000000)*(cj1)*(py))));
evalcond[2]=pz;
evalcond[3]=((-0.0154560000000000)+(((0.580000000000000)*(cj1)*(py)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-1.00000000000000)*(py)*(sj1));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x171=x5;
IKReal x172=(sj1)*(sj1);
IKReal x173=((x171)*(x172));
IKReal x174=(pz)*(pz);
IKReal x175=((x173)+(x174));
dummyeval[0]=x175;
dummyeval[1]=((-1.00000000000000)*(x175));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x176=x5;
IKReal x177=(sj1)*(sj1);
IKReal x178=((29.0000000000000)*(x176)*(x177));
IKReal x179=(pz)*(pz);
IKReal x180=((29.0000000000000)*(x179));
IKReal x181=((x178)+(x180));
IKReal x182=((0.0154560000000000)+(pp));
IKReal x183=((0.580000000000000)*(cj1)*(py));
IKReal x184=((((-1.00000000000000)*(x183)))+(x182));
j2array[0]=IKatan2(((-500.000000000000)*(pz)*(x184)*(((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj1)*(x184)*(((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0279999995866351)+(((-1.00000000000000)*(cj1)*(py))));
evalcond[2]=((-0.0154559999618821)+(((0.580000000000000)*(cj1)*(py)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(pz)), ((1521596359.18293)*(py)*(sj1)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x185=((0.262000000000000)*(cj3));
IKReal x186=((0.0290000000000000)+(x185));
IKReal x187=((0.0290000000000000)*(sj3));
IKReal x188=((((-1.00000000000000)*(x187)))+(x186));
IKReal x189=((IKabs(x188) != 0)?((IKReal)1/(x188)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x189)), ((py)*(sj1)*(x189)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x190=((0.262000000000000)*(cj3));
IKReal x191=((0.0290000000000000)+(x190));
IKReal x192=((0.0290000000000000)*(sj3));
IKReal x193=((((-1.00000000000000)*(x192)))+(x191));
IKReal x194=((IKabs(x193) != 0)?((IKReal)1/(x193)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x194)), ((py)*(sj1)*(x194)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x195=((0.262000000000000)*(cj3));
IKReal x196=((0.0290000000000000)+(x195));
IKReal x197=((0.0290000000000000)*(sj3));
IKReal x198=((((-1.00000000000000)*(x197)))+(x196));
IKReal x199=((IKabs(x198) != 0)?((IKReal)1/(x198)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x199)), ((py)*(sj1)*(x199)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x200=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
cj1array[0]=((((0.262000000000000)*(sj3)*(x200)))+(((0.290000000000000)*(x200)))+(((0.0290000000000000)*(cj3)*(x200))));
if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[2];
IKReal x201=((9.03448275862069)*(cj3));
IKReal x202=((1.00000000000000)+(x201));
IKReal x203=((x202)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x203;
dummyeval[1]=x203;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x204=((9.03448275862069)*(cj3));
IKReal x205=((1.00000000000000)+(x204));
IKReal x206=((x205)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x206;
dummyeval[1]=x206;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x207=((9.03448275862069)*(cj3));
IKReal x208=((1.00000000000000)+(x207));
IKReal x209=((x208)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x209;
dummyeval[1]=x209;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.552000000000000)+(((-1.00000000000000)*(cj1)*(py))));
evalcond[2]=pz;
evalcond[3]=((-0.0154560000000000)+(((0.580000000000000)*(cj1)*(py)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-1.00000000000000)*(py)*(sj1));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x210=x5;
IKReal x211=(sj1)*(sj1);
IKReal x212=((x210)*(x211));
IKReal x213=(pz)*(pz);
IKReal x214=((x212)+(x213));
dummyeval[0]=x214;
dummyeval[1]=((-1.00000000000000)*(x214));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x215=x5;
IKReal x216=(sj1)*(sj1);
IKReal x217=((29.0000000000000)*(x215)*(x216));
IKReal x218=(pz)*(pz);
IKReal x219=((29.0000000000000)*(x218));
IKReal x220=((x217)+(x219));
IKReal x221=((0.0154560000000000)+(pp));
IKReal x222=((0.580000000000000)*(cj1)*(py));
IKReal x223=((x221)+(((-1.00000000000000)*(x222))));
j2array[0]=IKatan2(((-500.000000000000)*(pz)*(x223)*(((IKabs(x220) != 0)?((IKReal)1/(x220)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj1)*(x223)*(((IKabs(x220) != 0)?((IKReal)1/(x220)):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0279999995866351)+(((-1.00000000000000)*(cj1)*(py))));
evalcond[2]=((-0.0154559999618821)+(((0.580000000000000)*(cj1)*(py)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(pz)), ((1521596359.18293)*(py)*(sj1)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x224=((0.262000000000000)*(cj3));
IKReal x225=((0.0290000000000000)+(x224));
IKReal x226=((0.0290000000000000)*(sj3));
IKReal x227=((x225)+(((-1.00000000000000)*(x226))));
IKReal x228=((IKabs(x227) != 0)?((IKReal)1/(x227)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x228)), ((py)*(sj1)*(x228)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x229=((0.262000000000000)*(cj3));
IKReal x230=((0.0290000000000000)+(x229));
IKReal x231=((0.0290000000000000)*(sj3));
IKReal x232=((((-1.00000000000000)*(x231)))+(x230));
IKReal x233=((IKabs(x232) != 0)?((IKReal)1/(x232)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x233)), ((py)*(sj1)*(x233)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x234=((0.262000000000000)*(cj3));
IKReal x235=((0.0290000000000000)+(x234));
IKReal x236=((0.0290000000000000)*(sj3));
IKReal x237=((((-1.00000000000000)*(x236)))+(x235));
IKReal x238=((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x238)), ((py)*(sj1)*(x238)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
sj2array[0]=((-1.00000000000000)*(pz)*(((IKabs(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))):(IKReal)1.0e30)));
if( sj2array[0] >= -1.0001 && sj2array[0] <= 1.0001 )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
{
    j2valid[1]=false;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=((-1.00000000000000)*(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x239=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x239)*(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))), ((0.00344827586206897)*(x239)*(((6.88700000000000)+(((-7.59800000000000)*(cj3)))+(((500.000000000000)*(pp)))+(((0.841000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x240=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-0.0344827586206897)*(x240)*(((76.3720000000000)+(((75.9800000000000)*(sj3)))+(((-500.000000000000)*(pp)))+(((8.41000000000000)*(cj3)))))), ((x240)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x241=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x241)*(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))), ((x241)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x242=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x242)*(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))), ((0.00344827586206897)*(x242)*(((6.88700000000000)+(((-7.59800000000000)*(cj3)))+(((500.000000000000)*(pp)))+(((0.841000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x243=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((0.0344827586206897)*(x243)*(((76.3720000000000)+(((75.9800000000000)*(sj3)))+(((-500.000000000000)*(pp)))+(((8.41000000000000)*(cj3)))))), ((x243)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x244=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x244)*(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))), ((x244)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x245=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(cj2)*(pz)*(x245)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))), ((0.0344827586206897)*(x245)*(((0.688700000000000)+(((0.0841000000000000)*(sj3)))+(((50.0000000000000)*(pp)))+(((-0.759800000000000)*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x246=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(cj2)*(pz)*(x246)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))), ((x246)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x247=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x247)*(((((0.0290000000000000)*(cj2)))+(((-0.0290000000000000)*(cj2)*(sj3)))+(((0.262000000000000)*(cj2)*(cj3)))))), ((x247)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j1evalpoly[1];
IKReal x248=(px)*(px);
IKReal x249=(py)*(py)*(py);
IKReal x250=(py)*(py);
IKReal x251=(pp)*(pp);
IKReal x252=(px)*(px)*(px)*(px);
IKReal x253=((4045724.27383869)*(x248)*(x250));
IKReal x254=((213488.270319054)*(py)*(x248));
IKReal x255=((13812646.8891727)*(pp)*(py)*(x248));
IKReal x256=((2022862.13691935)*(x252));
IKReal x257=(pp)*(pp)*(pp);
IKReal x258=((2788.21949384669)*(x248));
IKReal x259=((11671663.0422337)*(x248)*(x251));
IKReal x260=((400851.123940129)*(pp)*(x248));
op[0]=((((2022862.13691935)*(py)*(x249)))+(x256)+(x253));
op[1]=((((-13812646.8891727)*(pp)*(x249)))+(((-213488.270319054)*(x249)))+(((-1.00000000000000)*(x255)))+(((-1.00000000000000)*(x254))));
op[2]=((((8477.31381462478)*(x250)))+(((35486571.4718418)*(x250)*(x251)))+(((1056904.22135897)*(pp)*(x250)))+(x258)+(x259)+(x260)+(((-4045724.27383869)*(x252)))+(((-1.00000000000000)*(x253))));
op[3]=((((-150.103519668737)*(py)))+(((-40653650.4431686)*(pp)*(py)*(x251)))+(((-27021.2546850184)*(pp)*(py)))+(x254)+(x255)+(((-1748269.58365802)*(py)*(x251))));
op[4]=((1.00000000000000)+(x256)+(((230.635338571471)*(pp)))+(((-1.00000000000000)*(x260)))+(((21670.2912677995)*(x251)))+(((965454.105524489)*(pp)*(x251)))+(((-1.00000000000000)*(x259)))+(((-1.00000000000000)*(x258)))+(((17523125.1910209)*((x251)*(x251)))));
polyroots4(op,zeror,numroots);
IKReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IKReal cj1 = zeror[ij1];
IKReal x261=x248;
IKReal x262=((0.0236085015400000)*(x261));
tempj1array[0]=IKatan2(((((IKabs(((((-0.0806026000000000)*(pp)*(px)))+(((0.0472170030800000)*(cj1)*(px)*(py)))+(((-0.00124579378560000)*(px))))) != 0)?((IKReal)1/(((((-0.0806026000000000)*(pp)*(px)))+(((0.0472170030800000)*(cj1)*(px)*(py)))+(((-0.00124579378560000)*(px)))))):(IKReal)1.0e30))*(((1.65991282329600e-5)+(((0.00191417278000000)*(pp)))+(x262)+(((cj1)*(((((-0.0806026000000000)*(pp)*(py)))+(((-0.00124579378560000)*(py)))))))+(((0.0694850000000000)*((pp)*(pp))))+((((cj1)*(cj1))*(((((0.0236085015400000)*((py)*(py))))+(((-1.00000000000000)*(x262)))))))))), cj1);
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
bool valid = true;
for( int kj1 = 0; kj1 < numsolutions; ++kj1)
{
    if( IKabs(cj1array[kj1]-cj1array[numsolutions]) < 0.0001 && IKabs(sj1array[kj1]-sj1array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

j1evalpoly[0]=((((-0.0806026000000000)*(pp)*(px)))+(((0.0472170030800000)*(cj1)*(px)*(py)))+(((-0.00124579378560000)*(px))));
if( IKabs(j1evalpoly[0]) < 0.0000001000000000  )
{
    continue;
}
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-1.19258832841620)+(((-7.19579765416997)*(pp)))+(((-7.94416061020364)*(px)*(sj1)))+(((7.94416061020364)*(cj1)*(py)))), ((0.774418691208472)+(((65.0103098411218)*(pp)))+(((-37.2886234439088)*(cj1)*(py)))+(((37.2886234439088)*(px)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[2];
IKReal x263=((9.03448275862069)*(cj3));
IKReal x264=((1.00000000000000)+(x263));
IKReal x265=((x264)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x265;
dummyeval[1]=x265;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x266=((9.03448275862069)*(cj3));
IKReal x267=((1.00000000000000)+(x266));
IKReal x268=((x267)+(((-1.00000000000000)*(sj3))));
dummyeval[0]=x268;
dummyeval[1]=x268;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((-9.03448275862069)*(cj3)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(px)))+(((-9.03448275862069)*(cj1)*(cj3)*(px)))+(((-1.00000000000000)*(py)*(sj1)))+(((py)*(sj1)*(sj3)))+(((cj1)*(px)*(sj3))));
dummyeval[1]=((1.00000000000000)+(((9.03448275862069)*(cj3)))+(((-1.00000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=((0.552000000000000)+(((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1))));
evalcond[2]=pz;
evalcond[3]=((-0.0154560000000000)+(((0.580000000000000)*(cj1)*(py)))+(((-0.580000000000000)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x269=x250;
IKReal x270=(sj1)*(sj1);
IKReal x271=((x269)*(x270));
IKReal x272=(pz)*(pz);
IKReal x273=(cj1)*(cj1);
IKReal x274=x248;
IKReal x275=((x273)*(x274));
IKReal x276=((2.00000000000000)*(cj1)*(px)*(py)*(sj1));
IKReal x277=((x276)+(x275)+(x272)+(x271));
dummyeval[0]=x277;
dummyeval[1]=x277;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x278=x250;
IKReal x279=(sj1)*(sj1);
IKReal x280=((29.0000000000000)*(x278)*(x279));
IKReal x281=(cj1)*(cj1);
IKReal x282=x248;
IKReal x283=((29.0000000000000)*(x281)*(x282));
IKReal x284=((58.0000000000000)*(cj1)*(px)*(py)*(sj1));
IKReal x285=(pz)*(pz);
IKReal x286=((29.0000000000000)*(x285));
IKReal x287=((x286)+(x284)+(x283)+(x280));
IKReal x288=((IKabs(x287) != 0)?((IKReal)1/(x287)):(IKReal)1.0e30);
IKReal x289=((0.580000000000000)*(px)*(sj1));
IKReal x290=((0.0154560000000000)+(x289)+(pp));
IKReal x291=((0.580000000000000)*(cj1)*(py));
IKReal x292=((((-1.00000000000000)*(x291)))+(x290));
j2array[0]=IKatan2(((-500.000000000000)*(pz)*(x288)*(x292)), ((-500.000000000000)*(x288)*(x292)*(((((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.93286555097588)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0279999995866351)+(((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1))));
evalcond[2]=((-0.0154559999618821)+(((0.580000000000000)*(cj1)*(py)))+(((-0.580000000000000)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1521596359.18293)*(pz)), ((((1521596359.18293)*(cj1)*(px)))+(((1521596359.18293)*(py)*(sj1)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((((IKabs(((((0.0290000000000000)*(py)*(sj1)*(sj3)))+(((-0.0290000000000000)*(cj1)*(px)))+(((-0.0290000000000000)*(py)*(sj1)))+(((-0.262000000000000)*(cj3)*(py)*(sj1)))+(((0.0290000000000000)*(cj1)*(px)*(sj3)))+(((-0.262000000000000)*(cj1)*(cj3)*(px))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(py)*(sj1)*(sj3)))+(((-0.0290000000000000)*(cj1)*(px)))+(((-0.0290000000000000)*(py)*(sj1)))+(((-0.262000000000000)*(cj3)*(py)*(sj1)))+(((0.0290000000000000)*(cj1)*(px)*(sj3)))+(((-0.262000000000000)*(cj1)*(cj3)*(px)))))):(IKReal)1.0e30))*(((((cj1)*(px)*(pz)))+(((py)*(pz)*(sj1)))))), ((((IKabs(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))):(IKReal)1.0e30))*(((((cj1)*(px)))+(((py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x293=((0.262000000000000)*(cj3));
IKReal x294=((0.0290000000000000)+(x293));
IKReal x295=((0.0290000000000000)*(sj3));
IKReal x296=((((-1.00000000000000)*(x295)))+(x294));
IKReal x297=((IKabs(x296) != 0)?((IKReal)1/(x296)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x297)), ((x297)*(((((cj1)*(px)))+(((py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x298=((0.262000000000000)*(cj3));
IKReal x299=((0.0290000000000000)+(x298));
IKReal x300=((0.0290000000000000)*(sj3));
IKReal x301=((x299)+(((-1.00000000000000)*(x300))));
IKReal x302=((IKabs(x301) != 0)?((IKReal)1/(x301)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x302)), ((x302)*(((((cj1)*(px)))+(((py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x25=((cj1)*(cj2)*(sj3));
IKReal x26=((cj3)*(sj1));
IKReal x27=((x25)+(x26));
IKReal x28=((-1.00000000000000)*(x27));
IKReal x29=((cj1)*(cj3));
IKReal x30=((cj2)*(sj1)*(sj3));
IKReal x31=((((-1.00000000000000)*(x30)))+(x29));
IKReal x32=((cj1)*(sj3));
IKReal x33=((cj2)*(x26));
IKReal x34=((x33)+(x32));
IKReal x35=((cj2)*(x29));
IKReal x36=((sj1)*(sj3));
IKReal x37=((((-1.00000000000000)*(x36)))+(x35));
new_r00=((((-1.00000000000000)*(cj2)*(r20)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2))));
new_r01=((((-1.00000000000000)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(r21)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2))));
new_r02=((((-1.00000000000000)*(cj2)*(r22)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2))));
new_r10=((((r20)*(sj2)*(sj3)))+(((r10)*(x31)))+(((r00)*(x28))));
new_r11=((((r11)*(x31)))+(((r21)*(sj2)*(sj3)))+(((r01)*(x28))));
new_r12=((((r02)*(x28)))+(((r22)*(sj2)*(sj3)))+(((r12)*(x31))));
new_r20=((((r00)*(x37)))+(((r10)*(x34)))+(((-1.00000000000000)*(cj3)*(r20)*(sj2))));
new_r21=((((-1.00000000000000)*(cj3)*(r21)*(sj2)))+(((r01)*(x37)))+(((r11)*(x34))));
new_r22=((((-1.00000000000000)*(cj3)*(r22)*(sj2)))+(((r02)*(x37)))+(((r12)*(x34))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
sj5array[0]=new_r22;
if( sj5array[0] >= -1.0001 && sj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r00)*(new_r02)))+(((cj5)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r01)*(new_r02)))+(((cj5)*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x38=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x38));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x38))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x39=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x39;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x39;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x40=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x40));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x40))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x41=((cj5)*(new_r01)*(new_r02));
IKReal x42=((cj5)*(new_r11)*(new_r12));
IKReal x43=((x42)+(x41));
IKReal x44=((IKabs(x43) != 0)?((IKReal)1/(x43)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r21)*(sj5)*(x44)), ((new_r02)*(new_r21)*(sj5)*(x44)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x45=((cj4)*(new_r12));
IKReal x46=((new_r02)*(sj4));
IKReal x47=((((-1.00000000000000)*(x46)))+(x45));
IKReal x48=((new_r12)*(sj4));
IKReal x49=((cj4)*(new_r02));
IKReal x50=((x48)+(x49));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x47;
evalcond[5]=x47;
evalcond[6]=x50;
evalcond[7]=x50;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x51=((cj4)*(new_r12));
IKReal x52=((new_r02)*(sj4));
IKReal x53=((x51)+(((-1.00000000000000)*(x52))));
IKReal x54=((new_r12)*(sj4));
IKReal x55=((cj4)*(new_r02));
IKReal x56=((x55)+(x54));
IKReal x57=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x57;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x53;
evalcond[5]=x53;
evalcond[6]=x56;
evalcond[7]=((-1.00000000000000)*(x56));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x57;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x58=((cj4)*(new_r12));
IKReal x59=((new_r02)*(sj4));
IKReal x60=((x58)+(((-1.00000000000000)*(x59))));
IKReal x61=((cj4)*(new_r00));
IKReal x62=((new_r10)*(sj4));
IKReal x63=((x61)+(x62));
IKReal x64=((cj4)*(new_r01));
IKReal x65=((new_r11)*(sj4));
IKReal x66=((x64)+(x65));
IKReal x67=((new_r12)*(sj4));
IKReal x68=((cj4)*(new_r02));
IKReal x69=((1.00000000000000)+(x67)+(x68));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x60;
evalcond[3]=x60;
evalcond[4]=x69;
evalcond[5]=x66;
evalcond[6]=x63;
evalcond[7]=new_r22;
evalcond[8]=x63;
evalcond[9]=x66;
evalcond[10]=x69;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x70=((cj4)*(new_r12));
IKReal x71=((new_r02)*(sj4));
IKReal x72=((((-1.00000000000000)*(x71)))+(x70));
IKReal x73=((cj4)*(new_r00));
IKReal x74=((new_r10)*(sj4));
IKReal x75=((x74)+(x73));
IKReal x76=((cj4)*(new_r01));
IKReal x77=((new_r11)*(sj4));
IKReal x78=((x77)+(x76));
IKReal x79=((new_r12)*(sj4));
IKReal x80=((cj4)*(new_r02));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x72;
evalcond[3]=x72;
evalcond[4]=((-1.00000000000000)+(x79)+(x80));
evalcond[5]=x78;
evalcond[6]=x75;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x75));
evalcond[9]=((-1.00000000000000)*(x78));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(x80))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x81=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x81)), ((new_r20)*(x81)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x82=((cj5)*(new_r00)*(new_r02));
IKReal x83=((cj5)*(new_r10)*(new_r12));
IKReal x84=((x82)+(x83));
IKReal x85=((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r20)*(sj5)*(x85)), ((new_r02)*(new_r20)*(sj5)*(x85)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x86=((cj4)*(new_r12));
IKReal x87=((new_r02)*(sj4));
IKReal x88=((x86)+(((-1.00000000000000)*(x87))));
IKReal x89=((new_r12)*(sj4));
IKReal x90=((cj4)*(new_r02));
IKReal x91=((x89)+(x90));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x88;
evalcond[5]=x88;
evalcond[6]=x91;
evalcond[7]=x91;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x92=((cj4)*(new_r12));
IKReal x93=((new_r02)*(sj4));
IKReal x94=((x92)+(((-1.00000000000000)*(x93))));
IKReal x95=((new_r12)*(sj4));
IKReal x96=((cj4)*(new_r02));
IKReal x97=((x95)+(x96));
IKReal x98=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x98;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x94;
evalcond[5]=x94;
evalcond[6]=x97;
evalcond[7]=((-1.00000000000000)*(x97));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x98;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x99=((cj4)*(new_r12));
IKReal x100=((new_r02)*(sj4));
IKReal x101=((((-1.00000000000000)*(x100)))+(x99));
IKReal x102=((cj4)*(new_r00));
IKReal x103=((new_r10)*(sj4));
IKReal x104=((x102)+(x103));
IKReal x105=((cj4)*(new_r01));
IKReal x106=((new_r11)*(sj4));
IKReal x107=((x105)+(x106));
IKReal x108=((new_r12)*(sj4));
IKReal x109=((cj4)*(new_r02));
IKReal x110=((1.00000000000000)+(x108)+(x109));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x101;
evalcond[3]=x101;
evalcond[4]=x110;
evalcond[5]=x107;
evalcond[6]=x104;
evalcond[7]=new_r22;
evalcond[8]=x104;
evalcond[9]=x107;
evalcond[10]=x110;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x111=((cj4)*(new_r12));
IKReal x112=((new_r02)*(sj4));
IKReal x113=((((-1.00000000000000)*(x112)))+(x111));
IKReal x114=((cj4)*(new_r00));
IKReal x115=((new_r10)*(sj4));
IKReal x116=((x115)+(x114));
IKReal x117=((cj4)*(new_r01));
IKReal x118=((new_r11)*(sj4));
IKReal x119=((x117)+(x118));
IKReal x120=((new_r12)*(sj4));
IKReal x121=((cj4)*(new_r02));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x113;
evalcond[3]=x113;
evalcond[4]=((-1.00000000000000)+(x120)+(x121));
evalcond[5]=x119;
evalcond[6]=x116;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x116));
evalcond[9]=((-1.00000000000000)*(x119));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x122=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x122)), ((new_r20)*(x122)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x123=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x123)), ((new_r20)*(x123)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x124=(new_r12)*(new_r12);
IKReal x125=(new_r02)*(new_r02);
IKReal x126=((x124)+(x125));
IKReal x127=((-1.00000000000000)*(x126));
IKReal x128=((IKabs(x127) != 0)?((IKReal)1/(x127)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj5)*(new_r12)*(x128)), ((cj5)*(new_r02)*(x128)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x129=((new_r11)*(new_r12));
IKReal x130=((new_r01)*(new_r02));
IKReal x131=((x130)+(x129));
IKReal x132=((-1.00000000000000)*(x131));
IKReal x133=((IKabs(x132) != 0)?((IKReal)1/(x132)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(sj6)*(x133)), ((new_r02)*(sj5)*(sj6)*(x133)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x134=((new_r02)*(new_r10));
IKReal x135=((new_r00)*(new_r12));
IKReal x136=((x134)+(((-1.00000000000000)*(x135))));
IKReal x137=((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x137)), ((new_r02)*(sj6)*(x137)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "e8fa20a92720bfa1527d37f468223e9d"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
