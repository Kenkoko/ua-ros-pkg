/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 27 generated on 2011-02-11 16:57:01.169665
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1610612737; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=((x0)*(x1)*(x2));
x7=((x3)*(x4));
x8=((x6)+(((-1.00000000000000)*(x7))));
x9=IKsin(j[1]);
x10=IKsin(j[3]);
x11=IKsin(j[4]);
x12=((x2)*(x3));
x13=((x0)*(x1)*(x4));
x14=((x13)+(x12));
x15=((-1.00000000000000)*(x14));
x16=IKcos(j[4]);
x17=((-1.00000000000000)*(x0)*(x5)*(x9));
x18=((-1.00000000000000)*(x10)*(x8));
x19=((x17)+(x18));
x20=IKcos(j[6]);
x21=IKsin(j[6]);
x22=IKcos(j[5]);
x23=((x5)*(x8));
x24=IKsin(j[5]);
x25=((x15)*(x16));
x26=((x0)*(x5)*(x9));
x27=((x10)*(x8));
x28=((x26)+(x27));
x29=((-1.00000000000000)*(x28));
x30=((x0)*(x10)*(x9));
x31=((((-1.00000000000000)*(x30)))+(x23));
x32=((x11)*(x19));
x33=((x32)+(x25));
x34=((x24)*(x33));
x35=((x22)*(x31));
x36=((x35)+(x34));
x37=((-1.00000000000000)*(x11)*(x15));
x38=((x16)*(x19));
x39=((x38)+(x37));
x40=((x1)*(x5));
x41=((x10)*(x2)*(x9));
x42=((((-1.00000000000000)*(x41)))+(x40));
x43=((x11)*(x4)*(x9));
x44=((x16)*(x42));
x45=((x44)+(x43));
x46=((x1)*(x10));
x47=((x2)*(x5)*(x9));
x48=((x46)+(x47));
x49=((x22)*(x48));
x50=((x11)*(x42));
x51=((-1.00000000000000)*(x16)*(x4)*(x9));
x52=((x51)+(x50));
x53=((x24)*(x52));
x54=((x49)+(x53));
x55=((x0)*(x4));
x56=((x1)*(x12));
x57=((x55)+(x56));
x58=((x10)*(x57));
x59=((x3)*(x5)*(x9));
x60=((x59)+(x58));
x61=((-1.00000000000000)*(x60));
x62=((x0)*(x2));
x63=((x1)*(x7));
x64=((x62)+(((-1.00000000000000)*(x63))));
x65=((x5)*(x57));
x66=((x10)*(x3)*(x9));
x67=((x65)+(((-1.00000000000000)*(x66))));
x68=((x22)*(x67));
x69=((x16)*(x64));
x70=((x11)*(x61));
x71=((x70)+(x69));
x72=((x24)*(x71));
x73=((x72)+(x68));
x74=((x16)*(x61));
x75=((-1.00000000000000)*(x11)*(x64));
x76=((x75)+(x74));
eerot[0]=((((x20)*(x36)))+(((x21)*(x39))));
eerot[1]=((((-1.00000000000000)*(x21)*(((((x22)*(((((-1.00000000000000)*(x30)))+(x23)))))+(((x24)*(((((x11)*(x29)))+(x25)))))))))+(((x20)*(((((x16)*(x29)))+(((-1.00000000000000)*(x11)*(x15))))))));
eerot[2]=((((-1.00000000000000)*(x22)*(x33)))+(((x24)*(x31))));
eetrans[0]=((0.0290000000000000)+(((0.0751000000000000)*(x21)*(x39)))+(((-0.289820000000000)*(x0)*(x9)))+(((0.0289900000000000)*(x0)))+(((-0.00200000000000000)*(x24)*(x31)))+(((0.0751000000000000)*(x20)*(x36)))+(((-0.261080000000000)*(x30)))+(((0.261080000000000)*(x23)))+(((0.00200000000000000)*(x22)*(x33)))+(((0.0290000000000000)*(x6)))+(((-0.0290000000000000)*(x7)))+(((-0.0289900000000000)*(x27)))+(((-0.0289900000000000)*(x26))));
eerot[3]=((((x20)*(x54)))+(((x21)*(x45))));
eerot[4]=((((x20)*(x45)))+(((-1.00000000000000)*(x21)*(x54))));
eerot[5]=((((-1.00000000000000)*(x22)*(((x50)+(((-1.00000000000000)*(x16)*(x4)*(x9)))))))+(((x24)*(x48))));
eetrans[1]=((0.0921200000000000)+(((0.0751000000000000)*(x21)*(x45)))+(((-0.0289900000000000)*(x41)))+(((-0.00200000000000000)*(x24)*(x48)))+(((0.0290000000000000)*(x2)*(x9)))+(((0.261080000000000)*(x47)))+(((0.261080000000000)*(x46)))+(((0.0289900000000000)*(x40)))+(((0.0751000000000000)*(x20)*(x54)))+(((0.289820000000000)*(x1)))+(((0.00200000000000000)*(x22)*(x52))));
eerot[6]=((((-1.00000000000000)*(x20)*(x73)))+(((-1.00000000000000)*(x21)*(x76))));
eerot[7]=((((x21)*(x73)))+(((-1.00000000000000)*(x20)*(x76))));
eerot[8]=((((-1.00000000000000)*(x24)*(x67)))+(((x22)*(x71))));
eetrans[2]=((((-0.0751000000000000)*(x20)*(x73)))+(((-0.00200000000000000)*(x22)*(x71)))+(((-0.0289900000000000)*(x3)))+(((0.0289900000000000)*(x58)))+(((0.0289900000000000)*(x59)))+(((-0.0751000000000000)*(x21)*(((((-1.00000000000000)*(x11)*(x64)))+(x74)))))+(((0.00200000000000000)*(x24)*(x67)))+(((0.289820000000000)*(x3)*(x9)))+(((-0.0290000000000000)*(x56)))+(((-0.0290000000000000)*(x55)))+(((0.261080000000000)*(x66)))+(((-0.261080000000000)*(x65))));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j0, cj0, sj0,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.0290000000000000)+(px)+(((-0.0751000000000000)*(r00)))+(((0.00200000000000000)*(r02))));
new_r10=((-1.00000000000000)*(r20));
new_r11=((-1.00000000000000)*(r21));
new_r12=((-1.00000000000000)*(r22));
new_py=((((-0.00200000000000000)*(r22)))+(((0.0751000000000000)*(r20)))+(((-1.00000000000000)*(pz))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((-0.0921200000000000)+(py)+(((0.00200000000000000)*(r12)))+(((-0.0751000000000000)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
dummyeval[0]=((0.121052995200000)+(((0.0579800000000000)*(py)*(sj0)))+(((0.0579800000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
IKReal op[2+1], zeror[2];
int numroots;
IKReal x0=((0.0579800000000000)*(py)*(sj0));
IKReal x1=((0.0579800000000000)*(cj0)*(px));
op[0]=((0.121052995200000)+(x1)+(x0)+(((-1.00000000000000)*(pp))));
op[1]=0.299301982400000;
op[2]=((0.184945802400000)+(x1)+(x0)+(((-1.00000000000000)*(pp))));
polyroots2(op,zeror,numroots);
IKReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IKReal htj3 = zeror[ij3];
tempj3array[0]=((2.00000000000000)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
bool valid = true;
for( int kj3 = 0; kj3 < numsolutions; ++kj3)
{
    if( IKabs(cj3array[kj3]-cj3array[numsolutions]) < 0.0001 && IKabs(sj3array[kj3]-sj3array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x2=((cj0)*(px));
IKReal x3=((py)*(sj0));
IKReal x4=(pz)*(pz);
IKReal x5=((x3)+(x2));
IKReal x6=((0.0289900000000000)+(((-1.00000000000000)*(x5))));
IKReal x7=(x6)*(x6);
IKReal x8=((x7)+(x4));
if( (x8) < (IKReal)-0.00001 )
    continue;
IKReal x9=IKsqrt(x8);
IKReal x10=IKabs(x9);
IKReal x11=((IKabs(x10) != 0)?((IKReal)1/(x10)):(IKReal)1.0e30);
IKReal x12=((0.0289900000000000)*(cj3));
IKReal x13=((0.261080000000000)*(sj3));
IKReal x14=((0.289820000000000)+(x13)+(x12));
IKReal x15=((x11)*(x14));
if( (x15) < -1.0001 || (x15) > 1.0001 )
    continue;
IKReal x16=IKasin(x15);
IKReal x17=((-1.00000000000000)*(pz));
IKReal x18=((-0.0289900000000000)+(x5));
IKReal x19=IKatan2(x17, x18);
j1array[0]=((((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x16))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x19)))+(x16));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
if( j1array[1] > IKPI )
    j1array[1]-=IK2PI;
else if( j1array[1] < -IKPI )
    j1array[1]+=IK2PI;
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
    j1valid[1]=false;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[1];
dummyeval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
dummyeval[1]=((((-0.0289900000000000)*(cj0)*(py)*(sj3)))+(((-0.0290000000000000)*(px)*(sj0)))+(((0.0289900000000000)*(px)*(sj0)*(sj3)))+(((-0.261080000000000)*(cj3)*(px)*(sj0)))+(((0.0290000000000000)*(cj0)*(py)))+(((0.261080000000000)*(cj0)*(cj3)*(py))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
dummyeval[1]=((((0.0289900000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((-0.261080000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((0.00756870920000000)*(cj1)*(cj3)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((0.0289900000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((0.0289900000000000)*(pz)*(sj1)*(sj3)))+(((-0.000840420100000000)*(cj1)*(sj3)))+(((-0.261080000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((0.000840710000000000)*(cj1)))+(((-0.261080000000000)*(cj3)*(pz)*(sj1))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.43686625422969e-5)+(((0.0579800000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp)))+(((0.0579800000000000)*(cj0)*(px))));
evalcond[2]=((0.0287411105814950)+(((-0.0289900000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
IKReal x20=26268.4576060339;
IKReal x21=((4.20270446495974e-6)*(x20));
if( (x21) < -1.0001 || (x21) > 1.0001 )
    continue;
IKReal x22=IKasin(x21);
IKReal x23=((1.68138208066100)+(x22));
dummyeval[0]=((72500000000.0000)+(((652700000000.000)*(IKcos(x23))))+(((72475000000.0000)*(IKsin(x23)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
IKReal x24=26268.4576060339;
IKReal x25=((4.20270446495974e-6)*(x24));
if( (x25) < -1.0001 || (x25) > 1.0001 )
    continue;
IKReal x26=IKasin(x25);
IKReal x27=((1.68138208066100)+(x26));
IKReal x28=IKsin(x27);
IKReal x29=IKcos(x27);
dummyeval[0]=((72500000000.0000)+(((652700000000.000)*(x29)))+(((72475000000.0000)*(x28))));
dummyeval[1]=((((72500000000.0000)*(cj0)*(py)))+(((652700000000.000)*(cj0)*(py)*(x29)))+(((-72475000000.0000)*(px)*(sj0)*(x28)))+(((-72500000000.0000)*(px)*(sj0)))+(((-652700000000.000)*(px)*(sj0)*(x29)))+(((72475000000.0000)*(cj0)*(py)*(x28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
IKReal x30=26268.4576060339;
IKReal x31=((4.20270446495974e-6)*(x30));
if( (x31) < -1.0001 || (x31) > 1.0001 )
    continue;
IKReal x32=IKasin(x31);
IKReal x33=((1.68138208066100)+(x32));
IKReal x34=IKcos(x33);
IKReal x35=IKsin(x33);
dummyeval[0]=((((2101775000.00000)*(cj1)))+(((2101050250.00000)*(cj1)*(x35)))+(((-72500000000.0000)*(pz)*(sj1)))+(((-72500000000.0000)*(cj1)*(py)*(sj0)))+(((-652700000000.000)*(cj0)*(cj1)*(px)*(x34)))+(((-652700000000.000)*(cj1)*(py)*(sj0)*(x34)))+(((-72475000000.0000)*(pz)*(sj1)*(x35)))+(((-72475000000.0000)*(cj1)*(py)*(sj0)*(x35)))+(((-72475000000.0000)*(cj0)*(cj1)*(px)*(x35)))+(((18921773000.0000)*(cj1)*(x34)))+(((-652700000000.000)*(pz)*(sj1)*(x34)))+(((-72500000000.0000)*(cj0)*(cj1)*(px))));
dummyeval[1]=((72500000000.0000)+(((72475000000.0000)*(x35)))+(((652700000000.000)*(x34))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x36=26268.4576060339;
IKReal x37=((4.20270446495974e-6)*(x36));
if( (x37) < -1.0001 || (x37) > 1.0001 )
    continue;
IKReal x38=IKasin(x37);
IKReal x39=((1.68138208066100)+(x38));
IKReal x40=IKcos(x39);
IKReal x41=IKsin(x39);
IKReal x42=((72475000000.0000)*(cj1));
j2array[0]=IKatan2(((((IKabs(((((2101775000.00000)*(cj1)))+(((-72500000000.0000)*(pz)*(sj1)))+(((-652700000000.000)*(cj0)*(cj1)*(px)*(x40)))+(((-652700000000.000)*(cj1)*(py)*(sj0)*(x40)))+(((-72500000000.0000)*(cj1)*(py)*(sj0)))+(((-72475000000.0000)*(pz)*(sj1)*(x41)))+(((-1.00000000000000)*(py)*(sj0)*(x41)*(x42)))+(((18921773000.0000)*(cj1)*(x40)))+(((-652700000000.000)*(pz)*(sj1)*(x40)))+(((-1.00000000000000)*(cj0)*(px)*(x41)*(x42)))+(((2101050250.00000)*(cj1)*(x41)))+(((-72500000000.0000)*(cj0)*(cj1)*(px))))) != 0)?((IKReal)1/(((((2101775000.00000)*(cj1)))+(((-72500000000.0000)*(pz)*(sj1)))+(((-652700000000.000)*(cj0)*(cj1)*(px)*(x40)))+(((-652700000000.000)*(cj1)*(py)*(sj0)*(x40)))+(((-72500000000.0000)*(cj1)*(py)*(sj0)))+(((-72475000000.0000)*(pz)*(sj1)*(x41)))+(((-1.00000000000000)*(py)*(sj0)*(x41)*(x42)))+(((18921773000.0000)*(cj1)*(x40)))+(((-652700000000.000)*(pz)*(sj1)*(x40)))+(((-1.00000000000000)*(cj0)*(px)*(x41)*(x42)))+(((2101050250.00000)*(cj1)*(x41)))+(((-72500000000.0000)*(cj0)*(cj1)*(px)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))*(((((-2500000000000.00)*(cj0)*(cj1)*(px)))+(((-2500000000000.00)*(cj1)*(py)*(sj0)))+(x42)+(((-2500000000000.00)*(pz)*(sj1)))))), ((((IKabs(((72500000000.0000)+(((72475000000.0000)*(x41)))+(((652700000000.000)*(x40))))) != 0)?((IKReal)1/(((72500000000.0000)+(((72475000000.0000)*(x41)))+(((652700000000.000)*(x40)))))):(IKReal)1.0e30))*(((((2500000000000.00)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(x42)))+(((2500000000000.00)*(pz)*(sj1)))+(((2500000000000.00)*(cj1)*(py)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x175=26268.4576060339;
IKReal x176=((4.20270446495974e-6)*(x175));
if( (x176) < -1.0001 || (x176) > 1.0001 )
    continue;
IKReal x177=IKasin(x176);
IKReal x178=((1.68138208066100)+(x177));
IKReal x179=IKsin(x178);
IKReal x180=IKcos(x178);
j2array[0]=IKatan2(((((IKabs(((72500000000.0000)+(((652700000000.000)*(x180)))+(((72475000000.0000)*(x179))))) != 0)?((IKReal)1/(((72500000000.0000)+(((652700000000.000)*(x180)))+(((72475000000.0000)*(x179)))))):(IKReal)1.0e30))*(((((2500000000000.00)*(cj0)*(py)))+(((-2500000000000.00)*(px)*(sj0)))))), ((((IKabs(((((72475000000.0000)*(cj0)*(py)*(x179)))+(((72500000000.0000)*(cj0)*(py)))+(((-652700000000.000)*(px)*(sj0)*(x180)))+(((652700000000.000)*(cj0)*(py)*(x180)))+(((-72475000000.0000)*(px)*(sj0)*(x179)))+(((-72500000000.0000)*(px)*(sj0))))) != 0)?((IKReal)1/(((((72475000000.0000)*(cj0)*(py)*(x179)))+(((72500000000.0000)*(cj0)*(py)))+(((-652700000000.000)*(px)*(sj0)*(x180)))+(((652700000000.000)*(cj0)*(py)*(x180)))+(((-72475000000.0000)*(px)*(sj0)*(x179)))+(((-72500000000.0000)*(px)*(sj0)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))*(((((-2500000000000.00)*(cj0)*(cj1)*(px)))+(((72475000000.0000)*(cj1)))+(((-2500000000000.00)*(cj1)*(py)*(sj0)))+(((-2500000000000.00)*(pz)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x181=26268.4576060339;
IKReal x182=((4.20270446495974e-6)*(x181));
if( (x182) < -1.0001 || (x182) > 1.0001 )
    continue;
IKReal x183=IKasin(x182);
IKReal x184=((1.68138208066100)+(x183));
IKReal x185=IKsin(x184);
IKReal x186=((72475000000.0000)*(x185));
IKReal x187=IKcos(x184);
IKReal x188=((652700000000.000)*(x187));
IKReal x189=((72500000000.0000)+(x186)+(x188));
IKReal x190=((IKabs(x189) != 0)?((IKReal)1/(x189)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x190)*(((((2500000000000.00)*(cj0)*(py)))+(((-2500000000000.00)*(px)*(sj0)))))), ((x190)*(((((2500000000000.00)*(cj0)*(cj1)*(px)))+(((2500000000000.00)*(pz)*(sj1)))+(((-72475000000.0000)*(cj1)))+(((2500000000000.00)*(cj1)*(py)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.302649166262542)+(((0.0579800000000000)*(py)*(sj0)))+(((-1.00000000000000)*(pp)))+(((0.0579800000000000)*(cj0)*(px))));
evalcond[2]=((0.550898889418505)+(((-0.0289900000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
IKReal x191=26268.4576060339;
IKReal x192=((4.20270446495974e-6)*(x191));
if( (x192) < -1.0001 || (x192) > 1.0001 )
    continue;
IKReal x193=IKasin(x192);
IKReal x194=((1.46021057292879)+(x193));
dummyeval[0]=((72500000000.0000)+(((652700000000.000)*(IKcos(x194))))+(((-72475000000.0000)*(IKsin(x194)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
IKReal x195=26268.4576060339;
IKReal x196=((4.20270446495974e-6)*(x195));
if( (x196) < -1.0001 || (x196) > 1.0001 )
    continue;
IKReal x197=IKasin(x196);
IKReal x198=((1.46021057292879)+(x197));
IKReal x199=IKsin(x198);
IKReal x200=IKcos(x198);
dummyeval[0]=((72500000000.0000)+(((-72475000000.0000)*(x199)))+(((652700000000.000)*(x200))));
dummyeval[1]=((((72475000000.0000)*(px)*(sj0)*(x199)))+(((-72475000000.0000)*(cj0)*(py)*(x199)))+(((72500000000.0000)*(cj0)*(py)))+(((652700000000.000)*(cj0)*(py)*(x200)))+(((-652700000000.000)*(px)*(sj0)*(x200)))+(((-72500000000.0000)*(px)*(sj0))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
IKReal x201=26268.4576060339;
IKReal x202=((4.20270446495974e-6)*(x201));
if( (x202) < -1.0001 || (x202) > 1.0001 )
    continue;
IKReal x203=IKasin(x202);
IKReal x204=((1.46021057292879)+(x203));
IKReal x205=IKsin(x204);
IKReal x206=IKcos(x204);
dummyeval[0]=((((2101775000.00000)*(cj1)))+(((-72500000000.0000)*(pz)*(sj1)))+(((-652700000000.000)*(cj1)*(py)*(sj0)*(x206)))+(((-72500000000.0000)*(cj1)*(py)*(sj0)))+(((72475000000.0000)*(cj0)*(cj1)*(px)*(x205)))+(((-652700000000.000)*(pz)*(sj1)*(x206)))+(((-2101050250.00000)*(cj1)*(x205)))+(((-652700000000.000)*(cj0)*(cj1)*(px)*(x206)))+(((18921773000.0000)*(cj1)*(x206)))+(((72475000000.0000)*(pz)*(sj1)*(x205)))+(((72475000000.0000)*(cj1)*(py)*(sj0)*(x205)))+(((-72500000000.0000)*(cj0)*(cj1)*(px))));
dummyeval[1]=((72500000000.0000)+(((-72475000000.0000)*(x205)))+(((652700000000.000)*(x206))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x207=26268.4576060339;
IKReal x208=((4.20270446495974e-6)*(x207));
if( (x208) < -1.0001 || (x208) > 1.0001 )
    continue;
IKReal x209=IKasin(x208);
IKReal x210=((1.46021057292879)+(x209));
IKReal x211=IKsin(x210);
IKReal x212=IKcos(x210);
IKReal x213=((72475000000.0000)*(cj1));
j2array[0]=IKatan2(((((IKabs(((((2101775000.00000)*(cj1)))+(((py)*(sj0)*(x211)*(x213)))+(((-72500000000.0000)*(pz)*(sj1)))+(((-72500000000.0000)*(cj1)*(py)*(sj0)))+(((72475000000.0000)*(pz)*(sj1)*(x211)))+(((-652700000000.000)*(pz)*(sj1)*(x212)))+(((18921773000.0000)*(cj1)*(x212)))+(((-2101050250.00000)*(cj1)*(x211)))+(((-652700000000.000)*(cj0)*(cj1)*(px)*(x212)))+(((-652700000000.000)*(cj1)*(py)*(sj0)*(x212)))+(((cj0)*(px)*(x211)*(x213)))+(((-72500000000.0000)*(cj0)*(cj1)*(px))))) != 0)?((IKReal)1/(((((2101775000.00000)*(cj1)))+(((py)*(sj0)*(x211)*(x213)))+(((-72500000000.0000)*(pz)*(sj1)))+(((-72500000000.0000)*(cj1)*(py)*(sj0)))+(((72475000000.0000)*(pz)*(sj1)*(x211)))+(((-652700000000.000)*(pz)*(sj1)*(x212)))+(((18921773000.0000)*(cj1)*(x212)))+(((-2101050250.00000)*(cj1)*(x211)))+(((-652700000000.000)*(cj0)*(cj1)*(px)*(x212)))+(((-652700000000.000)*(cj1)*(py)*(sj0)*(x212)))+(((cj0)*(px)*(x211)*(x213)))+(((-72500000000.0000)*(cj0)*(cj1)*(px)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))*(((((-2500000000000.00)*(cj0)*(cj1)*(px)))+(((-2500000000000.00)*(cj1)*(py)*(sj0)))+(x213)+(((-2500000000000.00)*(pz)*(sj1)))))), ((((IKabs(((72500000000.0000)+(((-72475000000.0000)*(x211)))+(((652700000000.000)*(x212))))) != 0)?((IKReal)1/(((72500000000.0000)+(((-72475000000.0000)*(x211)))+(((652700000000.000)*(x212)))))):(IKReal)1.0e30))*(((((2500000000000.00)*(cj0)*(cj1)*(px)))+(((2500000000000.00)*(pz)*(sj1)))+(((2500000000000.00)*(cj1)*(py)*(sj0)))+(((-1.00000000000000)*(x213)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x214=26268.4576060339;
IKReal x215=((4.20270446495974e-6)*(x214));
if( (x215) < -1.0001 || (x215) > 1.0001 )
    continue;
IKReal x216=IKasin(x215);
IKReal x217=((1.46021057292879)+(x216));
IKReal x218=IKsin(x217);
IKReal x219=IKcos(x217);
j2array[0]=IKatan2(((((IKabs(((72500000000.0000)+(((-72475000000.0000)*(x218)))+(((652700000000.000)*(x219))))) != 0)?((IKReal)1/(((72500000000.0000)+(((-72475000000.0000)*(x218)))+(((652700000000.000)*(x219)))))):(IKReal)1.0e30))*(((((2500000000000.00)*(cj0)*(py)))+(((-2500000000000.00)*(px)*(sj0)))))), ((((IKabs(((((-652700000000.000)*(px)*(sj0)*(x219)))+(((72500000000.0000)*(cj0)*(py)))+(((-72475000000.0000)*(cj0)*(py)*(x218)))+(((652700000000.000)*(cj0)*(py)*(x219)))+(((72475000000.0000)*(px)*(sj0)*(x218)))+(((-72500000000.0000)*(px)*(sj0))))) != 0)?((IKReal)1/(((((-652700000000.000)*(px)*(sj0)*(x219)))+(((72500000000.0000)*(cj0)*(py)))+(((-72475000000.0000)*(cj0)*(py)*(x218)))+(((652700000000.000)*(cj0)*(py)*(x219)))+(((72475000000.0000)*(px)*(sj0)*(x218)))+(((-72500000000.0000)*(px)*(sj0)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))*(((((-2500000000000.00)*(cj0)*(cj1)*(px)))+(((72475000000.0000)*(cj1)))+(((-2500000000000.00)*(cj1)*(py)*(sj0)))+(((-2500000000000.00)*(pz)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x220=26268.4576060339;
IKReal x221=((4.20270446495974e-6)*(x220));
if( (x221) < -1.0001 || (x221) > 1.0001 )
    continue;
IKReal x222=IKasin(x221);
IKReal x223=((1.46021057292879)+(x222));
IKReal x224=IKcos(x223);
IKReal x225=((652700000000.000)*(x224));
IKReal x226=((72500000000.0000)+(x225));
IKReal x227=IKsin(x223);
IKReal x228=((72475000000.0000)*(x227));
IKReal x229=((x226)+(((-1.00000000000000)*(x228))));
IKReal x230=((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x230)*(((((2500000000000.00)*(cj0)*(py)))+(((-2500000000000.00)*(px)*(sj0)))))), ((x230)*(((((2500000000000.00)*(cj0)*(cj1)*(px)))+(((2500000000000.00)*(pz)*(sj1)))+(((-72475000000.0000)*(cj1)))+(((2500000000000.00)*(cj1)*(py)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x231=((0.261080000000000)*(cj3));
IKReal x232=((0.0290000000000000)+(x231));
IKReal x233=((0.0289900000000000)*(sj3));
IKReal x234=((((-1.00000000000000)*(x233)))+(x232));
IKReal x235=((px)*(sj0));
IKReal x236=((cj0)*(py));
j2array[0]=IKatan2(((((IKabs(x234) != 0)?((IKReal)1/(x234)):(IKReal)1.0e30))*(((((-1.00000000000000)*(x235)))+(x236)))), ((((IKabs(((((-1.00000000000000)*(cj0)*(cj1)*(px)*(x231)))+(((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)*(x231)))+(((0.00756870920000000)*(cj1)*(cj3)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((-1.00000000000000)*(pz)*(sj1)*(x231)))+(((cj1)*(py)*(sj0)*(x233)))+(((pz)*(sj1)*(x233)))+(((-0.000840420100000000)*(cj1)*(sj3)))+(((cj0)*(cj1)*(px)*(x233)))+(((0.000840710000000000)*(cj1))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(cj0)*(cj1)*(px)*(x231)))+(((-0.0290000000000000)*(cj0)*(cj1)*(px)))+(((-0.0290000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)*(x231)))+(((0.00756870920000000)*(cj1)*(cj3)))+(((-0.0290000000000000)*(cj1)*(py)*(sj0)))+(((-1.00000000000000)*(pz)*(sj1)*(x231)))+(((cj1)*(py)*(sj0)*(x233)))+(((pz)*(sj1)*(x233)))+(((-0.000840420100000000)*(cj1)*(sj3)))+(((cj0)*(cj1)*(px)*(x233)))+(((0.000840710000000000)*(cj1)))))):(IKReal)1.0e30))*((((((((-1.00000000000000)*(x236)))+(x235)))*(((((-1.00000000000000)*(x236)))+(x235))))+(((-1.00000000000000)*((x234)*(x234))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x237=((px)*(sj0));
IKReal x238=((cj0)*(py));
j2array[0]=IKatan2(((((IKabs(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x237)))+(x238)))), ((((IKabs(((((0.0289900000000000)*(sj3)*(x237)))+(((-0.0289900000000000)*(sj3)*(x238)))+(((0.261080000000000)*(cj3)*(x238)))+(((-0.261080000000000)*(cj3)*(x237)))+(((-0.0290000000000000)*(x237)))+(((0.0290000000000000)*(x238))))) != 0)?((IKReal)1/(((((0.0289900000000000)*(sj3)*(x237)))+(((-0.0289900000000000)*(sj3)*(x238)))+(((0.261080000000000)*(cj3)*(x238)))+(((-0.261080000000000)*(cj3)*(x237)))+(((-0.0290000000000000)*(x237)))+(((0.0290000000000000)*(x238)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x238)))+(x237)))*(((((0.0289900000000000)*(cj1)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x239=((0.261080000000000)*(cj3));
IKReal x240=((0.0290000000000000)+(x239));
IKReal x241=((0.0289900000000000)*(sj3));
IKReal x242=((x240)+(((-1.00000000000000)*(x241))));
IKReal x243=((IKabs(x242) != 0)?((IKReal)1/(x242)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x243)*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((x243)*(((((cj1)*(py)*(sj0)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))+(((-0.0289900000000000)*(cj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x43=((cj0)*(cj2));
IKReal x44=((cj1)*(sj0)*(sj2));
IKReal x45=((((-1.00000000000000)*(x44)))+(x43));
IKReal x46=((cj2)*(sj0));
IKReal x47=((cj0)*(cj1)*(sj2));
IKReal x48=((x46)+(x47));
IKReal x49=((-1.00000000000000)*(x48));
IKReal x50=((cj1)*(cj2)*(sj3));
IKReal x51=((cj3)*(sj1));
IKReal x52=((x51)+(x50));
IKReal x53=((-1.00000000000000)*(x52));
IKReal x54=((sj0)*(x53));
IKReal x55=((cj0)*(sj2)*(sj3));
IKReal x56=((x54)+(((-1.00000000000000)*(x55))));
IKReal x57=((cj1)*(cj3));
IKReal x58=((cj2)*(sj1)*(sj3));
IKReal x59=((x57)+(((-1.00000000000000)*(x58))));
IKReal x60=((cj0)*(x53));
IKReal x61=((sj0)*(sj2)*(sj3));
IKReal x62=((x60)+(x61));
IKReal x63=((cj2)*(x57));
IKReal x64=((sj1)*(sj3));
IKReal x65=((x63)+(((-1.00000000000000)*(x64))));
IKReal x66=((cj0)*(cj3)*(sj2));
IKReal x67=((sj0)*(x65));
IKReal x68=((x66)+(x67));
IKReal x69=((cj1)*(sj3));
IKReal x70=((cj2)*(x51));
IKReal x71=((x70)+(x69));
IKReal x72=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IKReal x73=((cj0)*(x65));
IKReal x74=((x73)+(x72));
new_r00=((((r00)*(x49)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r10)*(x45))));
new_r01=((((r01)*(x49)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r11)*(x45))));
new_r02=((((r02)*(x49)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r12)*(x45))));
new_r10=((((r10)*(x56)))+(((r00)*(x62)))+(((r20)*(x59))));
new_r11=((((r11)*(x56)))+(((r01)*(x62)))+(((r21)*(x59))));
new_r12=((((r22)*(x59)))+(((r12)*(((x54)+(((-1.00000000000000)*(x55)))))))+(((r02)*(x62))));
new_r20=((((r10)*(x68)))+(((r20)*(x71)))+(((r00)*(x74))));
new_r21=((((r21)*(x71)))+(((r11)*(x68)))+(((r01)*(x74))));
new_r22=((((r02)*(((x73)+(((-1.00000000000000)*(cj3)*(sj0)*(sj2)))))))+(((r22)*(x71)))+(((r12)*(x68))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
sj5array[0]=new_r22;
if( sj5array[0] >= -1.0001 && sj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
    j5valid[1]=false;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r00)*(new_r02)))+(((cj5)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r01)*(new_r02)))+(((cj5)*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[7];
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x75=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x75));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x75))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
IKReal x76=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x76;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x76;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x77=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x77));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x77))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x78=((cj5)*(new_r01)*(new_r02));
IKReal x79=((cj5)*(new_r11)*(new_r12));
IKReal x80=((x79)+(x78));
IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r21)*(sj5)*(x81)), ((new_r02)*(new_r21)*(sj5)*(x81)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x82=((cj4)*(new_r12));
IKReal x83=((new_r02)*(sj4));
IKReal x84=((x82)+(((-1.00000000000000)*(x83))));
IKReal x85=((new_r12)*(sj4));
IKReal x86=((cj4)*(new_r02));
IKReal x87=((x86)+(x85));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x84;
evalcond[5]=x84;
evalcond[6]=x87;
evalcond[7]=x87;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x88=((cj4)*(new_r12));
IKReal x89=((new_r02)*(sj4));
IKReal x90=((x88)+(((-1.00000000000000)*(x89))));
IKReal x91=((new_r12)*(sj4));
IKReal x92=((cj4)*(new_r02));
IKReal x93=((x91)+(x92));
IKReal x94=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x94;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x90;
evalcond[5]=x90;
evalcond[6]=x93;
evalcond[7]=((-1.00000000000000)*(x93));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x94;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x95=((cj4)*(new_r12));
IKReal x96=((new_r02)*(sj4));
IKReal x97=((x95)+(((-1.00000000000000)*(x96))));
IKReal x98=((cj4)*(new_r00));
IKReal x99=((new_r10)*(sj4));
IKReal x100=((x99)+(x98));
IKReal x101=((cj4)*(new_r01));
IKReal x102=((new_r11)*(sj4));
IKReal x103=((x101)+(x102));
IKReal x104=((new_r12)*(sj4));
IKReal x105=((cj4)*(new_r02));
IKReal x106=((1.00000000000000)+(x104)+(x105));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=new_r22;
evalcond[2]=x97;
evalcond[3]=x97;
evalcond[4]=x106;
evalcond[5]=x103;
evalcond[6]=x100;
evalcond[7]=new_r22;
evalcond[8]=x100;
evalcond[9]=x103;
evalcond[10]=x106;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x107=((cj4)*(new_r12));
IKReal x108=((new_r02)*(sj4));
IKReal x109=((((-1.00000000000000)*(x108)))+(x107));
IKReal x110=((cj4)*(new_r00));
IKReal x111=((new_r10)*(sj4));
IKReal x112=((x111)+(x110));
IKReal x113=((cj4)*(new_r01));
IKReal x114=((new_r11)*(sj4));
IKReal x115=((x113)+(x114));
IKReal x116=((new_r12)*(sj4));
IKReal x117=((cj4)*(new_r02));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=new_r22;
evalcond[2]=x109;
evalcond[3]=x109;
evalcond[4]=((-1.00000000000000)+(x117)+(x116));
evalcond[5]=x115;
evalcond[6]=x112;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x112));
evalcond[9]=((-1.00000000000000)*(x115));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x118=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x118)), ((new_r20)*(x118)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x119=((cj5)*(new_r00)*(new_r02));
IKReal x120=((cj5)*(new_r10)*(new_r12));
IKReal x121=((x120)+(x119));
IKReal x122=((IKabs(x121) != 0)?((IKReal)1/(x121)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r20)*(sj5)*(x122)), ((new_r02)*(new_r20)*(sj5)*(x122)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x123=((cj4)*(new_r12));
IKReal x124=((new_r02)*(sj4));
IKReal x125=((((-1.00000000000000)*(x124)))+(x123));
IKReal x126=((new_r12)*(sj4));
IKReal x127=((cj4)*(new_r02));
IKReal x128=((x126)+(x127));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x125;
evalcond[5]=x125;
evalcond[6]=x128;
evalcond[7]=x128;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x129=((cj4)*(new_r12));
IKReal x130=((new_r02)*(sj4));
IKReal x131=((x129)+(((-1.00000000000000)*(x130))));
IKReal x132=((new_r12)*(sj4));
IKReal x133=((cj4)*(new_r02));
IKReal x134=((x133)+(x132));
IKReal x135=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x135;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x131;
evalcond[5]=x131;
evalcond[6]=x134;
evalcond[7]=((-1.00000000000000)*(x134));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x135;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x136=((cj4)*(new_r12));
IKReal x137=((new_r02)*(sj4));
IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
IKReal x139=((cj4)*(new_r00));
IKReal x140=((new_r10)*(sj4));
IKReal x141=((x140)+(x139));
IKReal x142=((cj4)*(new_r01));
IKReal x143=((new_r11)*(sj4));
IKReal x144=((x142)+(x143));
IKReal x145=((new_r12)*(sj4));
IKReal x146=((cj4)*(new_r02));
IKReal x147=((1.00000000000000)+(x145)+(x146));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=new_r22;
evalcond[2]=x138;
evalcond[3]=x138;
evalcond[4]=x147;
evalcond[5]=x144;
evalcond[6]=x141;
evalcond[7]=new_r22;
evalcond[8]=x141;
evalcond[9]=x144;
evalcond[10]=x147;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x148=((cj4)*(new_r12));
IKReal x149=((new_r02)*(sj4));
IKReal x150=((((-1.00000000000000)*(x149)))+(x148));
IKReal x151=((cj4)*(new_r00));
IKReal x152=((new_r10)*(sj4));
IKReal x153=((x152)+(x151));
IKReal x154=((cj4)*(new_r01));
IKReal x155=((new_r11)*(sj4));
IKReal x156=((x155)+(x154));
IKReal x157=((new_r12)*(sj4));
IKReal x158=((cj4)*(new_r02));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=new_r22;
evalcond[2]=x150;
evalcond[3]=x150;
evalcond[4]=((-1.00000000000000)+(x157)+(x158));
evalcond[5]=x156;
evalcond[6]=x153;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x153));
evalcond[9]=((-1.00000000000000)*(x156));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x158))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x159=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x159)), ((new_r20)*(x159)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x160=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x160)), ((new_r20)*(x160)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x161=(new_r12)*(new_r12);
IKReal x162=(new_r02)*(new_r02);
IKReal x163=((x162)+(x161));
IKReal x164=((-1.00000000000000)*(x163));
IKReal x165=((IKabs(x164) != 0)?((IKReal)1/(x164)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj5)*(new_r12)*(x165)), ((cj5)*(new_r02)*(x165)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x166=((new_r11)*(new_r12));
IKReal x167=((new_r01)*(new_r02));
IKReal x168=((x166)+(x167));
IKReal x169=((-1.00000000000000)*(x168));
IKReal x170=((IKabs(x169) != 0)?((IKReal)1/(x169)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(sj6)*(x170)), ((new_r02)*(sj5)*(sj6)*(x170)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x171=((new_r02)*(new_r10));
IKReal x172=((new_r00)*(new_r12));
IKReal x173=((((-1.00000000000000)*(x172)))+(x171));
IKReal x174=((IKabs(x173) != 0)?((IKReal)1/(x173)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x174)), ((new_r02)*(sj6)*(x174)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "4edeb2b682d975cf4384fec598de8f74"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
