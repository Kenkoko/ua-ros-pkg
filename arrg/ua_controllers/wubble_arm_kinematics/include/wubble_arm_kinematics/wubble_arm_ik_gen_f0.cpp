/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-12-13 21:40:15.775503
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76;
x0=IKsin(j[6]);
x1=IKsin(j[2]);
x2=IKsin(j[3]);
x3=IKsin(j[4]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[6]);
x7=IKsin(j[5]);
x8=IKcos(j[1]);
x9=IKcos(j[3]);
x10=IKcos(j[5]);
x11=IKsin(j[1]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((x0)*(x1)*(x3)*(x8));
x15=((x10)*(x4)*(x6)*(x8)*(x9));
x16=((x15)+(x14));
x17=((x0)*(x2)*(x4)*(x5)*(x8));
x18=((x0)*(x11)*(x5)*(x9));
x19=((x2)*(x3)*(x4)*(x6)*(x7)*(x8));
x20=((x1)*(x5)*(x6)*(x7)*(x8));
x21=((x11)*(x3)*(x6)*(x7)*(x9));
x22=((x10)*(x11)*(x2)*(x6));
x23=((x17)+(x19)+(x18)+(x20)+(x21)+(x22));
x24=((((-1.00000000000000)*(x23)))+(x16));
x25=((x0)*(x1)*(x2)*(x5));
x26=((x0)*(x3)*(x4));
x27=((x1)*(x2)*(x3)*(x6)*(x7));
x28=((x25)+(x26)+(x27));
x29=((x4)*(x5)*(x6)*(x7));
x30=((x1)*(x10)*(x6)*(x9));
x31=((x30)+(x29));
x32=((((-1.00000000000000)*(x31)))+(x28));
x33=((x10)*(x2)*(x3)*(x4)*(x8));
x34=((x1)*(x10)*(x5)*(x8));
x35=((x4)*(x7)*(x8)*(x9));
x36=((x10)*(x11)*(x3)*(x9));
x37=((x33)+(x36)+(x35)+(x34));
x38=((x11)*(x2)*(x7));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x10)*(x4)*(x5));
x41=((x1)*(x10)*(x2)*(x3));
x42=((x1)*(x7)*(x9));
x43=((x42)+(x41));
x44=((((-1.00000000000000)*(x43)))+(x40));
x45=((x0)*(x4)*(x5)*(x7));
x46=((x1)*(x2)*(x5)*(x6));
x47=((x3)*(x4)*(x6));
x48=((x0)*(x1)*(x10)*(x9));
x49=((x48)+(x46)+(x47)+(x45));
x50=((x0)*(x1)*(x2)*(x3)*(x7));
x51=((x49)+(((-1.00000000000000)*(x50))));
x52=((x0)*(x10)*(x11)*(x2));
x53=((x1)*(x3)*(x6)*(x8));
x54=((x0)*(x11)*(x3)*(x7)*(x9));
x55=((x2)*(x26)*(x7)*(x8));
x56=((x0)*(x1)*(x5)*(x7)*(x8));
x57=((x55)+(x54)+(x56)+(x53)+(x52));
x58=((x2)*(x4)*(x5)*(x6)*(x8));
x59=((x11)*(x5)*(x6)*(x9));
x60=((x0)*(x10)*(x4)*(x8)*(x9));
x61=((x59)+(x58)+(x60));
x62=((x57)+(((-1.00000000000000)*(x61))));
x63=((0.0289900000000000)*(x1)*(x2));
x64=((0.0290000000000000)*(x1));
x65=((0.261080000000000)*(x1)*(x9));
x66=((x64)+(x65));
x67=((x63)+(((-1.00000000000000)*(x66))));
x68=((0.0290000000000000)*(x4)*(x8));
x69=((0.261080000000000)*(x4)*(x8)*(x9));
x70=((x68)+(x69));
x71=((0.0289900000000000)*(x2)*(x4)*(x8));
x72=((0.289820000000000)*(x11));
x73=((0.261080000000000)*(x11)*(x2));
x74=((0.0289900000000000)*(x11)*(x9));
x75=((x74)+(x73)+(x72)+(x71));
x76=((((-1.00000000000000)*(x75)))+(x70));
eerot[0]=((((x13)*(x32)))+(((x12)*(x24))));
eerot[1]=((((x12)*(x62)))+(((x13)*(x51))));
eerot[2]=((((x12)*(x39)))+(((x13)*(x44))));
eetrans[0]=((0.0290000000000000)+(((0.0751000000000000)*(x13)*(x32)))+(((x13)*(x67)))+(((-0.00200000000000000)*(x13)*(x44)))+(((0.0751000000000000)*(x12)*(x24)))+(((x12)*(x76)))+(((0.0289900000000000)*(x12)))+(((-0.00200000000000000)*(x12)*(x39))));
eerot[3]=((((x0)*(x1)*(x11)*(x3)))+(((-1.00000000000000)*(x38)*(x47)))+(((x3)*(x6)*(x7)*(x8)*(x9)))+(((x0)*(x5)*(x8)*(x9)))+(((x10)*(x11)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x5)*(x6)*(x7)))+(((x10)*(x2)*(x6)*(x8)))+(((-1.00000000000000)*(x0)*(x11)*(x2)*(x4)*(x5))));
eerot[4]=((((x0)*(x1)*(x11)*(x5)*(x7)))+(((x26)*(x38)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x4)*(x9)))+(((-1.00000000000000)*(x11)*(x2)*(x4)*(x5)*(x6)))+(((-1.00000000000000)*(x0)*(x3)*(x7)*(x8)*(x9)))+(((x1)*(x11)*(x3)*(x6)))+(((x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x8))));
eerot[5]=((((x11)*(x4)*(x7)*(x9)))+(((-1.00000000000000)*(x10)*(x3)*(x8)*(x9)))+(((x1)*(x10)*(x11)*(x5)))+(((x2)*(x7)*(x8)))+(((x10)*(x11)*(x2)*(x3)*(x4))));
eetrans[1]=((0.0921200000000000)+(((0.0751000000000000)*(x3)*(x6)*(x7)*(x8)*(x9)))+(((0.00200000000000000)*(x10)*(x3)*(x8)*(x9)))+(((0.261080000000000)*(x2)*(x8)))+(((-0.00200000000000000)*(x1)*(x10)*(x11)*(x5)))+(((0.0751000000000000)*(x10)*(x2)*(x6)*(x8)))+(((0.0751000000000000)*(x10)*(x11)*(x4)*(x6)*(x9)))+(((0.0289900000000000)*(x8)*(x9)))+(((-0.0289900000000000)*(x11)*(x2)*(x4)))+(((-0.0751000000000000)*(x1)*(x11)*(x5)*(x6)*(x7)))+(((-0.00200000000000000)*(x10)*(x11)*(x2)*(x3)*(x4)))+(((0.261080000000000)*(x11)*(x4)*(x9)))+(((0.0751000000000000)*(x0)*(x1)*(x11)*(x3)))+(((0.0751000000000000)*(x0)*(x5)*(x8)*(x9)))+(((-0.00200000000000000)*(x11)*(x4)*(x7)*(x9)))+(((-0.00200000000000000)*(x2)*(x7)*(x8)))+(((-0.0751000000000000)*(x38)*(x47)))+(((0.289820000000000)*(x8)))+(((-0.0751000000000000)*(x0)*(x11)*(x2)*(x4)*(x5)))+(((0.0290000000000000)*(x11)*(x4))));
eerot[6]=((((x12)*(x32)))+(((-1.00000000000000)*(x13)*(x24))));
eerot[7]=((((-1.00000000000000)*(x13)*(x62)))+(((x12)*(x51))));
eerot[8]=((((x12)*(x44)))+(((-1.00000000000000)*(x13)*(x39))));
eetrans[2]=((((-1.00000000000000)*(x13)*(x76)))+(((0.00200000000000000)*(x13)*(x39)))+(((x12)*(x67)))+(((0.0751000000000000)*(x12)*(x32)))+(((-0.0751000000000000)*(x13)*(x24)))+(((-0.00200000000000000)*(x12)*(x44)))+(((-0.0289900000000000)*(x13))));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j0, cj0, sj0,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.00000000000000)*(r20)*(sj0)))+(((cj0)*(r00))));
new_r01=((((-1.00000000000000)*(r21)*(sj0)))+(((cj0)*(r01))));
new_r02=((((-1.00000000000000)*(r22)*(sj0)))+(((cj0)*(r02))));
new_px=((((-0.00200000000000000)*(r22)*(sj0)))+(((-0.0751000000000000)*(cj0)*(r00)))+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(((0.0290000000000000)+(((0.0289900000000000)*(cj0)))))))+(((-0.0289900000000000)*((sj0)*(sj0))))+(((0.00200000000000000)*(cj0)*(r02)))+(((cj0)*(px)))+(((0.0751000000000000)*(r20)*(sj0))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.0921200000000000)+(((0.00200000000000000)*(r12)))+(py)+(((-0.0751000000000000)*(r10))));
new_r20=((((cj0)*(r20)))+(((r00)*(sj0))));
new_r21=((((cj0)*(r21)))+(((r01)*(sj0))));
new_r22=((((cj0)*(r22)))+(((r02)*(sj0))));
new_pz=((((-0.0751000000000000)*(r00)*(sj0)))+(((-1.00000000000000)*(sj0)*(((0.0290000000000000)+(((0.0289900000000000)*(cj0)))))))+(((0.00200000000000000)*(r02)*(sj0)))+(((0.0289900000000000)*(cj0)*(sj0)))+(((0.00200000000000000)*(cj0)*(r22)))+(((px)*(sj0)))+(((cj0)*(pz)))+(((-0.0751000000000000)*(cj0)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=(pz)*(pz);
IKReal x1=((6.53497184281647)*(x0));
IKReal x2=(py)*(py);
IKReal x3=((6.53497184281647)*(x2));
IKReal x4=(px)*(px);
IKReal x5=((6.53497184281647)*(x4));
IKReal x6=((-1.00533888481549)+(x3)+(x1)+(x5));
if( (x6) < -1.0001 || (x6) > 1.0001 )
    continue;
IKReal x7=IKasin(x6);
j3array[0]=((-0.210315898568178)+(x7));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.93127675502162)+(((-1.00000000000000)*(x7))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
if( j3array[1] > IKPI )
    j3array[1]-=IK2PI;
else if( j3array[1] < -IKPI )
    j3array[1]+=IK2PI;
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x8=x4;
IKReal x9=x2;
IKReal x10=((x9)+(x8));
if( (x10) < (IKReal)-0.00001 )
    continue;
IKReal x11=IKsqrt(x10);
IKReal x12=IKabs(x11);
IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
IKReal x14=((0.261080000000000)*(sj3));
IKReal x15=((0.0289900000000000)*(cj3));
IKReal x16=((0.289820000000000)+(x15)+(x14));
IKReal x17=((x13)*(x16));
if( (x17) < -1.0001 || (x17) > 1.0001 )
    continue;
IKReal x18=IKasin(x17);
IKReal x19=((-1.00000000000000)*(py));
IKReal x20=IKatan2(x19, px);
j1array[0]=((((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x20)))+(x18));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
if( j1array[1] > IKPI )
    j1array[1]-=IK2PI;
else if( j1array[1] < -IKPI )
    j1array[1]+=IK2PI;
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
    j1valid[1]=false;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal j2eval[1];
j2eval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
j2eval[1]=((((0.0290000000000000)*(pz)))+(((0.261080000000000)*(cj3)*(pz)))+(((-0.0289900000000000)*(pz)*(sj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal j2eval[2];
j2eval[0]=((((0.0289900000000000)*(py)*(sj1)*(sj3)))+(((-0.261080000000000)*(cj3)*(py)*(sj1)))+(((-0.261080000000000)*(cj1)*(cj3)*(px)))+(((-0.0290000000000000)*(py)*(sj1)))+(((0.0289900000000000)*(cj1)*(px)*(sj3)))+(((-0.0290000000000000)*(cj1)*(px))));
j2eval[1]=((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x21=x4;
IKReal x22=x2;
IKReal x23=x0;
evalcond[0]=((IKfmod(((1.79200613704461)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0287411105814949)+(((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1))));
evalcond[2]=((0.000826051437457720)+(((-1.00000000000000)*(x23)))+(((-1.00000000000000)*(x22)))+(((-1.00000000000000)*(x21))));
evalcond[3]=((-0.0158334459000000)+(((-1.00000000000000)*(x23)))+(((-1.00000000000000)*(x22)))+(((-1.00000000000000)*(x21)))+(((0.579640000000000)*(cj1)*(py)))+(((-0.579640000000000)*(px)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((((0.975632718778622)*((py)*(py))*((sj1)*(sj1))))+(((0.975632718778622)*((cj1)*(cj1))*((px)*(px))))+(((0.975632718778622)*((pz)*(pz))))+(((1.95126543755724)*(cj1)*(px)*(py)*(sj1))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.219410113824852)*((cj1)*(cj1))*((px)*(px))))+(((-0.219410113824852)*((py)*(py))*((sj1)*(sj1))))+(((-0.219410113824852)*((pz)*(pz))))+(((-0.438820227649703)*(cj1)*(px)*(py)*(sj1))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x24=x2;
IKReal x25=(sj1)*(sj1);
IKReal x26=((0.219410113824852)*(x24)*(x25));
IKReal x27=x0;
IKReal x28=((0.219410113824852)*(x27));
IKReal x29=((0.438820227649703)*(cj1)*(px)*(py)*(sj1));
IKReal x30=(cj1)*(cj1);
IKReal x31=x4;
IKReal x32=((0.219410113824852)*(x30)*(x31));
IKReal x33=((x32)+(x26)+(x28)+(x29));
IKReal x34=((0.975632718778622)*(px)*(sj1));
IKReal x35=((0.0280407678573409)+(x34));
IKReal x36=((0.975632718778622)*(cj1)*(py));
IKReal x37=((((-1.00000000000000)*(x36)))+(x35));
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x37)*(((IKabs(x33) != 0)?((IKReal)1/(x33)):(IKReal)1.0e30))), ((-1.00000000000000)*(x37)*(((IKabs(x33) != 0)?((IKReal)1/(x33)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x59=x2;
IKReal x60=(sj1)*(sj1);
IKReal x61=((0.975632718778622)*(x59)*(x60));
IKReal x62=(cj1)*(cj1);
IKReal x63=x4;
IKReal x64=((0.975632718778622)*(x62)*(x63));
IKReal x65=x0;
IKReal x66=((0.975632718778622)*(x65));
IKReal x67=((1.95126543755724)*(cj1)*(px)*(py)*(sj1));
IKReal x68=((x61)+(x64)+(x66)+(x67));
IKReal x69=((0.219410113824852)*(px)*(sj1));
IKReal x70=((0.00630609034413843)+(x69));
IKReal x71=((0.219410113824852)*(cj1)*(py));
IKReal x72=((((-1.00000000000000)*(x71)))+(x70));
j2array[0]=IKatan2(((pz)*(x72)*(((IKabs(x68) != 0)?((IKReal)1/(x68)):(IKReal)1.0e30))), ((-1.00000000000000)*(x72)*(((IKabs(x68) != 0)?((IKReal)1/(x68)):(IKReal)1.0e30))*(((((cj1)*(px)))+(((py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x73=x4;
IKReal x74=x2;
IKReal x75=x0;
evalcond[0]=((IKfmod(((-1.57083462931239)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.550898889418505)+(((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1))));
evalcond[2]=((0.303489586362542)+(((-1.00000000000000)*(x73)))+(((-1.00000000000000)*(x74)))+(((-1.00000000000000)*(x75))));
evalcond[3]=((-0.0158334459000000)+(((-1.00000000000000)*(x73)))+(((-1.00000000000000)*(x74)))+(((-1.00000000000000)*(x75)))+(((0.579640000000000)*(cj1)*(py)))+(((-0.579640000000000)*(px)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-3.83025174864983e-5)*((py)*(py))*((sj1)*(sj1))))+(((-3.83025174864983e-5)*((cj1)*(cj1))*((px)*(px))))+(((-7.66050349729967e-5)*(cj1)*(px)*(py)*(sj1)))+(((-3.83025174864983e-5)*((pz)*(pz)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x76=((7.66050349729967e-5)*(cj1)*(px)*(py)*(sj1));
IKReal x77=x0;
IKReal x78=((3.83025174864983e-5)*(x77));
IKReal x79=x2;
IKReal x80=(sj1)*(sj1);
IKReal x81=((3.83025174864983e-5)*(x79)*(x80));
IKReal x82=(cj1)*(cj1);
IKReal x83=x4;
IKReal x84=((3.83025174864983e-5)*(x82)*(x83));
IKReal x85=((x76)+(x78)+(x81)+(x84));
IKReal x86=((0.999999999266459)*(px)*(sj1));
IKReal x87=((0.550898889014398)+(x86));
IKReal x88=((0.999999999266459)*(cj1)*(py));
IKReal x89=((x87)+(((-1.00000000000000)*(x88))));
j2array[0]=IKatan2(((pz)*(x89)*(((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30))), ((x89)*(((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x90=((cj1)*(px));
IKReal x91=((py)*(sj1));
IKReal x92=((x91)+(x90));
j2array[0]=IKatan2(((pz)*(x92)*(((IKabs(((((-0.0290000000000000)*(x90)))+(((-0.0290000000000000)*(x91)))+(((0.0289900000000000)*(sj3)*(x91)))+(((0.0289900000000000)*(sj3)*(x90)))+(((-0.261080000000000)*(cj3)*(x91)))+(((-0.261080000000000)*(cj3)*(x90))))) != 0)?((IKReal)1/(((((-0.0290000000000000)*(x90)))+(((-0.0290000000000000)*(x91)))+(((0.0289900000000000)*(sj3)*(x91)))+(((0.0289900000000000)*(sj3)*(x90)))+(((-0.261080000000000)*(cj3)*(x91)))+(((-0.261080000000000)*(cj3)*(x90)))))):(IKReal)1.0e30))), ((x92)*(((IKabs(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3)))))):(IKReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(((IKabs(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.261080000000000)*(cj3)))+(((-0.0289900000000000)*(sj3)))))):(IKReal)1.0e30))), ((-1.00000000000000)*(pz)*(((IKabs(((((0.0290000000000000)*(pz)))+(((0.261080000000000)*(cj3)*(pz)))+(((-0.0289900000000000)*(pz)*(sj3))))) != 0)?((IKReal)1/(((((0.0290000000000000)*(pz)))+(((0.261080000000000)*(cj3)*(pz)))+(((-0.0289900000000000)*(pz)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x93=((0.261080000000000)*(cj3));
IKReal x94=((0.0290000000000000)+(x93));
IKReal x95=((0.0289900000000000)*(sj3));
IKReal x96=((x94)+(((-1.00000000000000)*(x95))));
IKReal x97=((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30);
j2array[0]=IKatan2(((-1.00000000000000)*(pz)*(x97)), ((x97)*(((((cj1)*(px)))+(((py)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x38=((cj1)*(sj3));
IKReal x39=((cj2)*(cj3)*(sj1));
IKReal x40=((x39)+(x38));
IKReal x41=((cj1)*(cj2)*(cj3));
IKReal x42=((sj1)*(sj3));
IKReal x43=((((-1.00000000000000)*(x42)))+(x41));
IKReal x44=((cj2)*(x38));
IKReal x45=((cj3)*(sj1));
IKReal x46=((x44)+(x45));
IKReal x47=((-1.00000000000000)*(x46));
IKReal x48=((cj1)*(cj3));
IKReal x49=((cj2)*(x42));
IKReal x50=((((-1.00000000000000)*(x49)))+(x48));
new_r00=((((r00)*(x43)))+(((r10)*(x40)))+(((-1.00000000000000)*(cj3)*(r20)*(sj2))));
new_r01=((((-1.00000000000000)*(cj3)*(r21)*(sj2)))+(((r01)*(x43)))+(((r11)*(x40))));
new_r02=((((r02)*(x43)))+(((-1.00000000000000)*(cj3)*(r22)*(sj2)))+(((r12)*(x40))));
new_r10=((((r20)*(sj2)*(sj3)))+(((r10)*(x50)))+(((r00)*(x47))));
new_r11=((((r11)*(x50)))+(((r01)*(x47)))+(((r21)*(sj2)*(sj3))));
new_r12=((((r02)*(x47)))+(((r22)*(sj2)*(sj3)))+(((r12)*(x50))));
new_r20=((((r10)*(sj1)*(sj2)))+(((cj2)*(r20)))+(((cj1)*(r00)*(sj2))));
new_r21=((((cj1)*(r01)*(sj2)))+(((cj2)*(r21)))+(((r11)*(sj1)*(sj2))));
new_r22=((((r12)*(sj1)*(sj2)))+(((cj2)*(r22)))+(((cj1)*(r02)*(sj2))));
{
IKReal j5eval;
j5eval=new_r02;
if( j5eval >= -1.000010 && j5eval <= -0.999990 )
{
{
j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=1.00000000000000;
j6=((-1.00000000000000)*(IKatan2(new_r21, new_r20)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
if( j5eval >= 0.999990 && j5eval <= 1.000010 )
{
{
j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=-1.00000000000000;
j6=((((-1.00000000000000)*(IKatan2(new_r21, new_r20))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(new_r12)), new_r22);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
sj4array[1] = -sj4array[0];
cj4array[1] = -cj4array[0];
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(new_r02, ((-1.00000000000000)*(new_r12)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x51=IKsin(j4);
IKReal x52=((IKabs(x51) != 0)?((IKReal)1/(x51)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r20)*(x52)), ((new_r21)*(x52)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(new_r02, ((new_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x53=IKsin(j5);
IKReal x54=((IKabs(x53) != 0)?((IKReal)1/(x53)):(IKReal)1.0e30);
IKReal x55=IKsin(j4);
IKReal x56=IKcos(j4);
j6array[0]=IKatan2(((((new_r21)*(x54)*(x56)))+(((-1.00000000000000)*(new_r11)*(x54)*(x55)))), ((((new_r21)*(x55)))+(((new_r11)*(x56)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x57=IKcos(j5);
IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x58)), ((new_r00)*(x58)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "4edeb2b682d975cf4384fec598de8f74"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
