/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 36 generated on 2011-03-02 13:09:43.495600
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97;
x0=IKsin(j[2]);
x1=IKsin(j[5]);
x2=IKsin(j[4]);
x3=IKcos(j[2]);
x4=IKsin(j[3]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[4]);
x8=IKcos(j[5]);
x9=IKsin(j[1]);
x10=IKcos(j[0]);
x11=((x3)*(x4)*(x6));
x12=((x5)*(x9));
x13=((x11)+(x12));
x14=((-1.00000000000000)*(x13));
x15=((x14)*(x2));
x16=((x4)*(x9));
x17=((x3)*(x5)*(x6));
x18=IKsin(j[0]);
x19=IKcos(j[6]);
x20=IKsin(j[6]);
x21=((x0)*(x2)*(x4));
x22=((x3)*(x7));
x23=((((-1.00000000000000)*(x22)))+(x21));
x24=((((-1.00000000000000)*(x17)))+(x16));
x25=((x0)*(x6)*(x7));
x26=((((-1.00000000000000)*(x25)))+(x15));
x27=((x2)*(x3));
x28=((x0)*(x4)*(x7));
x29=((x27)+(x28));
x30=((x0)*(x1)*(x5));
x31=((x23)*(x8));
x32=((x31)+(x30));
x33=((-1.00000000000000)*(x32));
x34=((x5)*(x6));
x35=((x16)*(x3));
x36=((((-1.00000000000000)*(x35)))+(x34));
x37=((x4)*(x6));
x38=((x12)*(x3));
x39=((x38)+(x37));
x40=((x2)*(x36));
x41=((x0)*(x7)*(x9));
x42=((((-1.00000000000000)*(x41)))+(x40));
x43=((-1.00000000000000)*(x39));
x44=((x1)*(x26));
x45=((((-1.00000000000000)*(x16)))+(x17));
x46=((x45)*(x8));
x47=((x46)+(x44));
x48=((x1)*(x23));
x49=((x0)*(x5)*(x8));
x50=((((-1.00000000000000)*(x49)))+(x48));
x51=((x19)*(x29));
x52=((x20)*(x33));
x53=((x51)+(x52));
x54=((x1)*(x24));
x55=((x26)*(x8));
x56=((x55)+(x54));
x57=((-1.00000000000000)*(x56));
x58=((x14)*(x7));
x59=((x0)*(x2)*(x6));
x60=((x59)+(x58));
x61=((x19)*(x60));
x62=((-1.00000000000000)*(x29));
x63=((x20)*(x62));
x64=((x19)*(x33));
x65=((x63)+(x64));
x66=((-1.00000000000000)*(x25));
x67=((x66)+(x15));
x68=((-1.00000000000000)*(x67)*(x8));
x69=((-1.00000000000000)*(x54));
x70=((x68)+(x69));
x71=((0.153000000000000)*(x16));
x72=((0.0290000000000000)*(x12));
x73=((0.239400000000000)*(x9));
x74=((0.0290000000000000)*(x11));
x75=((x74)+(x73)+(x72)+(x71));
x76=((0.270500000000000)*(x17));
x77=((0.270500000000000)*(x16));
x78=((((-1.00000000000000)*(x77)))+(x76));
x79=((x78)*(x8));
x80=((0.153000000000000)*(x17));
x81=((0.270500000000000)*(x15));
x82=((0.270500000000000)*(x25));
x83=((x81)+(((-1.00000000000000)*(x82))));
x84=((x1)*(x83));
x85=((0.0290000000000000)*(x3)*(x6));
x86=((x79)+(x80)+(x84)+(x85));
x87=((0.0290000000000000)*(x0)*(x4));
x88=((0.270500000000000)*(x21));
x89=((0.270500000000000)*(x22));
x90=((x88)+(((-1.00000000000000)*(x89))));
x91=((x1)*(x90));
x92=((x87)+(x91));
x93=((0.153000000000000)*(x0)*(x5));
x94=((0.0290000000000000)*(x0));
x95=((0.270500000000000)*(x49));
x96=((x93)+(x95)+(x94));
x97=((x92)+(((-1.00000000000000)*(x96))));
eerot[0]=((((x10)*(x47)))+(((x18)*(x50))));
eerot[1]=((((x18)*(x53)))+(((x10)*(((((x20)*(x70)))+(x61))))));
eerot[2]=((((x10)*(((((x20)*(((((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x59)))))))+(((x19)*(x57)))))))+(((x18)*(x65))));
eetrans[0]=((0.0290000000000000)+(((0.0690000000000000)*(x10)))+(((x10)*(((((-1.00000000000000)*(x75)))+(x86)))))+(((x18)*(x97)))+(((-0.0290000000000000)*(x18))));
eerot[3]=((((x39)*(x8)))+(((x1)*(x42))));
eerot[4]=((((x19)*(((((x0)*(x2)*(x9)))+(((x36)*(x7)))))))+(((-1.00000000000000)*(x20)*(((((x8)*(((((-1.00000000000000)*(x41)))+(x40)))))+(((x1)*(x43))))))));
eerot[5]=((((x19)*(((((-1.00000000000000)*(x42)*(x8)))+(((-1.00000000000000)*(x1)*(x43)))))))+(((x20)*(((((-1.00000000000000)*(x36)*(x7)))+(((-1.00000000000000)*(x0)*(x2)*(x9))))))));
eetrans[1]=((0.0580000000000000)+(((0.0290000000000000)*(x34)))+(((x1)*(((((-0.270500000000000)*(x41)))+(((0.270500000000000)*(x40)))))))+(((0.0290000000000000)*(x3)*(x9)))+(((0.153000000000000)*(x37)))+(((0.153000000000000)*(x38)))+(((0.239400000000000)*(x6)))+(((-0.0290000000000000)*(x35)))+(((x8)*(((((0.270500000000000)*(x37)))+(((0.270500000000000)*(x38))))))));
eerot[6]=((((-1.00000000000000)*(x18)*(x47)))+(((x10)*(x50))));
eerot[7]=((((x10)*(x53)))+(((x18)*(((((-1.00000000000000)*(x20)*(x57)))+(((-1.00000000000000)*(x61))))))));
eerot[8]=((((-1.00000000000000)*(x18)*(((((x19)*(x70)))+(((-1.00000000000000)*(x20)*(x60)))))))+(((x10)*(x65))));
eetrans[2]=((((x10)*(x97)))+(((-0.0690000000000000)*(x18)))+(((x18)*(((x75)+(((-1.00000000000000)*(x86)))))))+(((-0.0290000000000000)*(x10))));
}

class IKSolver {
public:
IKReal j5, cj5, sj5, htj5,
j6, cj6, sj6, htj6,
j7, cj7, sj7, htj7,
j8, cj8, sj8, htj8,
j9, cj9, sj9, htj9,
j10, cj10, sj10, htj10,
j4, cj4, sj4, htj4,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((r22)*(IKsin(j4))))+(((-1.00000000000000)*(r02)*(IKcos(j4)))));
new_r01=((((-1.00000000000000)*(r21)*(IKsin(j4))))+(((r01)*(IKcos(j4)))));
new_r02=((((-1.00000000000000)*(r20)*(IKsin(j4))))+(((r00)*(IKcos(j4)))));
IKReal x0=IKcos(j4);
IKReal x1=IKsin(j4);
new_px=((-0.0690000000000000)+(((0.270500000000000)*(r20)*(x1)))+(((px)*(x0)))+(((-0.0290000000000000)*(x0)))+(((-0.270500000000000)*(r00)*(x0)))+(((-1.00000000000000)*(pz)*(x1))));
new_r10=((-1.00000000000000)*(r12));
new_r11=r11;
new_r12=r10;
new_py=((-0.0580000000000000)+(((-0.270500000000000)*(r10)))+(py));
new_r20=((((-1.00000000000000)*(r22)*(IKcos(j4))))+(((-1.00000000000000)*(r02)*(IKsin(j4)))));
new_r21=((((r01)*(IKsin(j4))))+(((r21)*(IKcos(j4)))));
new_r22=((((r00)*(IKsin(j4))))+(((r20)*(IKcos(j4)))));
IKReal x2=x0;
IKReal x3=x1;
new_pz=((0.0290000000000000)+(((px)*(x3)))+(((-0.270500000000000)*(r20)*(x2)))+(((-0.0290000000000000)*(x3)))+(((pz)*(x2)))+(((-0.270500000000000)*(r00)*(x3))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
dummyeval[0]=(((py)*(py)*(py)*(py))+((px)*(px)*(px)*(px))+(((2.00000000000000)*((px)*(px))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x4=(cj5)*(cj5);
IKReal x5=(py)*(py);
IKReal x6=(pp)*(pp);
IKReal x7=((68.1478715814507)*(x4)*(x5));
IKReal x8=((148.632580261593)*(x6));
op[0]=((-1.75940539586207)+(x7)+(((-1.00000000000000)*(x8)))+(((-12.2162187871581)*(pp))));
op[1]=((-4.42861888730559)+(((-1.00000000000000)*(pp))));
op[2]=((-7.32584849887277)+(((136.295743162901)*(x4)*(x5)))+(((-297.265160523187)*(x6)))+(((-19.1565755053508)*(pp))));
op[3]=((-5.62035931213317)+(((-1.00000000000000)*(pp))));
op[4]=((-2.53565677131034)+(x7)+(((-1.00000000000000)*(x8)))+(((-6.94035671819263)*(pp))));
polyroots4(op,zeror,numroots);
IKReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IKReal htj7 = zeror[ij7];
tempj7array[0]=((2.00000000000000)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
bool valid = true;
for( int kj7 = 0; kj7 < numsolutions; ++kj7)
{
    if( IKabs(cj7array[kj7]-cj7array[numsolutions]) < 0.0001 && IKabs(sj7array[kj7]-sj7array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+(((5.27586206896552)*(cj7)))+(((-1.00000000000000)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
IKReal x9=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
cj5array[0]=((((2.08855472013367)*(pp)*(x9)))+(((0.0708090225563910)*(x9))));
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[2];
IKReal x10=x5;
IKReal x11=(sj5)*(sj5);
IKReal x12=((x10)*(x11));
IKReal x13=(pz)*(pz);
IKReal x14=((x13)+(x12));
dummyeval[0]=x14;
dummyeval[1]=((-1.00000000000000)*(x14));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x15=x5;
IKReal x16=(sj5)*(sj5);
IKReal x17=((29.0000000000000)*(x15)*(x16));
IKReal x18=(pz)*(pz);
IKReal x19=((29.0000000000000)*(x18));
IKReal x20=((x17)+(x19));
IKReal x21=((0.0339033600000000)+(pp));
IKReal x22=((0.478800000000000)*(cj5)*(py));
IKReal x23=((((-1.00000000000000)*(x22)))+(x21));
j6array[0]=IKatan2(((-500.000000000000)*(pz)*(x23)*(((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj5)*(x23)*(((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=((0.392400000000000)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30)));
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[2];
IKReal x90=x5;
IKReal x91=(sj5)*(sj5);
IKReal x92=((x90)*(x91));
IKReal x93=(pz)*(pz);
IKReal x94=((x93)+(x92));
dummyeval[0]=x94;
dummyeval[1]=((-1.00000000000000)*(x94));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x95=x5;
IKReal x96=(sj5)*(sj5);
IKReal x97=((29.0000000000000)*(x95)*(x96));
IKReal x98=(pz)*(pz);
IKReal x99=((29.0000000000000)*(x98));
IKReal x100=((x99)+(x97));
IKReal x101=((0.0339033600000000)+(pp));
IKReal x102=((0.478800000000000)*(cj5)*(py));
IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
j6array[0]=IKatan2(((-500.000000000000)*(pz)*(x103)*(((IKabs(x100) != 0)?((IKReal)1/(x100)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj5)*(x103)*(((IKabs(x100) != 0)?((IKReal)1/(x100)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
sj6array[0]=((-4693295647.23979)*(pz));
if( sj6array[0] >= -1.0001 && sj6array[0] <= 1.0001 )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
if( j6valid[0] && j6valid[1] && IKabs(cj6array[0]-cj6array[1]) < 0.0001 && IKabs(sj6array[0]-sj6array[1]) < 0.0001 )
{
    j6valid[1]=false;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=((-1.00000000000000)*(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x104=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.46201208476747e-21)*(x104)*(((8.80336095481354e+19)+(((-1.17929116250000e+22)*(pp)))))), ((0.0863999992887518)*(x104)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x105=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((2.13069892707083e-10)*(x105)), ((0.000835421888053467)*(x105)*(((84.7583999691049)+(((2500.00000000000)*(pp)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x106=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((2.13069892707083e-10)*(x106)), ((0.0863999992887518)*(x106)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x107=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((1.46201208476747e-21)*(x107)*(((8.80336095481354e+19)+(((-1.17929116250000e+22)*(pp)))))), ((0.0863999992887518)*(x107)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x108=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-2.13069892707083e-10)*(x108)), ((0.000835421888053467)*(x108)*(((84.7583999691049)+(((2500.00000000000)*(pp)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x109=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-2.13069892707083e-10)*(x109)), ((0.0863999992887518)*(x109)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x110=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(cj6)*(pz)*(x110)*(((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))), ((0.0863999992887518)*(x110)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x111=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((2.13069892707083e-10)*(cj6)*(x111)), ((0.000835421888053467)*(x111)*(((84.7583999691049)+(((2500.00000000000)*(pp)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x112=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((2.13069892707083e-10)*(cj6)*(x112)), ((0.0863999992887518)*(x112)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
IKReal x113=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
cj5array[0]=((((0.0672960735171261)*(x113)))+(((-0.0185338345864662)*(cj7)*(x113)))+(((0.00351294903926483)*(sj7)*(x113)))+(((2.08855472013367)*(pp)*(x113))));
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[2];
IKReal x114=((5.27586206896552)*(cj7));
IKReal x115=((1.00000000000000)+(x114));
IKReal x116=((x115)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x116;
dummyeval[1]=x116;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x117=((5.27586206896552)*(cj7));
IKReal x118=((1.00000000000000)+(x117));
IKReal x119=((x118)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x119;
dummyeval[1]=x119;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x120=((5.27586206896552)*(cj7));
IKReal x121=((1.00000000000000)+(x120));
IKReal x122=((x121)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x122;
dummyeval[1]=x122;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.392400000000000)+(((-1.00000000000000)*(cj5)*(py))));
evalcond[2]=pz;
evalcond[3]=((-0.0339033600000000)+(((0.478800000000000)*(cj5)*(py)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-1.00000000000000)*(py)*(sj5));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x123=x5;
IKReal x124=(sj5)*(sj5);
IKReal x125=((x123)*(x124));
IKReal x126=(pz)*(pz);
IKReal x127=((x126)+(x125));
dummyeval[0]=x127;
dummyeval[1]=((-1.00000000000000)*(x127));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x128=x5;
IKReal x129=(sj5)*(sj5);
IKReal x130=((29.0000000000000)*(x128)*(x129));
IKReal x131=(pz)*(pz);
IKReal x132=((29.0000000000000)*(x131));
IKReal x133=((x130)+(x132));
IKReal x134=((0.0339033600000000)+(pp));
IKReal x135=((0.478800000000000)*(cj5)*(py));
IKReal x136=((x134)+(((-1.00000000000000)*(x135))));
j6array[0]=IKatan2(((-500.000000000000)*(pz)*(x136)*(((IKabs(x133) != 0)?((IKReal)1/(x133)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj5)*(x136)*(((IKabs(x133) != 0)?((IKReal)1/(x133)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((-1.00000000000000)*(cj5)*(py))));
evalcond[2]=((-0.0339033599876419)+(((0.478800000000000)*(cj5)*(py)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-4693295647.23979)*(pz)), ((4693295647.23979)*(py)*(sj5)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x137=((0.153000000000000)*(cj7));
IKReal x138=((0.0290000000000000)+(x137));
IKReal x139=((0.0290000000000000)*(sj7));
IKReal x140=((x138)+(((-1.00000000000000)*(x139))));
IKReal x141=((IKabs(x140) != 0)?((IKReal)1/(x140)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x141)), ((py)*(sj5)*(x141)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x142=((0.153000000000000)*(cj7));
IKReal x143=((0.0290000000000000)+(x142));
IKReal x144=((0.0290000000000000)*(sj7));
IKReal x145=((((-1.00000000000000)*(x144)))+(x143));
IKReal x146=((IKabs(x145) != 0)?((IKReal)1/(x145)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x146)), ((py)*(sj5)*(x146)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x147=((0.153000000000000)*(cj7));
IKReal x148=((0.0290000000000000)+(x147));
IKReal x149=((0.0290000000000000)*(sj7));
IKReal x150=((((-1.00000000000000)*(x149)))+(x148));
IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x151)), ((py)*(sj5)*(x151)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
IKReal x152=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
cj5array[0]=((((0.0290000000000000)*(cj7)*(x152)))+(((0.153000000000000)*(sj7)*(x152)))+(((0.239400000000000)*(x152))));
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[2];
IKReal x153=((5.27586206896552)*(cj7));
IKReal x154=((1.00000000000000)+(x153));
IKReal x155=((x154)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x155;
dummyeval[1]=x155;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x156=((5.27586206896552)*(cj7));
IKReal x157=((1.00000000000000)+(x156));
IKReal x158=((x157)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x158;
dummyeval[1]=x158;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x159=((5.27586206896552)*(cj7));
IKReal x160=((1.00000000000000)+(x159));
IKReal x161=((x160)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x161;
dummyeval[1]=x161;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.392400000000000)+(((-1.00000000000000)*(cj5)*(py))));
evalcond[2]=pz;
evalcond[3]=((-0.0339033600000000)+(((0.478800000000000)*(cj5)*(py)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-1.00000000000000)*(py)*(sj5));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x162=x5;
IKReal x163=(sj5)*(sj5);
IKReal x164=((x162)*(x163));
IKReal x165=(pz)*(pz);
IKReal x166=((x164)+(x165));
dummyeval[0]=x166;
dummyeval[1]=((-1.00000000000000)*(x166));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x167=x5;
IKReal x168=(sj5)*(sj5);
IKReal x169=((29.0000000000000)*(x167)*(x168));
IKReal x170=(pz)*(pz);
IKReal x171=((29.0000000000000)*(x170));
IKReal x172=((x171)+(x169));
IKReal x173=((0.0339033600000000)+(pp));
IKReal x174=((0.478800000000000)*(cj5)*(py));
IKReal x175=((((-1.00000000000000)*(x174)))+(x173));
j6array[0]=IKatan2(((-500.000000000000)*(pz)*(x175)*(((IKabs(x172) != 0)?((IKReal)1/(x172)):(IKReal)1.0e30))), ((500.000000000000)*(py)*(sj5)*(x175)*(((IKabs(x172) != 0)?((IKReal)1/(x172)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((-1.00000000000000)*(cj5)*(py))));
evalcond[2]=((-0.0339033599876419)+(((0.478800000000000)*(cj5)*(py)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-4693295647.23979)*(pz)), ((4693295647.23979)*(py)*(sj5)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x176=((0.153000000000000)*(cj7));
IKReal x177=((0.0290000000000000)+(x176));
IKReal x178=((0.0290000000000000)*(sj7));
IKReal x179=((((-1.00000000000000)*(x178)))+(x177));
IKReal x180=((IKabs(x179) != 0)?((IKReal)1/(x179)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x180)), ((py)*(sj5)*(x180)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x181=((0.153000000000000)*(cj7));
IKReal x182=((0.0290000000000000)+(x181));
IKReal x183=((0.0290000000000000)*(sj7));
IKReal x184=((((-1.00000000000000)*(x183)))+(x182));
IKReal x185=((IKabs(x184) != 0)?((IKReal)1/(x184)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x185)), ((py)*(sj5)*(x185)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x186=((0.153000000000000)*(cj7));
IKReal x187=((0.0290000000000000)+(x186));
IKReal x188=((0.0290000000000000)*(sj7));
IKReal x189=((((-1.00000000000000)*(x188)))+(x187));
IKReal x190=((IKabs(x189) != 0)?((IKReal)1/(x189)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x190)), ((py)*(sj5)*(x190)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
sj6array[0]=((-1.00000000000000)*(pz)*(((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30)));
if( sj6array[0] >= -1.0001 && sj6array[0] <= 1.0001 )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
if( j6valid[0] && j6valid[1] && IKabs(cj6array[0]-cj6array[1]) < 0.0001 && IKabs(sj6array[0]-sj6array[1]) < 0.0001 )
{
    j6valid[1]=false;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=((-1.00000000000000)*(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x191=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((x191)*(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))), ((0.000835421888053467)*(x191)*(((80.5534000000000)+(((-22.1850000000000)*(cj7)))+(((2500.00000000000)*(pp)))+(((4.20500000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x192=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-0.000237812128418549)*(x192)*(((5852.29860000000)+(((5311.08900000000)*(sj7)))+(((1006.67700000000)*(cj7)))+(((-72500.0000000000)*(pp)))))), ((x192)*(((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((0.153000000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x193=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((x193)*(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))), ((x193)*(((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((0.153000000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=pz;
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x194=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(x194)*(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))), ((0.000835421888053467)*(x194)*(((80.5534000000000)+(((-22.1850000000000)*(cj7)))+(((2500.00000000000)*(pp)))+(((4.20500000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x195=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((0.000237812128418549)*(x195)*(((5852.29860000000)+(((5311.08900000000)*(sj7)))+(((1006.67700000000)*(cj7)))+(((-72500.0000000000)*(pp)))))), ((x195)*(((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((0.153000000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x196=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(x196)*(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))), ((x196)*(((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((0.153000000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x197=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(cj6)*(pz)*(x197)*(((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))), ((0.000835421888053467)*(x197)*(((80.5534000000000)+(((-22.1850000000000)*(cj7)))+(((2500.00000000000)*(pp)))+(((4.20500000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x198=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(cj6)*(pz)*(x198)*(((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))), ((x198)*(((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((0.153000000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x199=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j5array[0]=IKatan2(((x199)*(((((0.0290000000000000)*(cj6)))+(((-0.0290000000000000)*(cj6)*(sj7)))+(((0.153000000000000)*(cj6)*(cj7)))))), ((x199)*(((0.239400000000000)+(((0.0290000000000000)*(cj7)))+(((0.153000000000000)*(sj7)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j5evalpoly[1];
IKReal x200=(px)*(px);
IKReal x201=(py)*(py)*(py);
IKReal x202=(py)*(py);
IKReal x203=(pp)*(pp);
IKReal x204=(px)*(px)*(px)*(px);
IKReal x205=((81908.4370056236)*(x200)*(x202));
IKReal x206=((11431.9604525904)*(py)*(x200));
IKReal x207=((337192.551198182)*(pp)*(py)*(x200));
IKReal x208=((40954.2185028118)*(x204));
IKReal x209=(pp)*(pp)*(pp);
IKReal x210=((341937.922882125)*(x200)*(x203));
IKReal x211=((393.036380410045)*(x200));
IKReal x212=((24370.2292430288)*(pp)*(x200));
op[0]=((((40954.2185028118)*(py)*(x201)))+(x205)+(x208));
op[1]=((((-11431.9604525904)*(x201)))+(((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x207)))+(((-337192.551198182)*(pp)*(x201))));
op[2]=((((-1.00000000000000)*(x205)))+(((69753.6986727491)*(pp)*(x202)))+(x210)+(x211)+(x212)+(((1202.52232596129)*(x202)))+(((1046183.01728100)*(x202)*(x203)))+(((-81908.4370056236)*(x204))));
op[3]=((((-142560.832321385)*(py)*(x203)))+(x207)+(x206)+(((-4833.29122009154)*(pp)*(py)))+(((-56.4899762147469)*(py)))+(((-1449583.27084704)*(pp)*(py)*(x203))));
op[4]=((1.00000000000000)+(((4883.21537245495)*(x203)))+(x208)+(((112.129110280760)*(pp)))+(((756883.495638597)*((x203)*(x203))))+(((97551.2623641186)*(pp)*(x203)))+(((-1.00000000000000)*(x212)))+(((-1.00000000000000)*(x211)))+(((-1.00000000000000)*(x210))));
polyroots4(op,zeror,numroots);
IKReal j5array[4], cj5array[4], sj5array[4], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IKReal cj5 = zeror[ij5];
IKReal x213=x200;
IKReal x214=((0.00564087592000000)*(x213));
tempj5array[0]=IKatan2(((((IKabs(((((0.0112817518400000)*(cj5)*(px)*(py)))+(((-0.000787297045248000)*(px)))+(((-0.0232218000000000)*(pp)*(px))))) != 0)?((IKReal)1/(((((0.0112817518400000)*(cj5)*(px)*(py)))+(((-0.000787297045248000)*(px)))+(((-0.0232218000000000)*(pp)*(px)))))):(IKReal)1.0e30))*(((2.78738671177728e-5)+(((cj5)*(((((-0.000787297045248000)*(py)))+(((-0.0232218000000000)*(pp)*(py)))))))+(((0.00156273596000000)*(pp)))+(x214)+((((cj5)*(cj5))*(((((0.00564087592000000)*((py)*(py))))+(((-1.00000000000000)*(x214)))))))+(((0.0242500000000000)*((pp)*(pp))))))), cj5);
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
bool valid = true;
for( int kj5 = 0; kj5 < numsolutions; ++kj5)
{
    if( IKabs(cj5array[kj5]-cj5array[numsolutions]) < 0.0001 && IKabs(sj5array[kj5]-sj5array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

j5evalpoly[0]=((((0.0112817518400000)*(cj5)*(px)*(py)))+(((-0.000787297045248000)*(px)))+(((-0.0232218000000000)*(pp)*(px))));
if( IKabs(j5evalpoly[0]) < 0.0000001000000000  )
{
    continue;
}
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
j7array[0]=IKatan2(((-2.17479917525773)+(((-20.6185567010309)*(pp)))+(((16.1814432989691)*(cj5)*(py)))+(((-16.1814432989691)*(px)*(sj5)))), ((3.21876806256665)+(((-50.8883043014575)*(cj5)*(py)))+(((50.8883043014575)*(px)*(sj5)))+(((108.780661215784)*(pp)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IKReal dummyeval[2];
IKReal x215=((5.27586206896552)*(cj7));
IKReal x216=((1.00000000000000)+(x215));
IKReal x217=((x216)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x217;
dummyeval[1]=x217;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x218=((5.27586206896552)*(cj7));
IKReal x219=((1.00000000000000)+(x218));
IKReal x220=((x219)+(((-1.00000000000000)*(sj7))));
dummyeval[0]=x220;
dummyeval[1]=x220;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((-1.00000000000000)*(cj5)*(px)))+(((-5.27586206896552)*(cj5)*(cj7)*(px)))+(((cj5)*(px)*(sj7)))+(((py)*(sj5)*(sj7)))+(((-1.00000000000000)*(py)*(sj5)))+(((-5.27586206896552)*(cj7)*(py)*(sj5))));
dummyeval[1]=((1.00000000000000)+(((5.27586206896552)*(cj7)))+(((-1.00000000000000)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j7)), 6.28318530717959)));
evalcond[1]=((0.392400000000000)+(((-1.00000000000000)*(cj5)*(py)))+(((px)*(sj5))));
evalcond[2]=pz;
evalcond[3]=((-0.0339033600000000)+(((-0.478800000000000)*(px)*(sj5)))+(((0.478800000000000)*(cj5)*(py)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((-1.00000000000000)*(cj5)*(px)))+(((-1.00000000000000)*(py)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x221=(cj5)*(cj5);
IKReal x222=x200;
IKReal x223=((x221)*(x222));
IKReal x224=x202;
IKReal x225=(sj5)*(sj5);
IKReal x226=((x224)*(x225));
IKReal x227=(pz)*(pz);
IKReal x228=((2.00000000000000)*(cj5)*(px)*(py)*(sj5));
IKReal x229=((x228)+(x223)+(x227)+(x226));
dummyeval[0]=x229;
dummyeval[1]=x229;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x230=(cj5)*(cj5);
IKReal x231=x200;
IKReal x232=((29.0000000000000)*(x230)*(x231));
IKReal x233=x202;
IKReal x234=(sj5)*(sj5);
IKReal x235=((29.0000000000000)*(x233)*(x234));
IKReal x236=((58.0000000000000)*(cj5)*(px)*(py)*(sj5));
IKReal x237=(pz)*(pz);
IKReal x238=((29.0000000000000)*(x237));
IKReal x239=((x238)+(x232)+(x236)+(x235));
IKReal x240=((IKabs(x239) != 0)?((IKReal)1/(x239)):(IKReal)1.0e30);
IKReal x241=((0.478800000000000)*(px)*(sj5));
IKReal x242=((0.0339033600000000)+(x241)+(pp));
IKReal x243=((0.478800000000000)*(cj5)*(py));
IKReal x244=((x242)+(((-1.00000000000000)*(x243))));
j6array[0]=IKatan2(((-500.000000000000)*(pz)*(x240)*(x244)), ((-500.000000000000)*(x240)*(x244)*(((((-1.00000000000000)*(cj5)*(px)))+(((-1.00000000000000)*(py)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((5.08702964843617)+(j7)), 6.28318530717959)));
evalcond[1]=((0.0863999992887518)+(((-1.00000000000000)*(cj5)*(py)))+(((px)*(sj5))));
evalcond[2]=((-0.0339033599876419)+(((-0.478800000000000)*(px)*(sj5)))+(((0.478800000000000)*(cj5)*(py)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-4693295647.23979)*(pz)), ((((4693295647.23979)*(cj5)*(px)))+(((4693295647.23979)*(py)*(sj5)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((IKabs(((((-0.153000000000000)*(cj7)*(py)*(sj5)))+(((0.0290000000000000)*(py)*(sj5)*(sj7)))+(((-0.0290000000000000)*(py)*(sj5)))+(((-0.0290000000000000)*(cj5)*(px)))+(((-0.153000000000000)*(cj5)*(cj7)*(px)))+(((0.0290000000000000)*(cj5)*(px)*(sj7))))) != 0)?((IKReal)1/(((((-0.153000000000000)*(cj7)*(py)*(sj5)))+(((0.0290000000000000)*(py)*(sj5)*(sj7)))+(((-0.0290000000000000)*(py)*(sj5)))+(((-0.0290000000000000)*(cj5)*(px)))+(((-0.153000000000000)*(cj5)*(cj7)*(px)))+(((0.0290000000000000)*(cj5)*(px)*(sj7)))))):(IKReal)1.0e30))*(((((cj5)*(px)*(pz)))+(((py)*(pz)*(sj5)))))), ((((IKabs(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7))))) != 0)?((IKReal)1/(((0.0290000000000000)+(((0.153000000000000)*(cj7)))+(((-0.0290000000000000)*(sj7)))))):(IKReal)1.0e30))*(((((cj5)*(px)))+(((py)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x245=((0.153000000000000)*(cj7));
IKReal x246=((0.0290000000000000)+(x245));
IKReal x247=((0.0290000000000000)*(sj7));
IKReal x248=((x246)+(((-1.00000000000000)*(x247))));
IKReal x249=((IKabs(x248) != 0)?((IKReal)1/(x248)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x249)), ((x249)*(((((cj5)*(px)))+(((py)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x250=((0.153000000000000)*(cj7));
IKReal x251=((0.0290000000000000)+(x250));
IKReal x252=((0.0290000000000000)*(sj7));
IKReal x253=((x251)+(((-1.00000000000000)*(x252))));
IKReal x254=((IKabs(x253) != 0)?((IKReal)1/(x253)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(pz)*(x254)), ((x254)*(((((cj5)*(px)))+(((py)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x24=((cj5)*(cj6)*(sj7));
IKReal x25=((cj7)*(sj5));
IKReal x26=((x24)+(x25));
IKReal x27=((-1.00000000000000)*(x26));
IKReal x28=((cj5)*(cj7));
IKReal x29=((cj6)*(sj5)*(sj7));
IKReal x30=((((-1.00000000000000)*(x29)))+(x28));
IKReal x31=((cj6)*(x28));
IKReal x32=((sj5)*(sj7));
IKReal x33=((((-1.00000000000000)*(x32)))+(x31));
IKReal x34=((cj6)*(x25));
IKReal x35=((cj5)*(sj7));
IKReal x36=((x35)+(x34));
new_r00=((((-1.00000000000000)*(cj6)*(r20)))+(((-1.00000000000000)*(cj5)*(r00)*(sj6)))+(((-1.00000000000000)*(r10)*(sj5)*(sj6))));
new_r01=((((-1.00000000000000)*(cj6)*(r21)))+(((-1.00000000000000)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
new_r02=((((-1.00000000000000)*(cj6)*(r22)))+(((-1.00000000000000)*(r12)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r02)*(sj6))));
new_r10=((((r20)*(sj6)*(sj7)))+(((r10)*(x30)))+(((r00)*(x27))));
new_r11=((((r21)*(sj6)*(sj7)))+(((r11)*(x30)))+(((r01)*(x27))));
new_r12=((((r02)*(x27)))+(((r22)*(sj6)*(sj7)))+(((r12)*(x30))));
new_r20=((((r00)*(x33)))+(((r10)*(x36)))+(((-1.00000000000000)*(cj7)*(r20)*(sj6))));
new_r21=((((-1.00000000000000)*(cj7)*(r21)*(sj6)))+(((r01)*(x33)))+(((r11)*(x36))));
new_r22=((((-1.00000000000000)*(cj7)*(r22)*(sj6)))+(((r02)*(x33)))+(((r12)*(x36))));
{
IKReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
cj9array[0]=new_r22;
if( cj9array[0] >= -1.0001 && cj9array[0] <= 1.0001 )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
if( j9valid[0] && j9valid[1] && IKabs(cj9array[0]-cj9array[1]) < 0.0001 && IKabs(sj9array[0]-sj9array[1]) < 0.0001 )
{
    j9valid[1]=false;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj9)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj9))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
IKReal x37=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x37;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x37;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
IKReal x38=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x38));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x38))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8valid[0] && j8valid[1] && IKabs(cj8array[0]-cj8array[1]) < 0.0001 && IKabs(sj8array[0]-sj8array[1]) < 0.0001 )
{
    j8valid[1]=false;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
IKReal x39=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x39));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x39))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8valid[0] && j8valid[1] && IKabs(cj8array[0]-cj8array[1]) < 0.0001 && IKabs(sj8array[0]-sj8array[1]) < 0.0001 )
{
    j8valid[1]=false;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x40=((new_r10)*(new_r12)*(sj9));
IKReal x41=((new_r00)*(new_r02)*(sj9));
IKReal x42=((x40)+(x41));
IKReal x43=((-1.00000000000000)*(x42));
IKReal x44=((IKabs(x43) != 0)?((IKReal)1/(x43)):(IKReal)1.0e30);
j8array[0]=IKatan2(((cj9)*(new_r12)*(new_r20)*(x44)), ((cj9)*(new_r02)*(new_r20)*(x44)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x45=((cj8)*(new_r12));
IKReal x46=((new_r02)*(sj8));
IKReal x47=((((-1.00000000000000)*(x46)))+(x45));
IKReal x48=((-1.00000000000000)+(new_r22));
IKReal x49=((new_r12)*(sj8));
IKReal x50=((cj8)*(new_r02));
IKReal x51=((x49)+(x50));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x48;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x47;
evalcond[5]=x47;
evalcond[6]=x51;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x48;
evalcond[10]=x51;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x52=((cj8)*(new_r12));
IKReal x53=((new_r02)*(sj8));
IKReal x54=((x52)+(((-1.00000000000000)*(x53))));
IKReal x55=((new_r12)*(sj8));
IKReal x56=((cj8)*(new_r02));
IKReal x57=((x55)+(x56));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x54;
evalcond[5]=x54;
evalcond[6]=x57;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x57));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
IKReal x58=((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30);
j10array[0]=IKatan2(((new_r21)*(x58)), ((-1.00000000000000)*(new_r20)*(x58)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((new_r21)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))), ((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x59=(new_r12)*(new_r12);
IKReal x60=(new_r02)*(new_r02);
IKReal x61=((x59)+(x60));
IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
j8array[0]=IKatan2(((new_r12)*(sj9)*(x62)), ((new_r02)*(sj9)*(x62)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x63=((cj8)*(new_r12));
IKReal x64=((new_r02)*(sj8));
IKReal x65=((x63)+(((-1.00000000000000)*(x64))));
IKReal x66=((-1.00000000000000)+(new_r22));
IKReal x67=((new_r12)*(sj8));
IKReal x68=((cj8)*(new_r02));
IKReal x69=((x67)+(x68));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j9)), 6.28318530717959)));
evalcond[1]=x66;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x65;
evalcond[5]=x65;
evalcond[6]=x69;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x66;
evalcond[10]=x69;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))), ((((new_r10)*(sj8)))+(((cj8)*(new_r00)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x70=((cj8)*(new_r12));
IKReal x71=((new_r02)*(sj8));
IKReal x72=((((-1.00000000000000)*(x71)))+(x70));
IKReal x73=((new_r12)*(sj8));
IKReal x74=((cj8)*(new_r02));
IKReal x75=((x74)+(x73));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x72;
evalcond[5]=x72;
evalcond[6]=x75;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x75));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((new_r11)*(sj8)))+(((cj8)*(new_r01)))), ((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
IKReal x76=((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30);
j10array[0]=IKatan2(((new_r21)*(x76)), ((-1.00000000000000)*(new_r20)*(x76)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
j10array[0]=IKatan2(((new_r21)*(((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30))), ((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
IKReal x77=((IKabs(sj9) != 0)?((IKReal)1/(sj9)):(IKReal)1.0e30);
j10array[0]=IKatan2(((new_r21)*(x77)), ((-1.00000000000000)*(new_r20)*(x77)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x78=((new_r02)*(new_r11));
IKReal x79=((new_r01)*(new_r12));
IKReal x80=((((-1.00000000000000)*(x79)))+(x78));
IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
j8array[0]=IKatan2(((cj10)*(new_r12)*(x81)), ((cj10)*(new_r02)*(x81)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x82=((new_r02)*(new_r10));
IKReal x83=((new_r00)*(new_r12));
IKReal x84=((x82)+(((-1.00000000000000)*(x83))));
IKReal x85=((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30);
j8array[0]=IKatan2(((new_r12)*(sj10)*(x85)), ((new_r02)*(sj10)*(x85)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
IKReal x86=(new_r12)*(new_r12);
IKReal x87=(new_r02)*(new_r02);
IKReal x88=((x86)+(x87));
IKReal x89=((IKabs(x88) != 0)?((IKReal)1/(x88)):(IKReal)1.0e30);
j8array[0]=IKatan2(((new_r12)*(sj9)*(x89)), ((new_r02)*(sj9)*(x89)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j4;
solution.basesol[1].foffset = j5;
solution.basesol[2].foffset = j6;
solution.basesol[3].foffset = j7;
solution.basesol[4].foffset = j8;
solution.basesol[5].foffset = j9;
solution.basesol[6].foffset = j10;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "81bbd56ff55a29ca0af4b9a1ddc43f6b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
