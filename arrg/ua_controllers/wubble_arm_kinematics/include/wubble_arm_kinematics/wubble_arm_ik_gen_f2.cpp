/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-19 23:41:17.441682
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[6]);
x3=IKsin(j[2]);
x4=IKsin(j[4]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKsin(j[6]);
x8=IKcos(j[2]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[3]);
x12=IKsin(j[1]);
x13=IKcos(j[5]);
eerot[0]=((((x0)*(x1)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x3)*(x9)))+(((x4)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x7)*(x9)))+(((-1.00000000000000)*(x10)*(x2)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x3)*(x5)))+(((-1.00000000000000)*(x0)*(x1)*(x6)*(x7)*(x8)*(x9)))+(((x3)*(x5)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x12)*(x2)*(x4)))+(((x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x2)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x4)*(x6)*(x8))));
eerot[1]=((((x0)*(x10)*(x11)*(x12)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x2)*(x6)*(x8)*(x9)))+(((x0)*(x1)*(x10)*(x3)*(x7)*(x9)))+(((x0)*(x1)*(x10)*(x4)*(x6)*(x7)*(x8)))+(((x11)*(x13)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x7)*(x8)))+(((x0)*(x1)*(x2)*(x3)*(x4)))+(((x0)*(x12)*(x13)*(x6)*(x7)))+(((x10)*(x5)*(x7)*(x8)*(x9)))+(((x2)*(x4)*(x5)*(x8)))+(((x2)*(x3)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x2)*(x9))));
eerot[2]=((((-1.00000000000000)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((x13)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x6)))+(((x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((x0)*(x1)*(x10)*(x11)*(x8)))+(((x0)*(x11)*(x12)*(x13)*(x4)))+(((-1.00000000000000)*(x10)*(x11)*(x3)*(x5)))+(((x0)*(x1)*(x13)*(x3)*(x9))));
eetrans[0]=((0.0290000000000000)+(((-0.0751000000000000)*(x0)*(x1)*(x6)*(x7)*(x8)*(x9)))+(((-0.00200000000000000)*(x13)*(x5)*(x8)*(x9)))+(((0.0751000000000000)*(x4)*(x5)*(x7)*(x8)))+(((0.0751000000000000)*(x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((0.0751000000000000)*(x0)*(x1)*(x3)*(x4)*(x7)))+(((-0.00200000000000000)*(x0)*(x1)*(x10)*(x11)*(x8)))+(((0.00200000000000000)*(x0)*(x10)*(x12)*(x6)))+(((-0.0751000000000000)*(x0)*(x12)*(x13)*(x2)*(x6)))+(((-0.0290000000000000)*(x3)*(x5)))+(((0.0289900000000000)*(x3)*(x5)*(x6)))+(((0.0751000000000000)*(x3)*(x5)*(x6)*(x7)*(x9)))+(((0.0751000000000000)*(x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((-0.0751000000000000)*(x11)*(x13)*(x2)*(x3)*(x5)))+(((-0.261080000000000)*(x0)*(x12)*(x6)))+(((-0.00200000000000000)*(x0)*(x11)*(x12)*(x13)*(x4)))+(((0.0290000000000000)*(x0)*(x1)*(x8)))+(((0.00200000000000000)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((-0.0751000000000000)*(x0)*(x11)*(x12)*(x7)*(x9)))+(((-0.00200000000000000)*(x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((-0.0751000000000000)*(x0)*(x10)*(x11)*(x12)*(x2)*(x4)))+(((-0.00200000000000000)*(x0)*(x1)*(x13)*(x3)*(x9)))+(((-0.0751000000000000)*(x10)*(x2)*(x5)*(x8)*(x9)))+(((-0.0289900000000000)*(x0)*(x11)*(x12)))+(((0.00200000000000000)*(x10)*(x11)*(x3)*(x5)))+(((-0.261080000000000)*(x11)*(x3)*(x5)))+(((-0.0289900000000000)*(x0)*(x1)*(x6)*(x8)))+(((-0.289820000000000)*(x0)*(x12)))+(((-0.0751000000000000)*(x0)*(x1)*(x10)*(x2)*(x4)*(x6)*(x8)))+(((0.261080000000000)*(x0)*(x1)*(x11)*(x8)))+(((-0.0751000000000000)*(x0)*(x1)*(x10)*(x2)*(x3)*(x9))));
eerot[3]=((((x1)*(x13)*(x2)*(x6)))+(((x12)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((x1)*(x11)*(x7)*(x9)))+(((-1.00000000000000)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((x11)*(x12)*(x13)*(x2)*(x8)))+(((x1)*(x10)*(x11)*(x2)*(x4))));
eerot[4]=((((-1.00000000000000)*(x11)*(x12)*(x13)*(x7)*(x8)))+(((x10)*(x12)*(x3)*(x7)*(x9)))+(((x1)*(x11)*(x2)*(x9)))+(((x10)*(x12)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x4)*(x7)))+(((-1.00000000000000)*(x1)*(x13)*(x6)*(x7)))+(((x12)*(x2)*(x3)*(x4)))+(((-1.00000000000000)*(x12)*(x2)*(x6)*(x8)*(x9))));
eerot[5]=((((-1.00000000000000)*(x1)*(x11)*(x13)*(x4)))+(((x1)*(x10)*(x6)))+(((x12)*(x13)*(x4)*(x6)*(x8)))+(((x10)*(x11)*(x12)*(x8)))+(((x12)*(x13)*(x3)*(x9))));
eetrans[1]=((0.0930000000000000)+(((0.261080000000000)*(x11)*(x12)*(x8)))+(((-0.00200000000000000)*(x12)*(x13)*(x3)*(x9)))+(((0.0751000000000000)*(x12)*(x3)*(x4)*(x7)))+(((0.0289900000000000)*(x1)*(x11)))+(((0.00200000000000000)*(x1)*(x11)*(x13)*(x4)))+(((0.0290000000000000)*(x12)*(x8)))+(((0.0751000000000000)*(x1)*(x13)*(x2)*(x6)))+(((-0.0751000000000000)*(x10)*(x12)*(x2)*(x4)*(x6)*(x8)))+(((0.0751000000000000)*(x11)*(x12)*(x13)*(x2)*(x8)))+(((-0.00200000000000000)*(x1)*(x10)*(x6)))+(((0.261080000000000)*(x1)*(x6)))+(((-0.00200000000000000)*(x10)*(x11)*(x12)*(x8)))+(((-0.0289900000000000)*(x12)*(x6)*(x8)))+(((-0.0751000000000000)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((-0.0751000000000000)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((0.0751000000000000)*(x1)*(x10)*(x11)*(x2)*(x4)))+(((0.289820000000000)*(x1)))+(((-0.00200000000000000)*(x12)*(x13)*(x4)*(x6)*(x8)))+(((0.0751000000000000)*(x1)*(x11)*(x7)*(x9))));
eerot[6]=((((x11)*(x12)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x5)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x8)*(x9)))+(((x1)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((x1)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((x0)*(x10)*(x2)*(x3)*(x4)*(x6)))+(((x0)*(x4)*(x7)*(x8)))+(((x0)*(x3)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x13)*(x2)*(x3)))+(((-1.00000000000000)*(x1)*(x3)*(x4)*(x5)*(x7)))+(((x1)*(x10)*(x2)*(x3)*(x5)*(x9)))+(((x10)*(x11)*(x12)*(x2)*(x4)*(x5)))+(((x12)*(x13)*(x2)*(x5)*(x6))));
eerot[7]=((((x0)*(x2)*(x3)*(x6)*(x9)))+(((x1)*(x2)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((x0)*(x2)*(x4)*(x8)))+(((x0)*(x10)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x12)*(x13)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x3)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x6)*(x7)))+(((x1)*(x11)*(x13)*(x5)*(x7)*(x8)))+(((x0)*(x11)*(x13)*(x3)*(x7)))+(((x11)*(x12)*(x2)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x2)*(x3)*(x4)*(x5))));
eerot[8]=((((-1.00000000000000)*(x1)*(x13)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x13)*(x3)*(x4)*(x6)))+(((x0)*(x13)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x13)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x5)*(x8)))+(((x10)*(x12)*(x5)*(x6)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x3))));
eetrans[2]=((((0.0289900000000000)*(x1)*(x5)*(x6)*(x8)))+(((-0.00200000000000000)*(x0)*(x13)*(x8)*(x9)))+(((-0.0751000000000000)*(x0)*(x10)*(x2)*(x8)*(x9)))+(((0.00200000000000000)*(x1)*(x13)*(x3)*(x5)*(x9)))+(((0.00200000000000000)*(x1)*(x10)*(x11)*(x5)*(x8)))+(((0.0751000000000000)*(x0)*(x4)*(x7)*(x8)))+(((0.0751000000000000)*(x1)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((0.0751000000000000)*(x10)*(x11)*(x12)*(x2)*(x4)*(x5)))+(((-0.0751000000000000)*(x1)*(x11)*(x13)*(x2)*(x5)*(x8)))+(((-0.261080000000000)*(x1)*(x11)*(x5)*(x8)))+(((0.0751000000000000)*(x0)*(x3)*(x6)*(x7)*(x9)))+(((0.261080000000000)*(x12)*(x5)*(x6)))+(((0.00200000000000000)*(x11)*(x12)*(x13)*(x4)*(x5)))+(((0.0751000000000000)*(x1)*(x10)*(x2)*(x3)*(x5)*(x9)))+(((0.00200000000000000)*(x1)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((0.0751000000000000)*(x1)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((-0.261080000000000)*(x0)*(x11)*(x3)))+(((0.0751000000000000)*(x11)*(x12)*(x5)*(x7)*(x9)))+(((-0.0751000000000000)*(x0)*(x11)*(x13)*(x2)*(x3)))+(((0.00200000000000000)*(x0)*(x10)*(x11)*(x3)))+(((-0.0751000000000000)*(x1)*(x3)*(x4)*(x5)*(x7)))+(((0.0289900000000000)*(x0)*(x3)*(x6)))+(((-0.00200000000000000)*(x10)*(x12)*(x5)*(x6)))+(((0.0289900000000000)*(x11)*(x12)*(x5)))+(((0.289820000000000)*(x12)*(x5)))+(((-0.0290000000000000)*(x1)*(x5)*(x8)))+(((-0.0290000000000000)*(x0)*(x3)))+(((0.0751000000000000)*(x12)*(x13)*(x2)*(x5)*(x6)))+(((0.00200000000000000)*(x0)*(x13)*(x3)*(x4)*(x6)))+(((0.0751000000000000)*(x0)*(x10)*(x2)*(x3)*(x4)*(x6))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.0290000000000000)+(((0.00200000000000000)*(r02)))+(px)+(((-0.0751000000000000)*(r00))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.0930000000000000)+(((0.00200000000000000)*(r12)))+(py)+(((-0.0751000000000000)*(r10))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((0.00200000000000000)*(r22)))+(pz)+(((-0.0751000000000000)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=(pz)*(pz);
IKReal x1=((6.53497184281647)*(x0));
IKReal x2=(py)*(py);
IKReal x3=((6.53497184281647)*(x2));
IKReal x4=(px)*(px);
IKReal x5=((6.53497184281647)*(x4));
IKReal x6=((-1.00533888481549)+(x3)+(x1)+(x5));
if( (x6) < -1.0001 || (x6) > 1.0001 )
    continue;
IKReal x7=IKasin(x6);
j3array[0]=((-0.210315898568178)+(x7));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.93127675502162)+(((-1.00000000000000)*(x7))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
if( j3array[1] > IKPI )
    j3array[1]-=IK2PI;
else if( j3array[1] < -IKPI )
    j3array[1]+=IK2PI;
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x8=x4;
IKReal x9=x0;
IKReal x10=((x9)+(x8));
if( (x10) < (IKReal)-0.00001 )
    continue;
IKReal x11=IKsqrt(x10);
IKReal x12=IKabs(x11);
IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
IKReal x14=((0.0289900000000000)*(sj2)*(sj3));
IKReal x15=((0.0290000000000000)*(sj2));
IKReal x16=((0.261080000000000)*(cj3)*(sj2));
IKReal x17=((x15)+(x16));
IKReal x18=((((-1.00000000000000)*(x17)))+(x14));
IKReal x19=((x13)*(x18));
if( (x19) < -1.0001 || (x19) > 1.0001 )
    continue;
IKReal x20=IKasin(x19);
IKReal x21=((-1.00000000000000)*(pz));
IKReal x22=((-1.00000000000000)*(px));
IKReal x23=IKatan2(x21, x22);
j0array[0]=((((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x23))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x23)))+(x20));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
if( j0array[1] > IKPI )
    j0array[1]-=IK2PI;
else if( j0array[1] < -IKPI )
    j0array[1]+=IK2PI;
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
    j0valid[1]=false;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal j1eval[1];
j1eval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))*((sj0)*(sj0)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(pz)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((pz)*(pz))*((sj0)*(sj0))))+(((-1.00000000000000)*(sj2)*((py)*(py)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.289820000000000)*(pz)*(sj0)))+(((0.0289900000000000)*(cj0)*(cj3)*(px)))+(((-0.261080000000000)*(pz)*(sj0)*(sj3)))+(((0.289820000000000)*(cj0)*(px)))+(((0.0290000000000000)*(cj2)*(py)))+(((0.261080000000000)*(cj0)*(px)*(sj3)))+(((0.261080000000000)*(cj2)*(cj3)*(py)))+(((-0.0289900000000000)*(cj2)*(py)*(sj3)))+(((-0.0289900000000000)*(cj3)*(pz)*(sj0))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x24=x4;
IKReal x25=x2;
IKReal x26=x0;
IKReal x27=((px)*(sj0));
IKReal x28=((cj0)*(pz));
IKReal x29=((x27)+(x28));
IKReal x30=((-1.00000000000000)*(x29));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((0.153839818900000)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x25)))+(((-1.00000000000000)*(x24)))+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3))));
evalcond[2]=x30;
evalcond[3]=((0.153839818900000)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x25)))+(((-1.00000000000000)*(x24)))+(((0.0319464036000000)*(cj3)))+(((-2.71050543121376e-18)*((cj0)*(cj0))*((sj3)*(sj3))))+(((0.149650991200000)*(sj3))));
evalcond[4]=x30;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))*((sj0)*(sj0)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.261080000000000)*(cj3)*(py)))+(((-0.0289900000000000)*(cj3)*(pz)*(sj0)))+(((0.0289900000000000)*(cj0)*(cj3)*(px)))+(((0.0290000000000000)*(py)))+(((-0.261080000000000)*(pz)*(sj0)*(sj3)))+(((0.261080000000000)*(cj0)*(px)*(sj3)))+(((0.289820000000000)*(cj0)*(px)))+(((-0.0289900000000000)*(py)*(sj3)))+(((-0.289820000000000)*(pz)*(sj0))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.261080000000000)*(cj0)*(cj3)*(px)))+(((-0.0290000000000000)*(pz)*(sj0)))+(((-0.261080000000000)*(py)*(sj3)))+(((0.0290000000000000)*(cj0)*(px)))+(((-0.261080000000000)*(cj3)*(pz)*(sj0)))+(((-0.289820000000000)*(py)))+(((-0.0289900000000000)*(cj0)*(px)*(sj3)))+(((-0.0289900000000000)*(cj3)*(py)))+(((0.0289900000000000)*(pz)*(sj0)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x31=((0.261080000000000)*(cj3));
IKReal x32=((0.0290000000000000)+(x31));
IKReal x33=((0.0289900000000000)*(sj3));
IKReal x34=((((-1.00000000000000)*(x33)))+(x32));
IKReal x35=((cj0)*(px)*(x31));
IKReal x36=((0.0290000000000000)*(cj0)*(px));
IKReal x37=((pz)*(sj0)*(x33));
IKReal x38=((x37)+(x36)+(x35));
IKReal x39=((0.289820000000000)*(py));
IKReal x40=((pz)*(sj0)*(x31));
IKReal x41=((0.261080000000000)*(py)*(sj3));
IKReal x42=((cj0)*(px)*(x33));
IKReal x43=((0.0290000000000000)*(pz)*(sj0));
IKReal x44=((0.0289900000000000)*(cj3)*(py));
IKReal x45=((x39)+(x44)+(x42)+(x43)+(x40)+(x41));
IKReal x46=((((-1.00000000000000)*(x45)))+(x38));
IKReal x47=((IKabs(x46) != 0)?((IKReal)1/(x46)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x47)*(((((py)*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))))+(((x34)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3)))))))))), ((x47)*((((x34)*(x34))+(((-1.00000000000000)*((py)*(py))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x87=((0.0289900000000000)*(cj3));
IKReal x88=((0.261080000000000)*(sj3));
IKReal x89=((0.289820000000000)+(x88)+(x87));
IKReal x90=((0.261080000000000)*(cj3)*(py));
IKReal x91=((cj0)*(px)*(x87));
IKReal x92=((0.0290000000000000)*(py));
IKReal x93=((cj0)*(px)*(x88));
IKReal x94=((0.289820000000000)*(cj0)*(px));
IKReal x95=((x91)+(x90)+(x93)+(x92)+(x94));
IKReal x96=((pz)*(sj0)*(x87));
IKReal x97=((pz)*(sj0)*(x88));
IKReal x98=((0.0289900000000000)*(py)*(sj3));
IKReal x99=((0.289820000000000)*(pz)*(sj0));
IKReal x100=((x99)+(x98)+(x97)+(x96));
IKReal x101=((((-1.00000000000000)*(x100)))+(x95));
IKReal x102=((IKabs(x101) != 0)?((IKReal)1/(x101)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x102)*((((py)*(py))+(((-1.00000000000000)*((x89)*(x89))))))), ((x102)*(((((py)*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))))+(((x89)*(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x103=((pz)*(sj0));
IKReal x104=((cj0)*(px));
IKReal x105=((0.261080000000000)*(cj3));
IKReal x106=((0.0290000000000000)+(x105));
IKReal x107=((0.0289900000000000)*(sj3));
IKReal x108=((((-1.00000000000000)*(x107)))+(x106));
IKReal x109=((0.0289900000000000)*(cj3));
IKReal x110=((0.261080000000000)*(sj3));
IKReal x111=((0.289820000000000)+(x110)+(x109));
IKReal x112=((2.00000000000000)*(x103)*(x104));
IKReal x113=x2;
IKReal x114=(cj0)*(cj0);
IKReal x115=x4;
IKReal x116=(x104)*(x104);
IKReal x117=x0;
IKReal x118=(sj0)*(sj0);
IKReal x119=(x103)*(x103);
IKReal x120=((x113)+(x116)+(x119));
IKReal x121=((((-1.00000000000000)*(x120)))+(x112));
IKReal x122=((IKabs(x121) != 0)?((IKReal)1/(x121)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x122)*(((((x111)*(((((-1.00000000000000)*(x103)))+(x104)))))+(((-1.00000000000000)*(py)*(x108)))))), ((x122)*(((((x108)*(((((-1.00000000000000)*(x104)))+(x103)))))+(((-1.00000000000000)*(py)*(x111)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x123=x4;
IKReal x124=x2;
IKReal x125=x0;
IKReal x126=((px)*(sj0));
IKReal x127=((cj0)*(pz));
IKReal x128=((x126)+(x127));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124))));
evalcond[2]=((-1.00000000000000)*(x128));
evalcond[3]=((0.153839818900000)+(((0.0319464036000000)*(cj3)))+(((-2.71050543121376e-18)*((cj0)*(cj0))*((sj3)*(sj3))))+(((0.149650991200000)*(sj3)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124))));
evalcond[4]=x128;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(pz)*(sj0)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))*((sj0)*(sj0)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.0289900000000000)*(cj3)*(pz)*(sj0)))+(((0.0289900000000000)*(cj0)*(cj3)*(px)))+(((0.0289900000000000)*(py)*(sj3)))+(((-0.0290000000000000)*(py)))+(((-0.261080000000000)*(pz)*(sj0)*(sj3)))+(((0.261080000000000)*(cj0)*(px)*(sj3)))+(((0.289820000000000)*(cj0)*(px)))+(((-0.289820000000000)*(pz)*(sj0)))+(((-0.261080000000000)*(cj3)*(py))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.0289900000000000)*(pz)*(sj0)*(sj3)))+(((-0.0290000000000000)*(cj0)*(px)))+(((-0.261080000000000)*(cj0)*(cj3)*(px)))+(((0.261080000000000)*(cj3)*(pz)*(sj0)))+(((-0.261080000000000)*(py)*(sj3)))+(((-0.289820000000000)*(py)))+(((0.0289900000000000)*(cj0)*(px)*(sj3)))+(((-0.0289900000000000)*(cj3)*(py)))+(((0.0290000000000000)*(pz)*(sj0))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x129=((0.261080000000000)*(cj3));
IKReal x130=((0.0290000000000000)+(x129));
IKReal x131=((0.0289900000000000)*(sj3));
IKReal x132=((x130)+(((-1.00000000000000)*(x131))));
IKReal x133=((pz)*(sj0)*(x129));
IKReal x134=((cj0)*(px)*(x131));
IKReal x135=((0.0290000000000000)*(pz)*(sj0));
IKReal x136=((x135)+(x134)+(x133));
IKReal x137=((cj0)*(px)*(x129));
IKReal x138=((0.289820000000000)*(py));
IKReal x139=((0.0290000000000000)*(cj0)*(px));
IKReal x140=((0.261080000000000)*(py)*(sj3));
IKReal x141=((pz)*(sj0)*(x131));
IKReal x142=((0.0289900000000000)*(cj3)*(py));
IKReal x143=((x140)+(x141)+(x142)+(x137)+(x139)+(x138));
IKReal x144=((((-1.00000000000000)*(x143)))+(x136));
IKReal x145=((IKabs(x144) != 0)?((IKReal)1/(x144)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x145)*(((((x132)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3)))))))+(((-1.00000000000000)*(py)*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))))))), ((x145)*(((((-1.00000000000000)*((py)*(py))))+((x132)*(x132))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x146=((0.0289900000000000)*(cj3));
IKReal x147=((0.261080000000000)*(sj3));
IKReal x148=((0.289820000000000)+(x146)+(x147));
IKReal x149=((cj0)*(px)*(x146));
IKReal x150=((0.0289900000000000)*(py)*(sj3));
IKReal x151=((cj0)*(px)*(x147));
IKReal x152=((0.289820000000000)*(cj0)*(px));
IKReal x153=((x152)+(x151)+(x150)+(x149));
IKReal x154=((0.261080000000000)*(cj3)*(py));
IKReal x155=((pz)*(sj0)*(x146));
IKReal x156=((pz)*(sj0)*(x147));
IKReal x157=((0.0290000000000000)*(py));
IKReal x158=((0.289820000000000)*(pz)*(sj0));
IKReal x159=((x157)+(x156)+(x155)+(x154)+(x158));
IKReal x160=((((-1.00000000000000)*(x159)))+(x153));
IKReal x161=((IKabs(x160) != 0)?((IKReal)1/(x160)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x161)*(((((-1.00000000000000)*((x148)*(x148))))+((py)*(py))))), ((x161)*(((((py)*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))))+(((-1.00000000000000)*(x148)*(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x162=((0.261080000000000)*(cj3));
IKReal x163=((0.0290000000000000)+(x162));
IKReal x164=((0.0289900000000000)*(sj3));
IKReal x165=((((-1.00000000000000)*(x164)))+(x163));
IKReal x166=((cj0)*(px));
IKReal x167=((pz)*(sj0));
IKReal x168=((((-1.00000000000000)*(x167)))+(x166));
IKReal x169=((0.0289900000000000)*(cj3));
IKReal x170=((0.261080000000000)*(sj3));
IKReal x171=((0.289820000000000)+(x170)+(x169));
IKReal x172=((2.00000000000000)*(x166)*(x167));
IKReal x173=x2;
IKReal x174=(cj0)*(cj0);
IKReal x175=x4;
IKReal x176=(x166)*(x166);
IKReal x177=x0;
IKReal x178=(sj0)*(sj0);
IKReal x179=(x167)*(x167);
IKReal x180=((x179)+(x173)+(x176));
IKReal x181=((((-1.00000000000000)*(x180)))+(x172));
IKReal x182=((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x182)*(((((py)*(x165)))+(((x168)*(x171)))))), ((x182)*(((((-1.00000000000000)*(py)*(x171)))+(((x165)*(x168)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x183=((0.261080000000000)*(sj3));
IKReal x184=((0.0289900000000000)*(cj3));
IKReal x185=((0.289820000000000)+(x184)+(x183));
IKReal x186=((1.00000000000000)*(cj0)*(px)*(x184));
IKReal x187=((0.289820000000000)*(cj0)*(px));
IKReal x188=((0.0290000000000000)*(cj2)*(py));
IKReal x189=((cj0)*(px)*(x183));
IKReal x190=((0.261080000000000)*(cj2)*(cj3)*(py));
IKReal x191=((x190)+(x186)+(x187)+(x188)+(x189));
IKReal x192=((1.00000000000000)*(pz)*(sj0)*(x184));
IKReal x193=((0.289820000000000)*(pz)*(sj0));
IKReal x194=((pz)*(sj0)*(x183));
IKReal x195=((0.0289900000000000)*(cj2)*(py)*(sj3));
IKReal x196=((x193)+(x192)+(x195)+(x194));
IKReal x197=((((-1.00000000000000)*(x196)))+(x191));
IKReal x198=((IKabs(x197) != 0)?((IKReal)1/(x197)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x198)*(((((-1.00000000000000)*((x185)*(x185))))+((py)*(py))))), ((x198)*(((((py)*(((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))))+(((x185)*(((((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))+(((-0.0289900000000000)*(cj2)*(sj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x199=((cj2)*(px)*(sj0));
IKReal x200=((cj0)*(cj2)*(pz));
IKReal x201=((x199)+(x200));
IKReal x202=((-1.00000000000000)*(x201));
IKReal x203=((0.261080000000000)*(sj3));
IKReal x204=((0.0289900000000000)*(cj3));
IKReal x205=((0.289820000000000)+(x204)+(x203));
IKReal x206=((2.00000000000000)*(cj0)*(px)*(pz)*(sj0)*(sj2));
IKReal x207=(cj0)*(cj0);
IKReal x208=x4;
IKReal x209=((sj2)*(x207)*(x208));
IKReal x210=x0;
IKReal x211=(sj0)*(sj0);
IKReal x212=((sj2)*(x210)*(x211));
IKReal x213=x2;
IKReal x214=((sj2)*(x213));
IKReal x215=((x212)+(x214)+(x209));
IKReal x216=((x206)+(((-1.00000000000000)*(x215))));
IKReal x217=((IKabs(x216) != 0)?((IKReal)1/(x216)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x217)*(((((-1.00000000000000)*(py)*(x202)))+(((x205)*(((((-1.00000000000000)*(pz)*(sj0)*(sj2)))+(((cj0)*(px)*(sj2)))))))))), ((x217)*(((((x202)*(((((-1.00000000000000)*(cj0)*(px)))+(((pz)*(sj0)))))))+(((-1.00000000000000)*(py)*(sj2)*(x205)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x218=((0.261080000000000)*(sj3));
IKReal x219=((0.0289900000000000)*(cj3));
IKReal x220=((0.289820000000000)+(x218)+(x219));
IKReal x221=((pz)*(sj0));
IKReal x222=((cj0)*(px));
IKReal x223=((0.261080000000000)*(cj2)*(cj3));
IKReal x224=((0.0290000000000000)*(cj2));
IKReal x225=((x223)+(x224));
IKReal x226=((0.0289900000000000)*(cj2)*(sj3));
IKReal x227=((x225)+(((-1.00000000000000)*(x226))));
IKReal x228=((2.00000000000000)*(x221)*(x222));
IKReal x229=x2;
IKReal x230=(cj0)*(cj0);
IKReal x231=x4;
IKReal x232=(x222)*(x222);
IKReal x233=x0;
IKReal x234=(sj0)*(sj0);
IKReal x235=(x221)*(x221);
IKReal x236=((x229)+(x232)+(x235));
IKReal x237=((((-1.00000000000000)*(x236)))+(x228));
IKReal x238=((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x238)*(((((x220)*(((x222)+(((-1.00000000000000)*(x221)))))))+(((-1.00000000000000)*(py)*(x227)))))), ((x238)*(((((-1.00000000000000)*(py)*(x220)))+(((x227)*(((x221)+(((-1.00000000000000)*(x222)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x48=((cj1)*(sj3));
IKReal x49=((cj2)*(cj3)*(sj1));
IKReal x50=((x48)+(x49));
IKReal x51=((sj0)*(sj1)*(sj3));
IKReal x52=((cj0)*(cj3)*(sj2));
IKReal x53=((cj1)*(cj2)*(cj3)*(sj0));
IKReal x54=((x53)+(x52));
IKReal x55=((x51)+(((-1.00000000000000)*(x54))));
IKReal x56=((cj0)*(cj1)*(cj2)*(cj3));
IKReal x57=((cj3)*(sj0)*(sj2));
IKReal x58=((cj0)*(sj1)*(sj3));
IKReal x59=((x58)+(x57));
IKReal x60=((x56)+(((-1.00000000000000)*(x59))));
IKReal x61=((cj1)*(cj3));
IKReal x62=((cj2)*(sj1)*(sj3));
IKReal x63=((x61)+(((-1.00000000000000)*(x62))));
IKReal x64=((sj0)*(sj2)*(sj3));
IKReal x65=((cj0)*(cj3)*(sj1));
IKReal x66=((cj0)*(cj2)*(x48));
IKReal x67=((x65)+(x66));
IKReal x68=((x64)+(((-1.00000000000000)*(x67))));
IKReal x69=((cj2)*(sj0)*(x48));
IKReal x70=((cj3)*(sj0)*(sj1));
IKReal x71=((cj0)*(sj2)*(sj3));
IKReal x72=((x71)+(x70)+(x69));
IKReal x73=((cj2)*(sj0));
IKReal x74=((cj0)*(cj1)*(sj2));
IKReal x75=((x74)+(x73));
IKReal x76=((cj0)*(cj2));
IKReal x77=((cj1)*(sj0)*(sj2));
IKReal x78=((((-1.00000000000000)*(x77)))+(x76));
new_r00=((((r10)*(x50)))+(((r00)*(x60)))+(((r20)*(x55))));
new_r01=((((r11)*(x50)))+(((r01)*(x60)))+(((r21)*(x55))));
new_r02=((((r22)*(x55)))+(((r02)*(x60)))+(((r12)*(x50))));
new_r10=((((r10)*(x63)))+(((r00)*(x68)))+(((r20)*(x72))));
new_r11=((((r21)*(x72)))+(((r11)*(x63)))+(((r01)*(x68))));
new_r12=((((r02)*(x68)))+(((r22)*(x72)))+(((r12)*(x63))));
new_r20=((((r10)*(sj1)*(sj2)))+(((r20)*(x78)))+(((r00)*(x75))));
new_r21=((((r21)*(x78)))+(((r01)*(x75)))+(((r11)*(sj1)*(sj2))));
new_r22=((((r22)*(x78)))+(((r02)*(x75)))+(((r12)*(sj1)*(sj2))));
{
IKReal j5eval;
j5eval=new_r02;
if( j5eval >= -1.000010 && j5eval <= -0.999990 )
{
{
j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=1.00000000000000;
j6=((-1.00000000000000)*(IKatan2(new_r21, new_r20)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
if( j5eval >= 0.999990 && j5eval <= 1.000010 )
{
{
j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=-1.00000000000000;
j6=((((-1.00000000000000)*(IKatan2(new_r21, new_r20))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(new_r12)), new_r22);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
sj4array[1] = -sj4array[0];
cj4array[1] = -cj4array[0];
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(new_r02, ((-1.00000000000000)*(new_r12)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x79=IKsin(j4);
IKReal x80=((IKabs(x79) != 0)?((IKReal)1/(x79)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r20)*(x80)), ((new_r21)*(x80)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(new_r02, ((new_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x81=IKsin(j5);
IKReal x82=((IKabs(x81) != 0)?((IKReal)1/(x81)):(IKReal)1.0e30);
IKReal x83=IKsin(j4);
IKReal x84=IKcos(j4);
j6array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(x82)*(x83)))+(((new_r21)*(x82)*(x84)))), ((((new_r21)*(x83)))+(((new_r11)*(x84)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x85=IKcos(j5);
IKReal x86=((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x86)), ((new_r00)*(x86)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "6d4e89ee2def639f9bd0725041a01133"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
