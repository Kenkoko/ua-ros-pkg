/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-18 09:55:26.464325
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKcos(j[0]);
x1=IKsin(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=((x2)*(x3));
x5=IKcos(j[1]);
x6=IKcos(j[2]);
x7=((x0)*(x5)*(x6));
x8=IKcos(j[3]);
x9=IKsin(j[1]);
x10=IKcos(j[4]);
x11=((x4)+(((-1.00000000000000)*(x7))));
x12=((x1)*(x11));
x13=((x0)*(x8)*(x9));
x14=((((-1.00000000000000)*(x13)))+(x12));
x15=((x2)*(x6));
x16=((x0)*(x3)*(x5));
x17=((x15)+(x16));
x18=IKsin(j[4]);
x19=IKsin(j[6]);
x20=IKcos(j[5]);
x21=((x7)+(((-1.00000000000000)*(x4))));
x22=((x21)*(x8));
x23=((x0)*(x1)*(x9));
x24=((((-1.00000000000000)*(x23)))+(x22));
x25=IKsin(j[5]);
x26=((x14)*(x18));
x27=((-1.00000000000000)*(x17));
x28=((x10)*(x27));
x29=((x26)+(x28));
x30=IKcos(j[6]);
x31=((x10)*(x14));
x32=((x17)*(x18));
x33=((x32)+(x31));
x34=((0.0290000000000000)*(x7));
x35=((0.0290000000000000)*(x4));
x36=((x5)*(x8));
x37=((x1)*(x6)*(x9));
x38=((((-1.00000000000000)*(x37)))+(x36));
x39=((x1)*(x5));
x40=((x6)*(x8)*(x9));
x41=((x39)+(x40));
x42=((x20)*(x41));
x43=((x18)*(x38));
x44=((x18)*(x3)*(x9));
x45=((x10)*(x38));
x46=((x44)+(x45));
x47=((x10)*(x3)*(x9));
x48=((-1.00000000000000)*(x47));
x49=((x48)+(x43));
x50=((x0)*(x3));
x51=((x15)*(x5));
x52=((x51)+(x50));
x53=((-1.00000000000000)*(x52));
x54=((x1)*(x53));
x55=((x2)*(x8)*(x9));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x0)*(x6));
x58=((x4)*(x5));
x59=((x58)+(((-1.00000000000000)*(x57))));
x60=((-1.00000000000000)*(x18)*(x59));
x61=((-1.00000000000000)*(x10)*(x56));
x62=((x60)+(x61));
x63=((x52)*(x8));
x64=((x1)*(x2)*(x9));
x65=((x63)+(((-1.00000000000000)*(x64))));
x66=((x20)*(x65));
x67=((x18)*(x56));
x68=((x57)+(((-1.00000000000000)*(x58))));
x69=((x10)*(x68));
x70=((x67)+(x69));
x71=((x25)*(x70));
x72=((x71)+(x66));
x73=((0.0290000000000000)*(x50));
x74=((0.0290000000000000)*(x51));
eerot[0]=((((x19)*(x33)))+(((x30)*(((((x25)*(x29)))+(((x20)*(x24))))))));
eerot[1]=((((x30)*(x33)))+(((x19)*(((((-1.00000000000000)*(x20)*(x24)))+(((-1.00000000000000)*(x25)*(x29))))))));
eerot[2]=((((-1.00000000000000)*(x20)*(x29)))+(((x24)*(x25))));
eetrans[0]=((0.0290000000000000)+(((x8)*(((((-0.262000000000000)*(x4)))+(((0.262000000000000)*(x7)))))))+(((x30)*(((((0.0910000000000000)*(x20)*(((((-1.00000000000000)*(x23)))+(x22)))))+(((0.0910000000000000)*(x25)*(x29)))))))+(((-0.262000000000000)*(x23)))+(((-1.00000000000000)*(x35)))+(((0.0290000000000000)*(x0)))+(((x25)*(((((-0.00200000000000000)*(x22)))+(((0.00200000000000000)*(x23)))))))+(((x19)*(((((0.0910000000000000)*(x31)))+(((0.0910000000000000)*(x32)))))))+(x34)+(((x20)*(((((0.00200000000000000)*(x28)))+(((0.00200000000000000)*(x26)))))))+(((-0.290000000000000)*(x0)*(x9)))+(((-0.0290000000000000)*(x13)))+(((x1)*(((((-1.00000000000000)*(x34)))+(x35))))));
eerot[3]=((((x19)*(x46)))+(((x30)*(((x42)+(((x25)*(x49))))))));
eerot[4]=((((x30)*(x46)))+(((-1.00000000000000)*(x19)*(((((x25)*(((((-1.00000000000000)*(x47)))+(x43)))))+(x42))))));
eerot[5]=((((x20)*(((((-1.00000000000000)*(x43)))+(x47)))))+(((x25)*(x41))));
eetrans[1]=((0.0920000000000000)+(((0.290000000000000)*(x5)))+(((0.0290000000000000)*(x36)))+(((0.262000000000000)*(x40)))+(((x19)*(((((0.0910000000000000)*(x45)))+(((0.0910000000000000)*(x44)))))))+(((0.262000000000000)*(x39)))+(((x20)*(((((-0.00200000000000000)*(x47)))+(((0.00200000000000000)*(x43)))))))+(((0.0290000000000000)*(x6)*(x9)))+(((x30)*(((((0.0910000000000000)*(x25)*(x49)))+(((0.0910000000000000)*(x42)))))))+(((x25)*(((((-0.00200000000000000)*(x40)))+(((-0.00200000000000000)*(x39)))))))+(((-0.0290000000000000)*(x37))));
eerot[6]=((((x19)*(x62)))+(((-1.00000000000000)*(x30)*(x72))));
eerot[7]=((((x19)*(x72)))+(((x30)*(x62))));
eerot[8]=((((x20)*(x70)))+(((x25)*(((x64)+(((-1.00000000000000)*(x63))))))));
eetrans[2]=((((-1.00000000000000)*(x73)))+(((-1.00000000000000)*(x74)))+(((x25)*(((((-0.00200000000000000)*(x64)))+(((0.00200000000000000)*(x63)))))))+(((x20)*(((((-0.00200000000000000)*(x67)))+(((-0.00200000000000000)*(x69)))))))+(((x30)*(((((-0.0910000000000000)*(x71)))+(((-0.0910000000000000)*(x66)))))))+(((x8)*(((((-0.262000000000000)*(x51)))+(((-0.262000000000000)*(x50)))))))+(((0.290000000000000)*(x2)*(x9)))+(((0.262000000000000)*(x64)))+(((x1)*(((x74)+(x73)))))+(((-0.0290000000000000)*(x2)))+(((0.0290000000000000)*(x55)))+(((x19)*(((((-0.0910000000000000)*(x10)*(x56)))+(((-0.0910000000000000)*(x18)*(x59))))))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0, htj0,
j1, cj1, sj1, htj1,
j3, cj3, sj3, htj3,
j4, cj4, sj4, htj4,
j5, cj5, sj5, htj5,
j6, cj6, sj6, htj6,
j2, cj2, sj2, htj2,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.0290000000000000)+(((-0.0910000000000000)*(r00)))+(px)+(((0.00200000000000000)*(r02))));
new_r10=((-1.00000000000000)*(r20));
new_r11=((-1.00000000000000)*(r21));
new_r12=((-1.00000000000000)*(r22));
new_py=((((-0.00200000000000000)*(r22)))+(((0.0910000000000000)*(r20)))+(((-1.00000000000000)*(pz))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((-0.0920000000000000)+(py)+(((0.00200000000000000)*(r12)))+(((-0.0910000000000000)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(px)*(px);
IKReal x1=(py)*(py);
IKReal x2=(sj2)*(sj2)*(sj2)*(sj2);
IKReal x3=(py)*(py)*(py)*(py);
IKReal x4=(px)*(px)*(px)*(px);
IKReal x5=(sj2)*(sj2);
dummyeval[0]=((((2.00000000000000)*(x0)*(x1)*(x2)))+(((20402.0000000000)*(x0)*(x1)))+(((-198.000000000000)*(x3)*(x5)))+(((1.00000000000000)*(x2)*(x4)))+(((1.00000000000000)*(x2)*(x3)))+(((-396.000000000000)*(x0)*(x1)*(x5)))+(((-198.000000000000)*(x4)*(x5)))+(((10201.0000000000)*(x3)))+(((10201.0000000000)*(x4))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j3evalpoly[1];
IKReal x6=(px)*(px)*(px)*(px);
IKReal x7=(sj2)*(sj2)*(sj2)*(sj2);
IKReal x8=(px)*(px);
IKReal x9=(py)*(py);
IKReal x10=(py)*(py)*(py)*(py);
IKReal x11=(sj2)*(sj2);
IKReal x12=(pp)*(pp);
IKReal x13=(px)*(px)*(px)*(px)*(px)*(px);
IKReal x14=(py)*(py)*(py)*(py)*(py)*(py);
IKReal x15=(pp)*(pp)*(pp);
IKReal x16=(pp)*(pp)*(pp)*(pp);
op[0]=((((426575.881762717)*(x8)*(x9)))+(((41.8170651664266)*(x7)*(x8)*(x9)))+(((213287.940881359)*(x10)))+(((20.9085325832133)*(x6)*(x7)))+(((20.9085325832133)*(x10)*(x7)))+(((-4139.88945147623)*(x10)*(x11)))+(((-8279.77890295246)*(x11)*(x8)*(x9)))+(((213287.940881359)*(x6)))+(((-4139.88945147623)*(x11)*(x6))));
op[1]=((((9.14516978152145)*(x10)*(x7)))+(((355388.801711415)*(x8)*(x9)))+(((177694.400855707)*(x6)))+(((581.062062345356)*(pp)*(x10)*(x11)))+(((-1156977.57499565)*(pp)*(x10)))+(((-1948.73838575033)*(x11)*(x8)*(x9)))+(((177694.400855707)*(x10)))+(((18.2903395630429)*(x7)*(x8)*(x9)))+(((1162.12412469071)*(pp)*(x11)*(x8)*(x9)))+(((-1156977.57499565)*(pp)*(x6)))+(((9.14516978152145)*(x6)*(x7)))+(((581.062062345356)*(pp)*(x11)*(x6)))+(((-2313955.14999130)*(pp)*(x8)*(x9)))+(((-974.369192875163)*(x11)*(x6)))+(((-974.369192875163)*(x10)*(x11))));
op[2]=((((8528.09419557482)*(x11)*(x6)))+(((166515.354929509)*(x10)*(x8)))+(((55505.1183098363)*(x10)*(x9)))+(((19637742.5741430)*(x12)*(x6)))+(((174567.884433727)*(x11)*(x12)*(x6)))+(((8528.09419557482)*(x10)*(x11)))+(((-6032125.38649950)*(pp)*(x10)))+(((-54825.6456192232)*(pp)*(x10)*(x11)))+(((110334.008001152)*(x8)*(x9)))+(((-587.246363235057)*(x10)*(x11)*(x9)))+(((55167.0040005759)*(x10)))+(((2.00000000000000)*(x7)*(x8)*(x9)))+(((39275485.1482860)*(x12)*(x8)*(x9)))+(((-1761.73908970517)*(x10)*(x11)*(x8)))+(((17056.1883911496)*(x11)*(x8)*(x9)))+(((-54825.6456192232)*(pp)*(x11)*(x6)))+(((349135.768867454)*(x11)*(x12)*(x8)*(x9)))+(((-109651.291238446)*(pp)*(x11)*(x8)*(x9)))+(((x6)*(x7)))+(((x10)*(x7)))+(((-12064250.7729990)*(pp)*(x8)*(x9)))+(((174567.884433727)*(x10)*(x11)*(x12)))+(((19637742.5741430)*(x10)*(x12)))+(((-587.246363235057)*(x11)*(x6)*(x8)))+(((166515.354929509)*(x6)*(x9)))+(((-1761.73908970517)*(x11)*(x6)*(x9)))+(((55505.1183098363)*(x6)*(x8)))+(((-6032125.38649950)*(pp)*(x6)))+(((55167.0040005759)*(x6))));
op[3]=((((-25319.8604522106)*(x10)*(x9)))+(((3696.69670490479)*(x11)*(x6)))+(((164858.940991702)*(pp)*(x6)*(x8)))+(((7563.40466053608)*(x6)))+(((-131.613582521716)*(x11)*(x6)*(x8)))+(((78248.2654706993)*(x11)*(x12)*(x8)*(x9)))+(((-24054.0454294711)*(pp)*(x10)*(x11)))+(((-2361225.96721400)*(pp)*(x6)))+(((39124.1327353497)*(x10)*(x11)*(x12)))+(((164858.940991702)*(pp)*(x10)*(x9)))+(((-131.613582521716)*(x10)*(x11)*(x9)))+(((-48108.0908589423)*(pp)*(x11)*(x8)*(x9)))+(((22580137.1452532)*(x12)*(x6)))+(((15126.8093210722)*(x8)*(x9)))+(((494576.822975107)*(pp)*(x10)*(x8)))+(((-49006819.5575810)*(pp)*(x12)*(x6)))+(((-49006819.5575810)*(pp)*(x10)*(x12)))+(((7393.39340980959)*(x11)*(x8)*(x9)))+(((-75959.5813566318)*(x6)*(x9)))+(((-75959.5813566318)*(x10)*(x8)))+(((7563.40466053608)*(x10)))+(((3696.69670490479)*(x10)*(x11)))+(((-4722451.93442800)*(pp)*(x8)*(x9)))+(((39124.1327353497)*(x11)*(x12)*(x6)))+(((-2361225.96721400)*(pp)*(x10)))+(((-98013639.1151619)*(pp)*(x12)*(x8)*(x9)))+(((-394.840747565149)*(x10)*(x11)*(x8)))+(((-394.840747565149)*(x11)*(x6)*(x9)))+(((22580137.1452532)*(x10)*(x12)))+(((45160274.2905064)*(x12)*(x8)*(x9)))+(((-25319.8604522106)*(x6)*(x8)))+(((-24054.0454294711)*(pp)*(x11)*(x6)))+(((494576.822975107)*(pp)*(x6)*(x9))));
op[4]=((((386.414565490440)*(x10)))+(((-14.5679156226327)*(x11)*(x6)*(x8)))+(((-2574633.63617726)*(x10)*(x12)*(x9)))+(((-235092215.821810)*(pp)*(x12)*(x6)))+(((-235092215.821810)*(pp)*(x10)*(x12)))+(((-43.7037468678981)*(x11)*(x6)*(x9)))+(((765348881.146629)*(x16)*(x8)*(x9)))+(((-236238.276503501)*(pp)*(x6)))+(((36875717.8787793)*(x10)*(x12)))+(((-7723900.90853178)*(x12)*(x6)*(x9)))+(((790850.214024569)*(pp)*(x6)*(x8)))+(((-2574633.63617726)*(x12)*(x6)*(x8)))+(((382674440.573315)*(x16)*(x6)))+(((4330.53377605015)*((x6)*(x6))))+(((382674440.573315)*(x10)*(x16)))+(((4330.53377605015)*(x11)*(x12)*(x6)))+(((386.414565490440)*(x6)))+(((-236238.276503501)*(pp)*(x10)))+(((399.849974585830)*(x11)*(x6)))+(((2372550.64207371)*(pp)*(x6)*(x9)))+(((8661.06755210030)*(x11)*(x12)*(x8)*(x9)))+(((-14.5679156226327)*(x10)*(x11)*(x9)))+(((399.849974585830)*(x10)*(x11)))+(((-118875.545297713)*(x10)*(x9)))+(((-2631.77796958385)*(pp)*(x10)*(x11)))+(((-43.7037468678981)*(x10)*(x11)*(x8)))+(((-118875.545297713)*(x6)*(x8)))+(((-356626.635893140)*(x6)*(x9)))+(((-7723900.90853178)*(x10)*(x12)*(x8)))+(((772.829130980880)*(x8)*(x9)))+(((36875717.8787793)*(x12)*(x6)))+(((4330.53377605015)*((x10)*(x10))))+(((17322.1351042006)*(x10)*(x8)*(x9)))+(((17322.1351042006)*(x6)*(x8)*(x9)))+(((-472476.553007001)*(pp)*(x8)*(x9)))+(((-356626.635893140)*(x10)*(x8)))+(((-5263.55593916771)*(pp)*(x11)*(x8)*(x9)))+(((799.699949171659)*(x11)*(x8)*(x9)))+(((4330.53377605015)*(x10)*(x11)*(x12)))+(((25983.2026563009)*(x10)*(x6)))+(((2372550.64207371)*(pp)*(x10)*(x8)))+(((790850.214024569)*(pp)*(x10)*(x9)))+(((-470184431.643620)*(pp)*(x12)*(x8)*(x9)))+(((-2631.77796958385)*(pp)*(x11)*(x6)))+(((73751435.7575587)*(x12)*(x8)*(x9))));
polyroots4(op,zeror,numroots);
IKReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IKReal cj3 = zeror[ij3];
IKReal x17=x9;
IKReal x18=x11;
IKReal x19=x8;
IKReal x20=x12;
IKReal x21=((5.65824800000000e-6)*(x17)*(x18));
IKReal x22=((5.11193440000000e-5)*(x17)*(x18));
IKReal x23=((5.11193440000000e-5)*(x18)*(x19));
IKReal x24=((5.65824800000000e-6)*(x18)*(x19));
tempj3array[0]=IKatan2(((((IKabs(((((0.300556000000000)*(pp)*(x19)))+(((0.300556000000000)*(pp)*(x17)))+(((cj3)*(((((-0.00962260089600000)*(x19)))+(((-0.00962260089600000)*(x17)))+(x22)+(x23)))))+(((-0.0461608932600000)*(x17)))+(((-0.0461608932600000)*(x19)))+(x24)+(x21))) != 0)?((IKReal)1/(((((0.300556000000000)*(pp)*(x19)))+(((0.300556000000000)*(pp)*(x17)))+(((cj3)*(((((-0.00962260089600000)*(x19)))+(((-0.00962260089600000)*(x17)))+(x22)+(x23)))))+(((-0.0461608932600000)*(x17)))+(((-0.0461608932600000)*(x19)))+(x24)+(x21)))):(IKReal)1.0e30))*(((((-0.00672800000000000)*(x17)*(x19)))+(((-0.307170000000000)*(pp)*(x17)))+(((-0.307170000000000)*(pp)*(x19)))+(((x19)*(x20)))+(((-0.00336400000000000)*((x17)*(x17))))+(((x17)*(x20)))+(x24)+(x21)+((((cj3)*(cj3))*(((((0.000228089292000000)*(x18)*(x19)))+(((-0.0215584530280000)*(x17)))+(((-0.0215584530280000)*(x19)))+(((0.000228089292000000)*(x17)*(x18)))))))+(((cj3)*(((((-0.0640320000000000)*(pp)*(x17)))+(((-0.0640320000000000)*(pp)*(x19)))+(((0.00983435472000000)*(x19)))+(((0.00983435472000000)*(x17)))+(x22)+(x23)))))+(((0.0461718295090000)*(x19)))+(((0.0461718295090000)*(x17)))+(((-0.00336400000000000)*((x19)*(x19))))))), cj3);
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
bool valid = true;
for( int kj3 = 0; kj3 < numsolutions; ++kj3)
{
    if( IKabs(cj3array[kj3]-cj3array[numsolutions]) < 0.0001 && IKabs(sj3array[kj3]-sj3array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

IKReal x25=x9;
IKReal x26=x11;
IKReal x27=x8;
j3evalpoly[0]=((((0.300556000000000)*(pp)*(x25)))+(((0.300556000000000)*(pp)*(x27)))+(((-0.0461608932600000)*(x27)))+(((-0.0461608932600000)*(x25)))+(((5.65824800000000e-6)*(x25)*(x26)))+(((cj3)*(((((5.11193440000000e-5)*(x26)*(x27)))+(((-0.00962260089600000)*(x27)))+(((-0.00962260089600000)*(x25)))+(((5.11193440000000e-5)*(x25)*(x26)))))))+(((5.65824800000000e-6)*(x26)*(x27))));
if( IKabs(j3evalpoly[0]) < 0.0000001000000000  )
{
    continue;
}
{
IKReal dummyeval[2];
IKReal x28=x8;
IKReal x29=x9;
IKReal x30=((x28)+(x29));
IKReal x31=((-1.00000000000000)*(x30));
dummyeval[0]=x31;
dummyeval[1]=x31;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x32=((0.0290000000000000)*(cj3));
IKReal x33=((0.262000000000000)*(sj3));
IKReal x34=((0.290000000000000)+(x33)+(x32));
IKReal x35=((0.0290000000000000)*(cj2));
IKReal x36=((0.262000000000000)*(cj2)*(cj3));
IKReal x37=((x36)+(x35));
IKReal x38=((1.00000000000000)*(sj3)*(x35));
IKReal x39=((((-1.00000000000000)*(x38)))+(x37));
IKReal x40=IKatan2(x34, x39);
IKReal x41=(x39)*(x39);
IKReal x42=(x34)*(x34);
IKReal x43=((x42)+(x41));
if( (x43) < (IKReal)-0.00001 )
    continue;
IKReal x44=IKsqrt(x43);
IKReal x45=IKabs(x44);
IKReal x46=((IKabs(x45) != 0)?((IKReal)1/(x45)):(IKReal)1.0e30);
IKReal x47=((pz)*(x46));
if( (x47) < -1.0001 || (x47) > 1.0001 )
    continue;
IKReal x48=IKasin(x47);
j1array[0]=((((-1.00000000000000)*(x40)))+(x48));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x48)))+(((-1.00000000000000)*(x40))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[2];
IKReal x49=x8;
IKReal x50=x9;
IKReal x51=((x49)+(x50));
IKReal x52=((-1.00000000000000)*(x51));
dummyeval[0]=x52;
dummyeval[1]=x52;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj1)*(sj2)*((py)*(py))))+(((cj1)*(sj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.262000000000000)*(cj3)*(sj1)))+(((0.262000000000000)*(cj1)*(sj3)))+(((0.0290000000000000)*(cj1)*(cj3)))+(((-0.0290000000000000)*(sj1)*(sj3)))+(((0.0290000000000000)*(sj1)))+(((-1.00000000000000)*(pz)))+(((0.290000000000000)*(cj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x53=x8;
IKReal x54=x9;
IKReal x55=((x54)+(x53));
IKReal x56=((-1.00000000000000)*(x55));
dummyeval[0]=x56;
dummyeval[1]=x56;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x57=x32;
IKReal x58=x33;
IKReal x59=((0.290000000000000)+(x58)+(x57));
IKReal x60=((x59)+(((-1.00000000000000)*(pz))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=x60;
evalcond[2]=x60;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x61=x8;
IKReal x62=x9;
IKReal x63=((x61)+(x62));
IKReal x64=((-1.00000000000000)*(x63));
dummyeval[0]=x64;
dummyeval[1]=x64;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x65=x8;
IKReal x66=x9;
IKReal x67=((x65)+(x66));
IKReal x68=((-1.00000000000000)*(x67));
dummyeval[0]=x68;
dummyeval[1]=x68;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x69=((0.150278000000000)*(sj3));
IKReal x70=((0.0320160000000000)*(cj3));
IKReal x71=((0.153585000000000)+(x70)+(x69));
IKReal x72=((x71)+(((-1.00000000000000)*(pp))));
IKReal x73=x8;
IKReal x74=((29.0000000000000)*(x73));
IKReal x75=x9;
IKReal x76=((29.0000000000000)*(x75));
IKReal x77=((x76)+(x74));
IKReal x78=((-1.00000000000000)*(x77));
IKReal x79=((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x72)*(x79)), ((500.000000000000)*(px)*(x72)*(x79)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x212=((0.0179790000000000)+(pp));
IKReal x213=((0.580000000000000)*(pz));
IKReal x214=((x212)+(((-1.00000000000000)*(x213))));
IKReal x215=x8;
IKReal x216=((29.0000000000000)*(x215));
IKReal x217=x9;
IKReal x218=((29.0000000000000)*(x217));
IKReal x219=((x216)+(x218));
IKReal x220=((-1.00000000000000)*(x219));
IKReal x221=((IKabs(x220) != 0)?((IKReal)1/(x220)):(IKReal)1.0e30);
j0array[0]=IKatan2(((-250.000000000000)*(py)*(x214)*(x221)), ((-250.000000000000)*(px)*(x214)*(x221)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x222=x8;
IKReal x223=x9;
IKReal x224=((x223)+(x222));
IKReal x225=((IKabs(x224) != 0)?((IKReal)1/(x224)):(IKReal)1.0e30);
IKReal x226=((0.262000000000000)*(cj3));
IKReal x227=((0.0580000000000000)+(x226));
IKReal x228=((0.0290000000000000)*(sj3));
IKReal x229=((x227)+(((-1.00000000000000)*(x228))));
j0array[0]=IKatan2(((py)*(x225)*(x229)), ((px)*(x225)*(x229)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x230=x32;
IKReal x231=x33;
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(x230)+(x231)+(pz));
evalcond[2]=((-0.290000000000000)+(((-1.00000000000000)*(x230)))+(((-1.00000000000000)*(x231)))+(((-1.00000000000000)*(pz))));
evalcond[3]=((-0.0146150000000000)+(((-1.00000000000000)*(pp)))+(((-0.580000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x232=x8;
IKReal x233=x9;
IKReal x234=((x232)+(x233));
IKReal x235=((-1.00000000000000)*(x234));
dummyeval[0]=x235;
dummyeval[1]=x235;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x236=((0.150278000000000)*(sj3));
IKReal x237=((0.0320160000000000)*(cj3));
IKReal x238=((0.153585000000000)+(x236)+(x237));
IKReal x239=((x238)+(((-1.00000000000000)*(pp))));
IKReal x240=x8;
IKReal x241=((29.0000000000000)*(x240));
IKReal x242=x9;
IKReal x243=((29.0000000000000)*(x242));
IKReal x244=((x243)+(x241));
IKReal x245=((-1.00000000000000)*(x244));
IKReal x246=((IKabs(x245) != 0)?((IKReal)1/(x245)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x239)*(x246)), ((500.000000000000)*(px)*(x239)*(x246)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x247=x8;
IKReal x248=x9;
IKReal x249=((x247)+(x248));
IKReal x250=((IKabs(x249) != 0)?((IKReal)1/(x249)):(IKReal)1.0e30);
IKReal x251=((0.0290000000000000)*(sj3));
IKReal x252=((0.262000000000000)*(cj3));
IKReal x253=((x251)+(((-1.00000000000000)*(x252))));
j0array[0]=IKatan2(((py)*(x250)*(x253)), ((px)*(x250)*(x253)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x254=((0.262000000000000)*(cj3));
IKReal x255=((0.0290000000000000)+(x254));
IKReal x256=((0.0290000000000000)*(sj3));
IKReal x257=((x256)+(pz));
IKReal x258=((x255)+(((-1.00000000000000)*(x257))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=x258;
evalcond[2]=x258;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x259=x8;
IKReal x260=x9;
IKReal x261=((x259)+(x260));
dummyeval[0]=x261;
dummyeval[1]=x261;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x262=x8;
IKReal x263=x9;
IKReal x264=((x263)+(x262));
IKReal x265=((-1.00000000000000)*(x264));
dummyeval[0]=x265;
dummyeval[1]=x265;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x266=((0.150278000000000)*(sj3));
IKReal x267=((0.0320160000000000)*(cj3));
IKReal x268=((0.153585000000000)+(x267)+(x266));
IKReal x269=((x268)+(((-1.00000000000000)*(pp))));
IKReal x270=x8;
IKReal x271=((29.0000000000000)*(x270));
IKReal x272=x9;
IKReal x273=((29.0000000000000)*(x272));
IKReal x274=((x273)+(x271));
IKReal x275=((-1.00000000000000)*(x274));
IKReal x276=((IKabs(x275) != 0)?((IKReal)1/(x275)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x269)*(x276)), ((500.000000000000)*(px)*(x269)*(x276)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x277=x9;
IKReal x278=((261.000000000000)*(x277));
IKReal x279=x8;
IKReal x280=((261.000000000000)*(x279));
IKReal x281=((x278)+(x280));
IKReal x282=((IKabs(x281) != 0)?((IKReal)1/(x281)):(IKReal)1.0e30);
IKReal x283=((0.0580000000000000)*(pz));
IKReal x284=((0.000523000000000000)+(x283));
IKReal x285=((x284)+(((-1.00000000000000)*(pp))));
j0array[0]=IKatan2(((500.000000000000)*(py)*(x282)*(x285)), ((500.000000000000)*(px)*(x282)*(x285)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x286=x32;
IKReal x287=x33;
IKReal x288=((0.261000000000000)+(x287)+(x286));
IKReal x289=x8;
IKReal x290=x9;
IKReal x291=((x290)+(x289));
IKReal x292=((-1.00000000000000)*(x291));
IKReal x293=((IKabs(x292) != 0)?((IKReal)1/(x292)):(IKReal)1.0e30);
j0array[0]=IKatan2(((py)*(x288)*(x293)), ((px)*(x288)*(x293)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x294=((0.262000000000000)*(cj3));
IKReal x295=((0.0290000000000000)*(sj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((-0.0290000000000000)+(((-1.00000000000000)*(x294)))+(x295)+(((-1.00000000000000)*(pz))));
evalcond[2]=((0.0290000000000000)+(((-1.00000000000000)*(x295)))+(x294)+(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x296=x8;
IKReal x297=x9;
IKReal x298=((x296)+(x297));
IKReal x299=((-1.00000000000000)*(x298));
dummyeval[0]=x299;
dummyeval[1]=x299;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x300=x8;
IKReal x301=x9;
IKReal x302=((x300)+(x301));
IKReal x303=((-1.00000000000000)*(x302));
dummyeval[0]=x303;
dummyeval[1]=x303;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x304=((0.150278000000000)*(sj3));
IKReal x305=((0.0320160000000000)*(cj3));
IKReal x306=((0.153585000000000)+(x304)+(x305));
IKReal x307=((x306)+(((-1.00000000000000)*(pp))));
IKReal x308=x8;
IKReal x309=((29.0000000000000)*(x308));
IKReal x310=x9;
IKReal x311=((29.0000000000000)*(x310));
IKReal x312=((x309)+(x311));
IKReal x313=((-1.00000000000000)*(x312));
IKReal x314=((IKabs(x313) != 0)?((IKReal)1/(x313)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x307)*(x314)), ((500.000000000000)*(px)*(x307)*(x314)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x315=((0.0580000000000000)*(pz));
IKReal x316=((0.0331170000000000)+(x315)+(pp));
IKReal x317=x9;
IKReal x318=((319.000000000000)*(x317));
IKReal x319=x8;
IKReal x320=((319.000000000000)*(x319));
IKReal x321=((x320)+(x318));
IKReal x322=((-1.00000000000000)*(x321));
IKReal x323=((IKabs(x322) != 0)?((IKReal)1/(x322)):(IKReal)1.0e30);
j0array[0]=IKatan2(((-500.000000000000)*(py)*(x316)*(x323)), ((-500.000000000000)*(px)*(x316)*(x323)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x324=x8;
IKReal x325=x9;
IKReal x326=((x324)+(x325));
IKReal x327=((IKabs(x326) != 0)?((IKReal)1/(x326)):(IKReal)1.0e30);
IKReal x328=x32;
IKReal x329=x33;
IKReal x330=((0.319000000000000)+(x328)+(x329));
j0array[0]=IKatan2(((py)*(x327)*(x330)), ((px)*(x327)*(x330)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x331=x32;
IKReal x332=x33;
IKReal x333=((0.290000000000000)+(x332)+(x331));
IKReal x334=((cj1)*(pz));
IKReal x335=((0.0290000000000000)*(sj1));
IKReal x336=((x335)+(x334));
IKReal x337=((x333)+(((-1.00000000000000)*(x336))));
IKReal x338=x9;
IKReal x339=((sj1)*(x338));
IKReal x340=x8;
IKReal x341=((sj1)*(x340));
IKReal x342=((x339)+(x341));
IKReal x343=((-1.00000000000000)*(x342));
IKReal x344=((IKabs(x343) != 0)?((IKReal)1/(x343)):(IKReal)1.0e30);
j0array[0]=IKatan2(((py)*(x337)*(x344)), ((px)*(x337)*(x344)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x345=x8;
IKReal x346=((cj1)*(x345));
IKReal x347=x9;
IKReal x348=((cj1)*(x347));
IKReal x349=((x346)+(x348));
IKReal x350=((IKabs(x349) != 0)?((IKReal)1/(x349)):(IKReal)1.0e30);
IKReal x351=((0.0290000000000000)*(cj1));
IKReal x352=((0.262000000000000)*(cj3));
IKReal x353=((0.0290000000000000)+(x351)+(x352));
IKReal x354=((pz)*(sj1));
IKReal x355=((0.0290000000000000)*(sj3));
IKReal x356=((x355)+(x354));
IKReal x357=((((-1.00000000000000)*(x356)))+(x353));
j0array[0]=IKatan2(((py)*(x350)*(x357)), ((px)*(x350)*(x357)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x358=((0.150278000000000)*(sj3));
IKReal x359=((0.0320160000000000)*(cj3));
IKReal x360=((0.153585000000000)+(x359)+(x358));
IKReal x361=((x360)+(((-1.00000000000000)*(pp))));
IKReal x362=x8;
IKReal x363=((29.0000000000000)*(x362));
IKReal x364=x9;
IKReal x365=((29.0000000000000)*(x364));
IKReal x366=((x363)+(x365));
IKReal x367=((-1.00000000000000)*(x366));
IKReal x368=((IKabs(x367) != 0)?((IKReal)1/(x367)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x361)*(x368)), ((500.000000000000)*(px)*(x361)*(x368)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((-0.0290000000000000)*(sj1)))+(((0.262000000000000)*(cj1)*(sj3)))+(((0.0290000000000000)*(cj1)*(cj3)))+(((0.0290000000000000)*(sj1)*(sj3)))+(((-0.262000000000000)*(cj3)*(sj1)))+(((-1.00000000000000)*(pz)))+(((0.290000000000000)*(cj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x369=x8;
IKReal x370=x9;
IKReal x371=((x370)+(x369));
IKReal x372=((-1.00000000000000)*(x371));
dummyeval[0]=x372;
dummyeval[1]=x372;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj1)*((py)*(py))))+(((-1.00000000000000)*(cj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x373=x32;
IKReal x374=x33;
IKReal x375=((0.290000000000000)+(x374)+(x373));
IKReal x376=((x375)+(((-1.00000000000000)*(pz))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=x376;
evalcond[2]=x376;
evalcond[3]=((-0.0146150000000000)+(((-1.00000000000000)*(pp)))+(((0.580000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x377=x8;
IKReal x378=x9;
IKReal x379=((x378)+(x377));
IKReal x380=((-1.00000000000000)*(x379));
dummyeval[0]=x380;
dummyeval[1]=x380;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x381=((0.150278000000000)*(sj3));
IKReal x382=((0.0320160000000000)*(cj3));
IKReal x383=((0.153585000000000)+(x382)+(x381));
IKReal x384=((x383)+(((-1.00000000000000)*(pp))));
IKReal x385=x8;
IKReal x386=((29.0000000000000)*(x385));
IKReal x387=x9;
IKReal x388=((29.0000000000000)*(x387));
IKReal x389=((x386)+(x388));
IKReal x390=((-1.00000000000000)*(x389));
IKReal x391=((IKabs(x390) != 0)?((IKReal)1/(x390)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x384)*(x391)), ((500.000000000000)*(px)*(x384)*(x391)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x392=x8;
IKReal x393=x9;
IKReal x394=((x393)+(x392));
IKReal x395=((IKabs(x394) != 0)?((IKReal)1/(x394)):(IKReal)1.0e30);
IKReal x396=((0.0290000000000000)*(sj3));
IKReal x397=((0.262000000000000)*(cj3));
IKReal x398=((((-1.00000000000000)*(x397)))+(x396));
j0array[0]=IKatan2(((py)*(x395)*(x398)), ((px)*(x395)*(x398)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x399=x32;
IKReal x400=x33;
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(x399)+(x400)+(pz));
evalcond[2]=((-0.290000000000000)+(((-1.00000000000000)*(x399)))+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x400))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x401=x8;
IKReal x402=x9;
IKReal x403=((x401)+(x402));
IKReal x404=((-1.00000000000000)*(x403));
dummyeval[0]=x404;
dummyeval[1]=x404;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x405=x8;
IKReal x406=x9;
IKReal x407=((x405)+(x406));
IKReal x408=((-1.00000000000000)*(x407));
dummyeval[0]=x408;
dummyeval[1]=x408;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x409=((0.150278000000000)*(sj3));
IKReal x410=((0.0320160000000000)*(cj3));
IKReal x411=((0.153585000000000)+(x409)+(x410));
IKReal x412=((x411)+(((-1.00000000000000)*(pp))));
IKReal x413=x8;
IKReal x414=((29.0000000000000)*(x413));
IKReal x415=x9;
IKReal x416=((29.0000000000000)*(x415));
IKReal x417=((x416)+(x414));
IKReal x418=((-1.00000000000000)*(x417));
IKReal x419=((IKabs(x418) != 0)?((IKReal)1/(x418)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x412)*(x419)), ((500.000000000000)*(px)*(x412)*(x419)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x420=((0.580000000000000)*(pz));
IKReal x421=((0.0179790000000000)+(x420)+(pp));
IKReal x422=x8;
IKReal x423=((29.0000000000000)*(x422));
IKReal x424=x9;
IKReal x425=((29.0000000000000)*(x424));
IKReal x426=((x425)+(x423));
IKReal x427=((-1.00000000000000)*(x426));
IKReal x428=((IKabs(x427) != 0)?((IKReal)1/(x427)):(IKReal)1.0e30);
j0array[0]=IKatan2(((-250.000000000000)*(py)*(x421)*(x428)), ((-250.000000000000)*(px)*(x421)*(x428)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x429=x8;
IKReal x430=x9;
IKReal x431=((x429)+(x430));
IKReal x432=((IKabs(x431) != 0)?((IKReal)1/(x431)):(IKReal)1.0e30);
IKReal x433=((0.262000000000000)*(cj3));
IKReal x434=((0.0580000000000000)+(x433));
IKReal x435=((0.0290000000000000)*(sj3));
IKReal x436=((((-1.00000000000000)*(x435)))+(x434));
j0array[0]=IKatan2(((py)*(x432)*(x436)), ((px)*(x432)*(x436)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x437=((0.262000000000000)*(cj3));
IKReal x438=((0.0290000000000000)*(sj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((-0.0290000000000000)+(((-1.00000000000000)*(x437)))+(x438)+(((-1.00000000000000)*(pz))));
evalcond[2]=((0.0290000000000000)+(((-1.00000000000000)*(x438)))+(x437)+(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x439=x8;
IKReal x440=x9;
IKReal x441=((x439)+(x440));
dummyeval[0]=x441;
dummyeval[1]=x441;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x442=x8;
IKReal x443=x9;
IKReal x444=((x443)+(x442));
IKReal x445=((-1.00000000000000)*(x444));
dummyeval[0]=x445;
dummyeval[1]=x445;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x446=((0.150278000000000)*(sj3));
IKReal x447=((0.0320160000000000)*(cj3));
IKReal x448=((0.153585000000000)+(x447)+(x446));
IKReal x449=((x448)+(((-1.00000000000000)*(pp))));
IKReal x450=x8;
IKReal x451=((29.0000000000000)*(x450));
IKReal x452=x9;
IKReal x453=((29.0000000000000)*(x452));
IKReal x454=((x453)+(x451));
IKReal x455=((-1.00000000000000)*(x454));
IKReal x456=((IKabs(x455) != 0)?((IKReal)1/(x455)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x449)*(x456)), ((500.000000000000)*(px)*(x449)*(x456)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x457=x9;
IKReal x458=((261.000000000000)*(x457));
IKReal x459=x8;
IKReal x460=((261.000000000000)*(x459));
IKReal x461=((x458)+(x460));
IKReal x462=((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30);
IKReal x463=((0.0580000000000000)*(pz));
IKReal x464=((x463)+(pp));
IKReal x465=((0.000523000000000000)+(((-1.00000000000000)*(x464))));
j0array[0]=IKatan2(((500.000000000000)*(py)*(x462)*(x465)), ((500.000000000000)*(px)*(x462)*(x465)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x466=x32;
IKReal x467=x33;
IKReal x468=((0.261000000000000)+(x467)+(x466));
IKReal x469=x8;
IKReal x470=x9;
IKReal x471=((x469)+(x470));
IKReal x472=((-1.00000000000000)*(x471));
IKReal x473=((IKabs(x472) != 0)?((IKReal)1/(x472)):(IKReal)1.0e30);
j0array[0]=IKatan2(((py)*(x468)*(x473)), ((px)*(x468)*(x473)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x474=((0.262000000000000)*(cj3));
IKReal x475=((0.0290000000000000)+(x474));
IKReal x476=((0.0290000000000000)*(sj3));
IKReal x477=((x476)+(pz));
IKReal x478=((((-1.00000000000000)*(x477)))+(x475));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=x478;
evalcond[2]=x478;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x479=x8;
IKReal x480=x9;
IKReal x481=((x480)+(x479));
IKReal x482=((-1.00000000000000)*(x481));
dummyeval[0]=x482;
dummyeval[1]=x482;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x483=x8;
IKReal x484=x9;
IKReal x485=((x483)+(x484));
IKReal x486=((-1.00000000000000)*(x485));
dummyeval[0]=x486;
dummyeval[1]=x486;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x487=((0.150278000000000)*(sj3));
IKReal x488=((0.0320160000000000)*(cj3));
IKReal x489=((0.153585000000000)+(x488)+(x487));
IKReal x490=((x489)+(((-1.00000000000000)*(pp))));
IKReal x491=x8;
IKReal x492=((29.0000000000000)*(x491));
IKReal x493=x9;
IKReal x494=((29.0000000000000)*(x493));
IKReal x495=((x492)+(x494));
IKReal x496=((-1.00000000000000)*(x495));
IKReal x497=((IKabs(x496) != 0)?((IKReal)1/(x496)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x490)*(x497)), ((500.000000000000)*(px)*(x490)*(x497)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x498=((0.0331170000000000)+(pp));
IKReal x499=((0.0580000000000000)*(pz));
IKReal x500=((((-1.00000000000000)*(x499)))+(x498));
IKReal x501=x9;
IKReal x502=((319.000000000000)*(x501));
IKReal x503=x8;
IKReal x504=((319.000000000000)*(x503));
IKReal x505=((x502)+(x504));
IKReal x506=((-1.00000000000000)*(x505));
IKReal x507=((IKabs(x506) != 0)?((IKReal)1/(x506)):(IKReal)1.0e30);
j0array[0]=IKatan2(((-500.000000000000)*(py)*(x500)*(x507)), ((-500.000000000000)*(px)*(x500)*(x507)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x508=x8;
IKReal x509=x9;
IKReal x510=((x508)+(x509));
IKReal x511=((IKabs(x510) != 0)?((IKReal)1/(x510)):(IKReal)1.0e30);
IKReal x512=x32;
IKReal x513=x33;
IKReal x514=((0.319000000000000)+(x513)+(x512));
j0array[0]=IKatan2(((py)*(x511)*(x514)), ((px)*(x511)*(x514)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x515=x32;
IKReal x516=x33;
IKReal x517=((0.290000000000000)+(x516)+(x515));
IKReal x518=((cj1)*(pz));
IKReal x519=((0.0290000000000000)*(sj1));
IKReal x520=((x519)+(x518));
IKReal x521=((((-1.00000000000000)*(x520)))+(x517));
IKReal x522=x9;
IKReal x523=((sj1)*(x522));
IKReal x524=x8;
IKReal x525=((sj1)*(x524));
IKReal x526=((x523)+(x525));
IKReal x527=((-1.00000000000000)*(x526));
IKReal x528=((IKabs(x527) != 0)?((IKReal)1/(x527)):(IKReal)1.0e30);
j0array[0]=IKatan2(((py)*(x521)*(x528)), ((px)*(x521)*(x528)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x529=((0.262000000000000)*(cj3));
IKReal x530=((pz)*(sj1));
IKReal x531=((0.0290000000000000)+(x530)+(x529));
IKReal x532=((0.0290000000000000)*(cj1));
IKReal x533=((0.0290000000000000)*(sj3));
IKReal x534=((x533)+(x532));
IKReal x535=((((-1.00000000000000)*(x534)))+(x531));
IKReal x536=x8;
IKReal x537=((cj1)*(x536));
IKReal x538=x9;
IKReal x539=((cj1)*(x538));
IKReal x540=((x537)+(x539));
IKReal x541=((-1.00000000000000)*(x540));
IKReal x542=((IKabs(x541) != 0)?((IKReal)1/(x541)):(IKReal)1.0e30);
j0array[0]=IKatan2(((py)*(x535)*(x542)), ((px)*(x535)*(x542)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x543=((0.150278000000000)*(sj3));
IKReal x544=((0.0320160000000000)*(cj3));
IKReal x545=((0.153585000000000)+(x544)+(x543));
IKReal x546=((x545)+(((-1.00000000000000)*(pp))));
IKReal x547=x8;
IKReal x548=((29.0000000000000)*(x547));
IKReal x549=x9;
IKReal x550=((29.0000000000000)*(x549));
IKReal x551=((x550)+(x548));
IKReal x552=((-1.00000000000000)*(x551));
IKReal x553=((IKabs(x552) != 0)?((IKReal)1/(x552)):(IKReal)1.0e30);
j0array[0]=IKatan2(((500.000000000000)*(py)*(x546)*(x553)), ((500.000000000000)*(px)*(x546)*(x553)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.0290000000000000)*(cj2)))+(((-0.0290000000000000)*(cj2)*(sj3)))+(((0.262000000000000)*(cj2)*(cj3)))+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj2)*((py)*(py))))+(((-1.00000000000000)*(cj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x554=x9;
IKReal x555=((cj2)*(x554));
IKReal x556=x8;
IKReal x557=((cj2)*(x556));
IKReal x558=((x557)+(x555));
dummyeval[0]=((-1.00000000000000)*(x558));
dummyeval[1]=x558;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
IKReal x559=((-1.00000000000000)*(pz));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=x559;
evalcond[2]=x559;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x560=x8;
IKReal x561=x9;
IKReal x562=((x560)+(x561));
dummyeval[0]=x562;
dummyeval[1]=x562;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x563=x8;
IKReal x564=x9;
IKReal x565=((x564)+(x563));
dummyeval[0]=x565;
dummyeval[1]=x565;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x566=x9;
IKReal x567=((0.0580000000000000)*(x566));
IKReal x568=x8;
IKReal x569=((0.0580000000000000)*(x568));
IKReal x570=((x569)+(x567));
IKReal x571=((IKabs(x570) != 0)?((IKReal)1/(x570)):(IKReal)1.0e30);
IKReal x572=((0.000523000000000000)+(((-1.00000000000000)*(pp))));
IKReal x573=x32;
IKReal x574=x33;
IKReal x575=((0.261000000000000)+(x574)+(x573));
j0array[0]=IKatan2(((x571)*(((((px)*(x572)))+(((x575)*(((((0.522000000000000)*(px)))+(((-0.0580000000000000)*(py)))))))))), ((x571)*(((((x575)*(((((-0.522000000000000)*(py)))+(((-0.0580000000000000)*(px)))))))+(((-1.00000000000000)*(py)*(x572)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x576=x9;
IKReal x577=((0.522000000000000)*(x576));
IKReal x578=x8;
IKReal x579=((0.522000000000000)*(x578));
IKReal x580=((x579)+(x577));
IKReal x581=((IKabs(x580) != 0)?((IKReal)1/(x580)):(IKReal)1.0e30);
IKReal x582=((0.000523000000000000)+(((-1.00000000000000)*(pp))));
IKReal x583=((0.262000000000000)*(cj3));
IKReal x584=((0.0290000000000000)+(x583));
IKReal x585=((0.0290000000000000)*(sj3));
IKReal x586=((x584)+(((-1.00000000000000)*(x585))));
j0array[0]=IKatan2(((x581)*(((((x586)*(((((0.0580000000000000)*(py)))+(((-0.522000000000000)*(px)))))))+(((py)*(x582)))))), ((x581)*(((((px)*(x582)))+(((x586)*(((((0.522000000000000)*(py)))+(((0.0580000000000000)*(px)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x587=((0.262000000000000)*(cj3));
IKReal x588=((0.0290000000000000)+(x587));
IKReal x589=((0.0290000000000000)*(sj3));
IKReal x590=((x588)+(((-1.00000000000000)*(x589))));
IKReal x591=x32;
IKReal x592=x33;
IKReal x593=((0.261000000000000)+(x592)+(x591));
IKReal x594=x8;
IKReal x595=x9;
IKReal x596=((x595)+(x594));
IKReal x597=((-1.00000000000000)*(x596));
IKReal x598=((IKabs(x597) != 0)?((IKReal)1/(x597)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x598)*(((((py)*(x593)))+(((px)*(x590)))))), ((x598)*(((((-1.00000000000000)*(py)*(x590)))+(((px)*(x593)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pz));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x599=x8;
IKReal x600=x9;
IKReal x601=((x599)+(x600));
dummyeval[0]=x601;
dummyeval[1]=x601;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x602=x8;
IKReal x603=x9;
IKReal x604=((x603)+(x602));
IKReal x605=((-1.00000000000000)*(x604));
dummyeval[0]=x605;
dummyeval[1]=x605;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x606=((0.000523000000000000)+(((-1.00000000000000)*(pp))));
IKReal x607=x32;
IKReal x608=x33;
IKReal x609=((0.261000000000000)+(x607)+(x608));
IKReal x610=x9;
IKReal x611=((0.0580000000000000)*(x610));
IKReal x612=x8;
IKReal x613=((0.0580000000000000)*(x612));
IKReal x614=((x611)+(x613));
IKReal x615=((-1.00000000000000)*(x614));
IKReal x616=((IKabs(x615) != 0)?((IKReal)1/(x615)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x616)*(((((px)*(x606)))+(((x609)*(((((0.522000000000000)*(px)))+(((0.0580000000000000)*(py)))))))))), ((x616)*(((((-1.00000000000000)*(py)*(x606)))+(((x609)*(((((0.0580000000000000)*(px)))+(((-0.522000000000000)*(py)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x617=x9;
IKReal x618=((0.522000000000000)*(x617));
IKReal x619=x8;
IKReal x620=((0.522000000000000)*(x619));
IKReal x621=((x618)+(x620));
IKReal x622=((IKabs(x621) != 0)?((IKReal)1/(x621)):(IKReal)1.0e30);
IKReal x623=((0.000523000000000000)+(((-1.00000000000000)*(pp))));
IKReal x624=((0.262000000000000)*(cj3));
IKReal x625=((0.0290000000000000)+(x624));
IKReal x626=((0.0290000000000000)*(sj3));
IKReal x627=((((-1.00000000000000)*(x626)))+(x625));
j0array[0]=IKatan2(((x622)*(((((py)*(x623)))+(((x627)*(((((0.522000000000000)*(px)))+(((0.0580000000000000)*(py)))))))))), ((x622)*(((((x627)*(((((0.0580000000000000)*(px)))+(((-0.522000000000000)*(py)))))))+(((px)*(x623)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x628=((0.262000000000000)*(cj3));
IKReal x629=((0.0290000000000000)+(x628));
IKReal x630=((0.0290000000000000)*(sj3));
IKReal x631=((((-1.00000000000000)*(x630)))+(x629));
IKReal x632=x32;
IKReal x633=x33;
IKReal x634=((0.261000000000000)+(x632)+(x633));
IKReal x635=x8;
IKReal x636=x9;
IKReal x637=((x636)+(x635));
IKReal x638=((-1.00000000000000)*(x637));
IKReal x639=((IKabs(x638) != 0)?((IKReal)1/(x638)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x639)*(((((py)*(x634)))+(((-1.00000000000000)*(px)*(x631)))))), ((x639)*(((((py)*(x631)))+(((px)*(x634)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x640=((0.0290000000000000)*(sj2)*(sj3));
IKReal x641=((0.262000000000000)*(cj3)*(sj2));
IKReal x642=((0.0290000000000000)*(sj2));
IKReal x643=((x642)+(x641));
IKReal x644=((((-1.00000000000000)*(x643)))+(x640));
IKReal x645=x32;
IKReal x646=x33;
IKReal x647=((0.261000000000000)+(x646)+(x645));
IKReal x648=x8;
IKReal x649=x9;
IKReal x650=((x649)+(x648));
IKReal x651=((-1.00000000000000)*(x650));
IKReal x652=((IKabs(x651) != 0)?((IKReal)1/(x651)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x652)*(((((-1.00000000000000)*(px)*(x644)))+(((py)*(x647)))))), ((x652)*(((((py)*(x644)))+(((px)*(x647)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x653=x9;
IKReal x654=((29.0000000000000)*(cj2)*(x653));
IKReal x655=x8;
IKReal x656=((29.0000000000000)*(cj2)*(x655));
IKReal x657=((x654)+(x656));
IKReal x658=((0.150278000000000)*(sj3));
IKReal x659=((0.0320160000000000)*(cj3));
IKReal x660=((0.153585000000000)+(x658)+(x659));
IKReal x661=((x660)+(((-1.00000000000000)*(pp))));
j0array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x657) != 0)?((IKReal)1/(x657)):(IKReal)1.0e30))*(((((29.0000000000000)*(px)*(pz)*(sj2)))+(((500.000000000000)*(cj2)*(py)*(x661)))))), ((((IKabs(x657) != 0)?((IKReal)1/(x657)):(IKReal)1.0e30))*(((((29.0000000000000)*(py)*(pz)*(sj2)))+(((-500.000000000000)*(cj2)*(px)*(x661)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x662=x9;
IKReal x663=((cj2)*(x662));
IKReal x664=x8;
IKReal x665=((cj2)*(x664));
IKReal x666=((x663)+(x665));
IKReal x667=x32;
IKReal x668=x33;
IKReal x669=((0.261000000000000)+(x668)+(x667));
j0array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x666) != 0)?((IKReal)1/(x666)):(IKReal)1.0e30))*(((((cj2)*(py)*(x669)))+(((px)*(pz)*(sj2)))))), ((((IKabs(x666) != 0)?((IKReal)1/(x666)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj2)*(px)*(x669)))+(((py)*(pz)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((((-0.262000000000000)*(cj2)*(cj3)))+(((-0.0290000000000000)*(cj2)))+(((0.0290000000000000)*(cj2)*(sj3)))+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj2)*((py)*(py))))+(((cj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x670=x9;
IKReal x671=((cj2)*(x670));
IKReal x672=x8;
IKReal x673=((cj2)*(x672));
IKReal x674=((x673)+(x671));
IKReal x675=((-1.00000000000000)*(x674));
dummyeval[0]=x675;
dummyeval[1]=x675;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pz));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x676=x8;
IKReal x677=x9;
IKReal x678=((x676)+(x677));
dummyeval[0]=x678;
dummyeval[1]=x678;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x679=x8;
IKReal x680=x9;
IKReal x681=((x679)+(x680));
IKReal x682=((-1.00000000000000)*(x681));
dummyeval[0]=x682;
dummyeval[1]=x682;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x683=((0.0331170000000000)+(pp));
IKReal x684=((0.262000000000000)*(cj3));
IKReal x685=((0.0290000000000000)+(x684));
IKReal x686=((0.0290000000000000)*(sj3));
IKReal x687=((((-1.00000000000000)*(x686)))+(x685));
IKReal x688=x8;
IKReal x689=((0.638000000000000)*(x688));
IKReal x690=x9;
IKReal x691=((0.638000000000000)*(x690));
IKReal x692=((x689)+(x691));
IKReal x693=((-1.00000000000000)*(x692));
IKReal x694=((IKabs(x693) != 0)?((IKReal)1/(x693)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x694)*(((((x687)*(((((0.638000000000000)*(px)))+(((0.0580000000000000)*(py)))))))+(((-1.00000000000000)*(py)*(x683)))))), ((x694)*(((((x687)*(((((0.0580000000000000)*(px)))+(((-0.638000000000000)*(py)))))))+(((-1.00000000000000)*(px)*(x683)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x695=x9;
IKReal x696=((0.0580000000000000)*(x695));
IKReal x697=x8;
IKReal x698=((0.0580000000000000)*(x697));
IKReal x699=((x696)+(x698));
IKReal x700=((IKabs(x699) != 0)?((IKReal)1/(x699)):(IKReal)1.0e30);
IKReal x701=((0.0331170000000000)+(pp));
IKReal x702=x32;
IKReal x703=x33;
IKReal x704=((0.319000000000000)+(x702)+(x703));
j0array[0]=IKatan2(((x700)*(((((-1.00000000000000)*(px)*(x701)))+(((x704)*(((((0.638000000000000)*(px)))+(((0.0580000000000000)*(py)))))))))), ((x700)*(((((x704)*(((((0.0580000000000000)*(px)))+(((-0.638000000000000)*(py)))))))+(((py)*(x701)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x705=x8;
IKReal x706=x9;
IKReal x707=((x706)+(x705));
IKReal x708=((IKabs(x707) != 0)?((IKReal)1/(x707)):(IKReal)1.0e30);
IKReal x709=((0.262000000000000)*(cj3));
IKReal x710=((0.0290000000000000)+(x709));
IKReal x711=((0.0290000000000000)*(sj3));
IKReal x712=((((-1.00000000000000)*(x711)))+(x710));
IKReal x713=x32;
IKReal x714=x33;
IKReal x715=((0.319000000000000)+(x713)+(x714));
j0array[0]=IKatan2(((x708)*(((((-1.00000000000000)*(px)*(x712)))+(((py)*(x715)))))), ((x708)*(((((px)*(x715)))+(((py)*(x712)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x716=((-1.00000000000000)*(pz));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=x716;
evalcond[2]=x716;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x717=x8;
IKReal x718=x9;
IKReal x719=((x718)+(x717));
IKReal x720=((-1.00000000000000)*(x719));
dummyeval[0]=x720;
dummyeval[1]=x720;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x721=x8;
IKReal x722=x9;
IKReal x723=((x721)+(x722));
IKReal x724=((-1.00000000000000)*(x723));
dummyeval[0]=x724;
dummyeval[1]=x724;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x725=((0.262000000000000)*(cj3));
IKReal x726=((0.0290000000000000)+(x725));
IKReal x727=((0.0290000000000000)*(sj3));
IKReal x728=((((-1.00000000000000)*(x727)))+(x726));
IKReal x729=((0.0331170000000000)+(pp));
IKReal x730=x8;
IKReal x731=((0.638000000000000)*(x730));
IKReal x732=x9;
IKReal x733=((0.638000000000000)*(x732));
IKReal x734=((x733)+(x731));
IKReal x735=((-1.00000000000000)*(x734));
IKReal x736=((IKabs(x735) != 0)?((IKReal)1/(x735)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x736)*(((((x728)*(((((0.0580000000000000)*(py)))+(((-0.638000000000000)*(px)))))))+(((-1.00000000000000)*(py)*(x729)))))), ((x736)*(((((-1.00000000000000)*(px)*(x729)))+(((x728)*(((((0.638000000000000)*(py)))+(((0.0580000000000000)*(px)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x737=((0.0331170000000000)+(pp));
IKReal x738=x32;
IKReal x739=x33;
IKReal x740=((0.319000000000000)+(x739)+(x738));
IKReal x741=x9;
IKReal x742=((0.0580000000000000)*(x741));
IKReal x743=x8;
IKReal x744=((0.0580000000000000)*(x743));
IKReal x745=((x744)+(x742));
IKReal x746=((-1.00000000000000)*(x745));
IKReal x747=((IKabs(x746) != 0)?((IKReal)1/(x746)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x747)*(((((-1.00000000000000)*(px)*(x737)))+(((x740)*(((((0.638000000000000)*(px)))+(((-0.0580000000000000)*(py)))))))))), ((x747)*(((((x740)*(((((-0.638000000000000)*(py)))+(((-0.0580000000000000)*(px)))))))+(((py)*(x737)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x748=x8;
IKReal x749=x9;
IKReal x750=((x748)+(x749));
IKReal x751=((IKabs(x750) != 0)?((IKReal)1/(x750)):(IKReal)1.0e30);
IKReal x752=x32;
IKReal x753=x33;
IKReal x754=((0.319000000000000)+(x753)+(x752));
IKReal x755=((0.262000000000000)*(cj3));
IKReal x756=((0.0290000000000000)+(x755));
IKReal x757=((0.0290000000000000)*(sj3));
IKReal x758=((x756)+(((-1.00000000000000)*(x757))));
j0array[0]=IKatan2(((x751)*(((((py)*(x754)))+(((px)*(x758)))))), ((x751)*(((((px)*(x754)))+(((-1.00000000000000)*(py)*(x758)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x759=((0.150278000000000)*(sj3));
IKReal x760=((0.0320160000000000)*(cj3));
IKReal x761=((0.153585000000000)+(x759)+(x760));
IKReal x762=((x761)+(((-1.00000000000000)*(pp))));
IKReal x763=x9;
IKReal x764=((29.0000000000000)*(cj2)*(x763));
IKReal x765=x8;
IKReal x766=((29.0000000000000)*(cj2)*(x765));
IKReal x767=((x764)+(x766));
IKReal x768=((-1.00000000000000)*(x767));
IKReal x769=((IKabs(x768) != 0)?((IKReal)1/(x768)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x769)*(((((-29.0000000000000)*(px)*(pz)*(sj2)))+(((500.000000000000)*(cj2)*(py)*(x762)))))), ((x769)*(((((29.0000000000000)*(py)*(pz)*(sj2)))+(((500.000000000000)*(cj2)*(px)*(x762)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x770=x8;
IKReal x771=x9;
IKReal x772=((x771)+(x770));
IKReal x773=((IKabs(x772) != 0)?((IKReal)1/(x772)):(IKReal)1.0e30);
IKReal x774=x32;
IKReal x775=x33;
IKReal x776=((0.319000000000000)+(x775)+(x774));
IKReal x777=((0.0290000000000000)*(sj2)*(sj3));
IKReal x778=((0.262000000000000)*(cj3)*(sj2));
IKReal x779=((0.0290000000000000)*(sj2));
IKReal x780=((x779)+(x778));
IKReal x781=((((-1.00000000000000)*(x780)))+(x777));
j0array[0]=IKatan2(((x773)*(((((px)*(x781)))+(((py)*(x776)))))), ((x773)*(((((px)*(x776)))+(((-1.00000000000000)*(py)*(x781)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x782=x9;
IKReal x783=((cj2)*(x782));
IKReal x784=x8;
IKReal x785=((cj2)*(x784));
IKReal x786=((x783)+(x785));
IKReal x787=((IKabs(x786) != 0)?((IKReal)1/(x786)):(IKReal)1.0e30);
IKReal x788=x32;
IKReal x789=x33;
IKReal x790=((0.319000000000000)+(x788)+(x789));
j0array[0]=IKatan2(((x787)*(((((px)*(pz)*(sj2)))+(((cj2)*(py)*(x790)))))), ((x787)*(((((cj2)*(px)*(x790)))+(((-1.00000000000000)*(py)*(pz)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x791=x32;
IKReal x792=x33;
IKReal x793=((0.290000000000000)+(x791)+(x792));
IKReal x794=((x793)+(((-1.00000000000000)*(pz))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=x794;
evalcond[2]=x794;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x795=x9;
IKReal x796=((cj2)*(x795));
IKReal x797=x8;
IKReal x798=((cj2)*(x797));
IKReal x799=((x796)+(x798));
dummyeval[0]=x799;
dummyeval[1]=x799;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x800=x8;
IKReal x801=((sj2)*(x800));
IKReal x802=x9;
IKReal x803=((sj2)*(x802));
IKReal x804=((x801)+(x803));
dummyeval[0]=x804;
dummyeval[1]=x804;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
IKReal x805=x32;
IKReal x806=x33;
IKReal x807=((0.290000000000000)+(x805)+(x806));
IKReal x808=((x807)+(((-1.00000000000000)*(pz))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=x808;
evalcond[2]=x808;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x809=x8;
IKReal x810=x9;
IKReal x811=((x810)+(x809));
dummyeval[0]=x811;
dummyeval[1]=x811;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x812=x8;
IKReal x813=x9;
IKReal x814=((x812)+(x813));
IKReal x815=((-1.00000000000000)*(x814));
dummyeval[0]=x815;
dummyeval[1]=x815;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x816=x8;
IKReal x817=x9;
IKReal x818=((x816)+(x817));
IKReal x819=((-1.00000000000000)*(x818));
dummyeval[0]=x819;
dummyeval[1]=x819;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x820=((0.262000000000000)*(cj3));
IKReal x821=((0.0290000000000000)+(x820));
IKReal x822=((0.0290000000000000)*(sj3));
IKReal x823=((((-1.00000000000000)*(x822)))+(x821));
IKReal x824=((0.150278000000000)*(sj3));
IKReal x825=((0.0320160000000000)*(cj3));
IKReal x826=((0.153585000000000)+(x825)+(x824));
IKReal x827=((x826)+(((-1.00000000000000)*(pp))));
IKReal x828=x8;
IKReal x829=((29.0000000000000)*(x828));
IKReal x830=x9;
IKReal x831=((29.0000000000000)*(x830));
IKReal x832=((x829)+(x831));
IKReal x833=((-1.00000000000000)*(x832));
IKReal x834=((IKabs(x833) != 0)?((IKReal)1/(x833)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x834)*(((((29.0000000000000)*(px)*(x823)))+(((500.000000000000)*(py)*(x827)))))), ((x834)*(((((500.000000000000)*(px)*(x827)))+(((-29.0000000000000)*(py)*(x823)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x835=x9;
IKReal x836=((58.0000000000000)*(x835));
IKReal x837=x8;
IKReal x838=((58.0000000000000)*(x837));
IKReal x839=((x836)+(x838));
IKReal x840=((-1.00000000000000)*(x839));
IKReal x841=((IKabs(x840) != 0)?((IKReal)1/(x840)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x841)*(((((-580.000000000000)*(px)*(pz)))+(((-1.68200000000000)*(py)))+(((14.6150000000000)*(px)))+(((1000.00000000000)*(pp)*(px)))))), ((x841)*(((((-14.6150000000000)*(py)))+(((-1.68200000000000)*(px)))+(((-1000.00000000000)*(pp)*(py)))+(((580.000000000000)*(py)*(pz)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x842=x8;
IKReal x843=((1000.00000000000)*(x842));
IKReal x844=x9;
IKReal x845=((1000.00000000000)*(x844));
IKReal x846=((x843)+(x845));
IKReal x847=((IKabs(x846) != 0)?((IKReal)1/(x846)):(IKReal)1.0e30);
IKReal x848=((0.262000000000000)*(cj3));
IKReal x849=((0.0290000000000000)+(x848));
IKReal x850=((0.0290000000000000)*(sj3));
IKReal x851=((((-1.00000000000000)*(x850)))+(x849));
j0array[0]=IKatan2(((x847)*(((((29.0000000000000)*(py)))+(((-1000.00000000000)*(px)*(x851)))))), ((x847)*(((((1000.00000000000)*(py)*(x851)))+(((29.0000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x852=x32;
IKReal x853=x33;
IKReal x854=((0.290000000000000)+(x852)+(x853));
IKReal x855=((x854)+(((-1.00000000000000)*(pz))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=x855;
evalcond[2]=x855;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x856=x8;
IKReal x857=x9;
IKReal x858=((x856)+(x857));
dummyeval[0]=x858;
dummyeval[1]=x858;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x859=x8;
IKReal x860=x9;
IKReal x861=((x859)+(x860));
dummyeval[0]=x861;
dummyeval[1]=x861;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x862=x8;
IKReal x863=x9;
IKReal x864=((x863)+(x862));
IKReal x865=((-1.00000000000000)*(x864));
dummyeval[0]=x865;
dummyeval[1]=x865;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x866=((0.150278000000000)*(sj3));
IKReal x867=((0.0320160000000000)*(cj3));
IKReal x868=((0.153585000000000)+(x867)+(x866));
IKReal x869=((x868)+(((-1.00000000000000)*(pp))));
IKReal x870=((0.262000000000000)*(cj3));
IKReal x871=((0.0290000000000000)+(x870));
IKReal x872=((0.0290000000000000)*(sj3));
IKReal x873=((x871)+(((-1.00000000000000)*(x872))));
IKReal x874=x8;
IKReal x875=((29.0000000000000)*(x874));
IKReal x876=x9;
IKReal x877=((29.0000000000000)*(x876));
IKReal x878=((x875)+(x877));
IKReal x879=((-1.00000000000000)*(x878));
IKReal x880=((IKabs(x879) != 0)?((IKReal)1/(x879)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x880)*(((((500.000000000000)*(py)*(x869)))+(((-29.0000000000000)*(px)*(x873)))))), ((x880)*(((((29.0000000000000)*(py)*(x873)))+(((500.000000000000)*(px)*(x869)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x881=x9;
IKReal x882=((58.0000000000000)*(x881));
IKReal x883=x8;
IKReal x884=((58.0000000000000)*(x883));
IKReal x885=((x884)+(x882));
IKReal x886=((IKabs(x885) != 0)?((IKReal)1/(x885)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x886)*(((((-580.000000000000)*(px)*(pz)))+(((1.68200000000000)*(py)))+(((14.6150000000000)*(px)))+(((1000.00000000000)*(pp)*(px)))))), ((x886)*(((((-14.6150000000000)*(py)))+(((-1000.00000000000)*(pp)*(py)))+(((580.000000000000)*(py)*(pz)))+(((1.68200000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x887=x8;
IKReal x888=((1000.00000000000)*(x887));
IKReal x889=x9;
IKReal x890=((1000.00000000000)*(x889));
IKReal x891=((x888)+(x890));
IKReal x892=((IKabs(x891) != 0)?((IKReal)1/(x891)):(IKReal)1.0e30);
IKReal x893=((0.262000000000000)*(cj3));
IKReal x894=((0.0290000000000000)+(x893));
IKReal x895=((0.0290000000000000)*(sj3));
IKReal x896=((((-1.00000000000000)*(x895)))+(x894));
j0array[0]=IKatan2(((x892)*(((((1000.00000000000)*(px)*(x896)))+(((29.0000000000000)*(py)))))), ((x892)*(((((29.0000000000000)*(px)))+(((-1000.00000000000)*(py)*(x896)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x897=x9;
IKReal x898=((1000.00000000000)*(sj2)*(x897));
IKReal x899=x8;
IKReal x900=((1000.00000000000)*(sj2)*(x899));
IKReal x901=((x898)+(x900));
IKReal x902=((IKabs(x901) != 0)?((IKReal)1/(x901)):(IKReal)1.0e30);
IKReal x903=((0.0290000000000000)*(sj2)*(sj3));
IKReal x904=((0.262000000000000)*(cj3)*(sj2));
IKReal x905=((0.0290000000000000)*(sj2));
IKReal x906=((x904)+(x905));
IKReal x907=((((-1.00000000000000)*(x906)))+(x903));
j0array[0]=IKatan2(((x902)*(((((x907)*(((((1000.00000000000)*(px)*(sj2)))+(((-1000.00000000000)*(cj2)*(py)))))))+(((29.0000000000000)*(py)*(sj2)))))), ((x902)*(((((x907)*(((((-1000.00000000000)*(py)*(sj2)))+(((-1000.00000000000)*(cj2)*(px)))))))+(((29.0000000000000)*(px)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x908=x9;
IKReal x909=((29000.0000000000)*(cj2)*(x908));
IKReal x910=x8;
IKReal x911=((29000.0000000000)*(cj2)*(x910));
IKReal x912=((x911)+(x909));
IKReal x913=((IKabs(x912) != 0)?((IKReal)1/(x912)):(IKReal)1.0e30);
IKReal x914=((0.150278000000000)*(sj3));
IKReal x915=((0.0320160000000000)*(cj3));
IKReal x916=((0.153585000000000)+(x915)+(x914));
IKReal x917=((x916)+(((-1.00000000000000)*(pp))));
j0array[0]=IKatan2(((x913)*(((((841.000000000000)*(px)*(sj2)))+(((x917)*(((((500000.000000000)*(px)*(sj2)))+(((-500000.000000000)*(cj2)*(py)))))))))), ((x913)*(((((-841.000000000000)*(py)*(sj2)))+(((x917)*(((((-500000.000000000)*(py)*(sj2)))+(((-500000.000000000)*(cj2)*(px)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x918=x8;
IKReal x919=x9;
IKReal x920=((x919)+(x918));
IKReal x921=((IKabs(x920) != 0)?((IKReal)1/(x920)):(IKReal)1.0e30);
IKReal x922=x35;
IKReal x923=x36;
IKReal x924=((0.0290000000000000)+(x922)+(x923));
IKReal x925=((1.00000000000000)*(sj3)*(x922));
IKReal x926=((((-1.00000000000000)*(x925)))+(x924));
IKReal x927=((0.0290000000000000)*(sj2)*(sj3));
IKReal x928=((0.262000000000000)*(cj3)*(sj2));
IKReal x929=((0.0290000000000000)*(sj2));
IKReal x930=((x928)+(x929));
IKReal x931=((x927)+(((-1.00000000000000)*(x930))));
j0array[0]=IKatan2(((x921)*(((((py)*(x926)))+(((px)*(x931)))))), ((x921)*(((((px)*(x926)))+(((-1.00000000000000)*(py)*(x931)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x932=x32;
IKReal x933=x33;
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(pz)+(x933)+(x932));
evalcond[2]=((-0.290000000000000)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x932)))+(((-1.00000000000000)*(x933))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x934=x9;
IKReal x935=((cj2)*(x934));
IKReal x936=x8;
IKReal x937=((cj2)*(x936));
IKReal x938=((x935)+(x937));
dummyeval[0]=x938;
dummyeval[1]=x938;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x939=x8;
IKReal x940=((sj2)*(x939));
IKReal x941=x9;
IKReal x942=((sj2)*(x941));
IKReal x943=((x940)+(x942));
dummyeval[0]=x943;
dummyeval[1]=x943;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
IKReal x944=x32;
IKReal x945=x33;
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(pz)+(x944)+(x945));
evalcond[2]=((-0.290000000000000)+(((-1.00000000000000)*(x945)))+(((-1.00000000000000)*(x944)))+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x946=x8;
IKReal x947=x9;
IKReal x948=((x946)+(x947));
dummyeval[0]=x948;
dummyeval[1]=x948;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x949=x8;
IKReal x950=x9;
IKReal x951=((x950)+(x949));
IKReal x952=((-1.00000000000000)*(x951));
dummyeval[0]=x952;
dummyeval[1]=x952;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x953=x8;
IKReal x954=x9;
IKReal x955=((x954)+(x953));
IKReal x956=((-1.00000000000000)*(x955));
dummyeval[0]=x956;
dummyeval[1]=x956;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x957=((0.262000000000000)*(cj3));
IKReal x958=((0.0290000000000000)+(x957));
IKReal x959=((0.0290000000000000)*(sj3));
IKReal x960=((((-1.00000000000000)*(x959)))+(x958));
IKReal x961=((0.150278000000000)*(sj3));
IKReal x962=((0.0320160000000000)*(cj3));
IKReal x963=((0.153585000000000)+(x962)+(x961));
IKReal x964=((x963)+(((-1.00000000000000)*(pp))));
IKReal x965=x8;
IKReal x966=((29.0000000000000)*(x965));
IKReal x967=x9;
IKReal x968=((29.0000000000000)*(x967));
IKReal x969=((x966)+(x968));
IKReal x970=((-1.00000000000000)*(x969));
IKReal x971=((IKabs(x970) != 0)?((IKReal)1/(x970)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x971)*(((((500.000000000000)*(py)*(x964)))+(((29.0000000000000)*(px)*(x960)))))), ((x971)*(((((500.000000000000)*(px)*(x964)))+(((-29.0000000000000)*(py)*(x960)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x972=x9;
IKReal x973=((58.0000000000000)*(x972));
IKReal x974=x8;
IKReal x975=((58.0000000000000)*(x974));
IKReal x976=((x973)+(x975));
IKReal x977=((-1.00000000000000)*(x976));
IKReal x978=((IKabs(x977) != 0)?((IKReal)1/(x977)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x978)*(((((-1.68200000000000)*(py)))+(((14.6150000000000)*(px)))+(((1000.00000000000)*(pp)*(px)))+(((580.000000000000)*(px)*(pz)))))), ((x978)*(((((-14.6150000000000)*(py)))+(((-1.68200000000000)*(px)))+(((-1000.00000000000)*(pp)*(py)))+(((-580.000000000000)*(py)*(pz)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x979=x8;
IKReal x980=((1000.00000000000)*(x979));
IKReal x981=x9;
IKReal x982=((1000.00000000000)*(x981));
IKReal x983=((x980)+(x982));
IKReal x984=((IKabs(x983) != 0)?((IKReal)1/(x983)):(IKReal)1.0e30);
IKReal x985=((0.262000000000000)*(cj3));
IKReal x986=((0.0290000000000000)+(x985));
IKReal x987=((0.0290000000000000)*(sj3));
IKReal x988=((((-1.00000000000000)*(x987)))+(x986));
j0array[0]=IKatan2(((x984)*(((((-1000.00000000000)*(px)*(x988)))+(((29.0000000000000)*(py)))))), ((x984)*(((((29.0000000000000)*(px)))+(((1000.00000000000)*(py)*(x988)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x989=x32;
IKReal x990=x33;
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((0.290000000000000)+(pz)+(x990)+(x989));
evalcond[2]=((-0.290000000000000)+(((-1.00000000000000)*(x989)))+(((-1.00000000000000)*(x990)))+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x991=x8;
IKReal x992=x9;
IKReal x993=((x992)+(x991));
dummyeval[0]=x993;
dummyeval[1]=x993;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x994=x8;
IKReal x995=x9;
IKReal x996=((x995)+(x994));
dummyeval[0]=x996;
dummyeval[1]=x996;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x997=x8;
IKReal x998=x9;
IKReal x999=((x997)+(x998));
IKReal x1000=((-1.00000000000000)*(x999));
dummyeval[0]=x1000;
dummyeval[1]=x1000;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1001=((0.150278000000000)*(sj3));
IKReal x1002=((0.0320160000000000)*(cj3));
IKReal x1003=((0.153585000000000)+(x1002)+(x1001));
IKReal x1004=((x1003)+(((-1.00000000000000)*(pp))));
IKReal x1005=((0.262000000000000)*(cj3));
IKReal x1006=((0.0290000000000000)+(x1005));
IKReal x1007=((0.0290000000000000)*(sj3));
IKReal x1008=((x1006)+(((-1.00000000000000)*(x1007))));
IKReal x1009=x8;
IKReal x1010=((29.0000000000000)*(x1009));
IKReal x1011=x9;
IKReal x1012=((29.0000000000000)*(x1011));
IKReal x1013=((x1010)+(x1012));
IKReal x1014=((-1.00000000000000)*(x1013));
IKReal x1015=((IKabs(x1014) != 0)?((IKReal)1/(x1014)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x1015)*(((((-29.0000000000000)*(px)*(x1008)))+(((500.000000000000)*(py)*(x1004)))))), ((x1015)*(((((500.000000000000)*(px)*(x1004)))+(((29.0000000000000)*(py)*(x1008)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1016=x9;
IKReal x1017=((58.0000000000000)*(x1016));
IKReal x1018=x8;
IKReal x1019=((58.0000000000000)*(x1018));
IKReal x1020=((x1019)+(x1017));
IKReal x1021=((IKabs(x1020) != 0)?((IKReal)1/(x1020)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x1021)*(((((1.68200000000000)*(py)))+(((14.6150000000000)*(px)))+(((1000.00000000000)*(pp)*(px)))+(((580.000000000000)*(px)*(pz)))))), ((x1021)*(((((-14.6150000000000)*(py)))+(((-1000.00000000000)*(pp)*(py)))+(((1.68200000000000)*(px)))+(((-580.000000000000)*(py)*(pz)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1022=x8;
IKReal x1023=((1000.00000000000)*(x1022));
IKReal x1024=x9;
IKReal x1025=((1000.00000000000)*(x1024));
IKReal x1026=((x1025)+(x1023));
IKReal x1027=((IKabs(x1026) != 0)?((IKReal)1/(x1026)):(IKReal)1.0e30);
IKReal x1028=((0.262000000000000)*(cj3));
IKReal x1029=((0.0290000000000000)+(x1028));
IKReal x1030=((0.0290000000000000)*(sj3));
IKReal x1031=((((-1.00000000000000)*(x1030)))+(x1029));
j0array[0]=IKatan2(((x1027)*(((((29.0000000000000)*(py)))+(((1000.00000000000)*(px)*(x1031)))))), ((x1027)*(((((29.0000000000000)*(px)))+(((-1000.00000000000)*(py)*(x1031)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1032=x9;
IKReal x1033=((1000.00000000000)*(sj2)*(x1032));
IKReal x1034=x8;
IKReal x1035=((1000.00000000000)*(sj2)*(x1034));
IKReal x1036=((x1033)+(x1035));
IKReal x1037=((IKabs(x1036) != 0)?((IKReal)1/(x1036)):(IKReal)1.0e30);
IKReal x1038=((0.0290000000000000)*(sj2)*(sj3));
IKReal x1039=((0.262000000000000)*(cj3)*(sj2));
IKReal x1040=((0.0290000000000000)*(sj2));
IKReal x1041=((x1040)+(x1039));
IKReal x1042=((x1038)+(((-1.00000000000000)*(x1041))));
j0array[0]=IKatan2(((x1037)*(((((x1042)*(((((1000.00000000000)*(cj2)*(py)))+(((1000.00000000000)*(px)*(sj2)))))))+(((29.0000000000000)*(py)*(sj2)))))), ((x1037)*(((((x1042)*(((((1000.00000000000)*(cj2)*(px)))+(((-1000.00000000000)*(py)*(sj2)))))))+(((29.0000000000000)*(px)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1043=x9;
IKReal x1044=((29000.0000000000)*(cj2)*(x1043));
IKReal x1045=x8;
IKReal x1046=((29000.0000000000)*(cj2)*(x1045));
IKReal x1047=((x1046)+(x1044));
IKReal x1048=((IKabs(x1047) != 0)?((IKReal)1/(x1047)):(IKReal)1.0e30);
IKReal x1049=((0.150278000000000)*(sj3));
IKReal x1050=((0.0320160000000000)*(cj3));
IKReal x1051=((0.153585000000000)+(x1050)+(x1049));
IKReal x1052=((x1051)+(((-1.00000000000000)*(pp))));
j0array[0]=IKatan2(((x1048)*(((((-841.000000000000)*(px)*(sj2)))+(((x1052)*(((((-500000.000000000)*(px)*(sj2)))+(((-500000.000000000)*(cj2)*(py)))))))))), ((x1048)*(((((x1052)*(((((-500000.000000000)*(cj2)*(px)))+(((500000.000000000)*(py)*(sj2)))))))+(((841.000000000000)*(py)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1053=x8;
IKReal x1054=x9;
IKReal x1055=((x1053)+(x1054));
IKReal x1056=((IKabs(x1055) != 0)?((IKReal)1/(x1055)):(IKReal)1.0e30);
IKReal x1057=((0.0290000000000000)*(sj2)*(sj3));
IKReal x1058=((0.262000000000000)*(cj3)*(sj2));
IKReal x1059=((0.0290000000000000)*(sj2));
IKReal x1060=((x1058)+(x1059));
IKReal x1061=((x1057)+(((-1.00000000000000)*(x1060))));
IKReal x1062=((0.0290000000000000)*(cj2)*(sj3));
IKReal x1063=((0.0290000000000000)+(x1062));
IKReal x1064=x35;
IKReal x1065=x36;
IKReal x1066=((x1065)+(x1064));
IKReal x1067=((x1063)+(((-1.00000000000000)*(x1066))));
j0array[0]=IKatan2(((x1056)*(((((py)*(x1067)))+(((px)*(x1061)))))), ((x1056)*(((((px)*(x1067)))+(((-1.00000000000000)*(py)*(x1061)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1068=x9;
IKReal x1069=((cj1)*(sj2)*(x1068));
IKReal x1070=x8;
IKReal x1071=((cj1)*(sj2)*(x1070));
IKReal x1072=((x1071)+(x1069));
IKReal x1073=((IKabs(x1072) != 0)?((IKReal)1/(x1072)):(IKReal)1.0e30);
IKReal x1074=((0.0290000000000000)*(cj1)*(sj2));
IKReal x1075=((pz)*(sj1)*(sj2));
IKReal x1076=((x1074)+(((-1.00000000000000)*(x1075))));
IKReal x1077=((0.0290000000000000)*(sj2)*(sj3));
IKReal x1078=((0.262000000000000)*(cj3)*(sj2));
IKReal x1079=((0.0290000000000000)*(sj2));
IKReal x1080=((x1078)+(x1079));
IKReal x1081=((x1077)+(((-1.00000000000000)*(x1080))));
j0array[0]=IKatan2(((x1073)*(((((py)*(x1076)))+(((x1081)*(((((-1.00000000000000)*(cj2)*(py)))+(((cj1)*(px)*(sj2)))))))))), ((x1073)*(((((px)*(x1076)))+(((x1081)*(((((-1.00000000000000)*(cj2)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj2)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1082=((0.0290000000000000)*(sj2)*(sj3));
IKReal x1083=((0.262000000000000)*(cj3)*(sj2));
IKReal x1084=((0.0290000000000000)*(sj2));
IKReal x1085=((x1084)+(x1083));
IKReal x1086=((x1082)+(((-1.00000000000000)*(x1085))));
IKReal x1087=x32;
IKReal x1088=x33;
IKReal x1089=((0.290000000000000)+(x1087)+(x1088));
IKReal x1090=((cj1)*(pz));
IKReal x1091=((0.0290000000000000)*(sj1));
IKReal x1092=((x1090)+(x1091));
IKReal x1093=((x1089)+(((-1.00000000000000)*(x1092))));
IKReal x1094=x9;
IKReal x1095=((sj1)*(x1094));
IKReal x1096=x8;
IKReal x1097=((sj1)*(x1096));
IKReal x1098=((x1095)+(x1097));
IKReal x1099=((-1.00000000000000)*(x1098));
IKReal x1100=((IKabs(x1099) != 0)?((IKReal)1/(x1099)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x1100)*(((((py)*(x1093)))+(((-1.00000000000000)*(px)*(sj1)*(x1086)))))), ((x1100)*(((((py)*(sj1)*(x1086)))+(((px)*(x1093)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1101=((0.0290000000000000)*(sj2)*(sj3));
IKReal x1102=((0.262000000000000)*(cj3)*(sj2));
IKReal x1103=((0.0290000000000000)*(sj2));
IKReal x1104=((x1102)+(x1103));
IKReal x1105=((x1101)+(((-1.00000000000000)*(x1104))));
IKReal x1106=((0.150278000000000)*(sj3));
IKReal x1107=((0.0320160000000000)*(cj3));
IKReal x1108=((0.153585000000000)+(x1106)+(x1107));
IKReal x1109=((x1108)+(((-1.00000000000000)*(pp))));
IKReal x1110=x8;
IKReal x1111=((29.0000000000000)*(x1110));
IKReal x1112=x9;
IKReal x1113=((29.0000000000000)*(x1112));
IKReal x1114=((x1111)+(x1113));
IKReal x1115=((-1.00000000000000)*(x1114));
IKReal x1116=((IKabs(x1115) != 0)?((IKReal)1/(x1115)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x1116)*(((((500.000000000000)*(py)*(x1109)))+(((-29.0000000000000)*(px)*(x1105)))))), ((x1116)*(((((29.0000000000000)*(py)*(x1105)))+(((500.000000000000)*(px)*(x1109)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x1117=((0.0290000000000000)*(sj2)*(sj3));
IKReal x1118=((0.262000000000000)*(cj3)*(sj2));
IKReal x1119=((0.0290000000000000)*(sj2));
IKReal x1120=((x1119)+(x1118));
IKReal x1121=((x1117)+(((-1.00000000000000)*(x1120))));
IKReal x1122=((0.150278000000000)*(sj3));
IKReal x1123=((0.0320160000000000)*(cj3));
IKReal x1124=((0.153585000000000)+(x1122)+(x1123));
IKReal x1125=((x1124)+(((-1.00000000000000)*(pp))));
IKReal x1126=x8;
IKReal x1127=((29.0000000000000)*(x1126));
IKReal x1128=x9;
IKReal x1129=((29.0000000000000)*(x1128));
IKReal x1130=((x1129)+(x1127));
IKReal x1131=((-1.00000000000000)*(x1130));
IKReal x1132=((IKabs(x1131) != 0)?((IKReal)1/(x1131)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x1132)*(((((500.000000000000)*(py)*(x1125)))+(((-29.0000000000000)*(px)*(x1121)))))), ((x1132)*(((((29.0000000000000)*(py)*(x1121)))+(((500.000000000000)*(px)*(x1125)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[2];
IKReal x1133=((0.110687022900763)*(cj3));
IKReal x1134=((3.81679389312977)*(cj2)*(pz)*(sj3));
IKReal x1135=((1.10687022900763)+(x1133)+(x1134)+(sj3));
IKReal x1136=((38.1679389312977)*(cj0)*(px));
IKReal x1137=((38.1679389312977)*(py)*(sj0));
IKReal x1138=((34.4827586206897)*(cj2)*(cj3)*(pz));
IKReal x1139=((3.81679389312977)*(cj2)*(pz));
IKReal x1140=((3.81679389312977)*(cj0)*(cj3)*(px));
IKReal x1141=((34.4827586206897)*(py)*(sj0)*(sj3));
IKReal x1142=((3.81679389312977)*(cj3)*(py)*(sj0));
IKReal x1143=((34.4827586206897)*(cj0)*(px)*(sj3));
IKReal x1144=((x1142)+(x1143)+(x1140)+(x1141)+(x1139)+(x1138)+(x1137)+(x1136));
IKReal x1145=((x1135)+(((-1.00000000000000)*(x1144))));
dummyeval[0]=x1145;
dummyeval[1]=x1145;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1146=((68.9655172413793)*(py)*(sj0)*(sj2));
IKReal x1147=((68.9655172413793)*(cj0)*(px)*(sj2));
IKReal x1148=((x1146)+(x1147));
IKReal x1149=x9;
IKReal x1150=(sj0)*(sj0);
IKReal x1151=((1189.06064209275)*(sj2)*(x1149)*(x1150));
IKReal x1152=((2378.12128418549)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x1153=(cj0)*(cj0);
IKReal x1154=x8;
IKReal x1155=((1189.06064209275)*(sj2)*(x1153)*(x1154));
IKReal x1156=(pz)*(pz);
IKReal x1157=((1189.06064209275)*(sj2)*(x1156));
IKReal x1158=((x1155)+(x1157)+(x1151)+(x1152)+(sj2));
IKReal x1159=((x1148)+(((-1.00000000000000)*(x1158))));
dummyeval[0]=x1159;
dummyeval[1]=x1159;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1160=((cj2)*(sj3));
IKReal x1161=((311.533888228300)*(cj0)*(cj2)*(cj3)*(px));
IKReal x1162=((34.4827586206897)*(cj0)*(cj2)*(px));
IKReal x1163=((311.533888228300)*(cj2)*(cj3)*(py)*(sj0));
IKReal x1164=((34.4827586206897)*(cj2)*(py)*(sj0));
IKReal x1165=((x1164)+(x1160)+(x1161)+(x1162)+(x1163));
IKReal x1166=((34.4827586206897)*(cj0)*(px)*(x1160));
IKReal x1167=((311.533888228300)*(pz)*(sj3));
IKReal x1168=((9.03448275862069)*(cj2)*(cj3));
IKReal x1169=((34.4827586206897)*(py)*(sj0)*(x1160));
IKReal x1170=((34.4827586206897)*(cj3)*(pz));
IKReal x1171=((344.827586206897)*(pz));
IKReal x1172=((x1166)+(x1167)+(x1168)+(x1169)+(x1171)+(x1170)+(cj2));
dummyeval[0]=((x1172)+(((-1.00000000000000)*(x1165))));
dummyeval[1]=((x1165)+(((-1.00000000000000)*(x1172))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x1173=((cj0)*(py));
IKReal x1174=((px)*(sj0));
IKReal x1175=((x1173)+(((-1.00000000000000)*(x1174))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.153585000000000)+(((0.150278000000000)*(sj3)))+(((0.0320160000000000)*(cj3)))+(((0.0580000000000000)*(py)*(sj0)))+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x1175;
evalcond[3]=x1175;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1176=(pz)*(pz);
IKReal x1177=((1189.06064209275)*(x1176));
IKReal x1178=((2378.12128418549)*(cj0)*(px)*(py)*(sj0));
IKReal x1179=(cj0)*(cj0);
IKReal x1180=x8;
IKReal x1181=((1189.06064209275)*(x1179)*(x1180));
IKReal x1182=x9;
IKReal x1183=(sj0)*(sj0);
IKReal x1184=((1189.06064209275)*(x1182)*(x1183));
IKReal x1185=((1.00000000000000)+(x1184)+(x1181)+(x1177)+(x1178));
IKReal x1186=((68.9655172413793)*(cj0)*(px));
IKReal x1187=((68.9655172413793)*(py)*(sj0));
IKReal x1188=((x1186)+(x1187));
IKReal x1189=((x1185)+(((-1.00000000000000)*(x1188))));
dummyeval[0]=x1189;
dummyeval[1]=x1189;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1190=((311.533888228300)*(pz)*(sj3));
IKReal x1191=((34.4827586206897)*(py)*(sj0)*(sj3));
IKReal x1192=((34.4827586206897)*(cj0)*(px)*(sj3));
IKReal x1193=((34.4827586206897)*(cj3)*(pz));
IKReal x1194=((9.03448275862069)*(cj3));
IKReal x1195=((344.827586206897)*(pz));
IKReal x1196=((1.00000000000000)+(x1191)+(x1190)+(x1193)+(x1192)+(x1195)+(x1194));
IKReal x1197=((311.533888228300)*(cj3)*(py)*(sj0));
IKReal x1198=((34.4827586206897)*(py)*(sj0));
IKReal x1199=((34.4827586206897)*(cj0)*(px));
IKReal x1200=((311.533888228300)*(cj0)*(cj3)*(px));
IKReal x1201=((x1199)+(x1198)+(x1197)+(x1200)+(sj3));
IKReal x1202=((x1196)+(((-1.00000000000000)*(x1201))));
dummyeval[0]=x1202;
dummyeval[1]=x1202;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1203=((0.110687022900763)*(cj3));
IKReal x1204=((3.81679389312977)*(pz)*(sj3));
IKReal x1205=((1.10687022900763)+(x1204)+(x1203)+(sj3));
IKReal x1206=((38.1679389312977)*(cj0)*(px));
IKReal x1207=((38.1679389312977)*(py)*(sj0));
IKReal x1208=((3.81679389312977)*(pz));
IKReal x1209=((3.81679389312977)*(cj0)*(cj3)*(px));
IKReal x1210=((34.4827586206897)*(py)*(sj0)*(sj3));
IKReal x1211=((34.4827586206897)*(cj3)*(pz));
IKReal x1212=((3.81679389312977)*(cj3)*(py)*(sj0));
IKReal x1213=((34.4827586206897)*(cj0)*(px)*(sj3));
IKReal x1214=((x1209)+(x1208)+(x1207)+(x1206)+(x1212)+(x1213)+(x1210)+(x1211));
IKReal x1215=((x1205)+(((-1.00000000000000)*(x1214))));
dummyeval[0]=x1215;
dummyeval[1]=x1215;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1216=((0.000841000000000000)*(cj3));
IKReal x1217=((0.00759800000000000)*(sj3));
IKReal x1218=((0.0290000000000000)*(pz)*(sj3));
IKReal x1219=((0.00841000000000000)+(x1216)+(x1217)+(x1218));
IKReal x1220=((0.262000000000000)*(py)*(sj0)*(sj3));
IKReal x1221=((0.290000000000000)*(cj0)*(px));
IKReal x1222=((0.0290000000000000)*(pz));
IKReal x1223=((0.262000000000000)*(cj3)*(pz));
IKReal x1224=((0.262000000000000)*(cj0)*(px)*(sj3));
IKReal x1225=((0.290000000000000)*(py)*(sj0));
IKReal x1226=((0.0290000000000000)*(cj0)*(cj3)*(px));
IKReal x1227=((0.0290000000000000)*(cj3)*(py)*(sj0));
IKReal x1228=((x1227)+(x1226)+(x1225)+(x1224)+(x1223)+(x1222)+(x1221)+(x1220));
IKReal x1229=((x1219)+(((-1.00000000000000)*(x1228))));
IKReal x1230=((IKabs(x1229) != 0)?((IKReal)1/(x1229)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1230)*(((((-1.00000000000000)*((pz)*(pz))))+((((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3))))))))), ((x1230)*(((((pz)*(((0.0290000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-1.00000000000000)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))*(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1231=((0.262000000000000)*(cj3));
IKReal x1232=((0.0290000000000000)+(x1231));
IKReal x1233=((0.0290000000000000)*(sj3));
IKReal x1234=((x1232)+(((-1.00000000000000)*(x1233))));
IKReal x1235=((1.00000000000000)*(cj0)*(px)*(x1233));
IKReal x1236=((0.0290000000000000)*(cj3)*(pz));
IKReal x1237=((1.00000000000000)*(py)*(sj0)*(x1233));
IKReal x1238=((0.00759800000000000)*(cj3));
IKReal x1239=((0.290000000000000)*(pz));
IKReal x1240=((0.262000000000000)*(pz)*(sj3));
IKReal x1241=((0.000841000000000000)+(x1240)+(x1235)+(x1236)+(x1237)+(x1238)+(x1239));
IKReal x1242=((0.0290000000000000)*(py)*(sj0));
IKReal x1243=((cj0)*(px)*(x1231));
IKReal x1244=((py)*(sj0)*(x1231));
IKReal x1245=((0.0290000000000000)*(cj0)*(px));
IKReal x1246=((0.000841000000000000)*(sj3));
IKReal x1247=((x1243)+(x1242)+(x1245)+(x1244)+(x1246));
IKReal x1248=((x1241)+(((-1.00000000000000)*(x1247))));
IKReal x1249=((IKabs(x1248) != 0)?((IKReal)1/(x1248)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1249)*(((((x1234)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))))+(((pz)*(((0.0290000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x1249)*(((((-1.00000000000000)*((x1234)*(x1234))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1250=((0.0290000000000000)*(cj3));
IKReal x1251=((0.262000000000000)*(sj3));
IKReal x1252=((0.290000000000000)+(x1250)+(x1251));
IKReal x1253=((cj0)*(px));
IKReal x1254=((py)*(sj0));
IKReal x1255=((0.262000000000000)*(cj3));
IKReal x1256=((0.0290000000000000)+(x1255));
IKReal x1257=((0.0290000000000000)*(sj3));
IKReal x1258=((((-1.00000000000000)*(x1257)))+(x1256));
IKReal x1259=x9;
IKReal x1260=(sj0)*(sj0);
IKReal x1261=(x1254)*(x1254);
IKReal x1262=(pz)*(pz);
IKReal x1263=(cj0)*(cj0);
IKReal x1264=x8;
IKReal x1265=(x1253)*(x1253);
IKReal x1266=((2.00000000000000)*(x1253)*(x1254));
IKReal x1267=((0.000841000000000000)+(x1262)+(x1261)+(x1266)+(x1265));
IKReal x1268=((0.0580000000000000)*(x1254));
IKReal x1269=((0.0580000000000000)*(x1253));
IKReal x1270=((x1269)+(x1268));
IKReal x1271=((x1267)+(((-1.00000000000000)*(x1270))));
IKReal x1272=((IKabs(x1271) != 0)?((IKReal)1/(x1271)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1272)*(((((x1252)*(((0.0290000000000000)+(((-1.00000000000000)*(x1253)))+(((-1.00000000000000)*(x1254)))))))+(((pz)*(x1258)))))), ((x1272)*(((((-1.00000000000000)*(x1258)*(((0.0290000000000000)+(((-1.00000000000000)*(x1253)))+(((-1.00000000000000)*(x1254)))))))+(((pz)*(x1252)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x1273=((px)*(sj0));
IKReal x1274=((cj0)*(py));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((0.153585000000000)+(((0.150278000000000)*(sj3)))+(((0.0320160000000000)*(cj3)))+(((0.0580000000000000)*(py)*(sj0)))+(((0.0580000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((x1274)+(((-1.00000000000000)*(x1273))));
evalcond[3]=((x1273)+(((-1.00000000000000)*(x1274))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1275=(pz)*(pz);
IKReal x1276=((1189.06064209275)*(x1275));
IKReal x1277=((2378.12128418549)*(cj0)*(px)*(py)*(sj0));
IKReal x1278=(cj0)*(cj0);
IKReal x1279=x8;
IKReal x1280=((1189.06064209275)*(x1278)*(x1279));
IKReal x1281=x9;
IKReal x1282=(sj0)*(sj0);
IKReal x1283=((1189.06064209275)*(x1281)*(x1282));
IKReal x1284=((1.00000000000000)+(x1276)+(x1277)+(x1280)+(x1283));
IKReal x1285=((68.9655172413793)*(cj0)*(px));
IKReal x1286=((68.9655172413793)*(py)*(sj0));
IKReal x1287=((x1285)+(x1286));
IKReal x1288=((x1284)+(((-1.00000000000000)*(x1287))));
dummyeval[0]=x1288;
dummyeval[1]=x1288;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1289=((34.4827586206897)*(py)*(sj0)*(sj3));
IKReal x1290=((34.4827586206897)*(cj0)*(px)*(sj3));
IKReal x1291=((9.03448275862069)*(cj3));
IKReal x1292=((1.00000000000000)+(x1289)+(x1290)+(x1291));
IKReal x1293=((311.533888228300)*(pz)*(sj3));
IKReal x1294=((311.533888228300)*(cj3)*(py)*(sj0));
IKReal x1295=((34.4827586206897)*(cj3)*(pz));
IKReal x1296=((34.4827586206897)*(py)*(sj0));
IKReal x1297=((34.4827586206897)*(cj0)*(px));
IKReal x1298=((344.827586206897)*(pz));
IKReal x1299=((311.533888228300)*(cj0)*(cj3)*(px));
IKReal x1300=((x1298)+(x1299)+(x1293)+(x1296)+(x1297)+(x1294)+(x1295)+(sj3));
IKReal x1301=((x1292)+(((-1.00000000000000)*(x1300))));
dummyeval[0]=x1301;
dummyeval[1]=x1301;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x1302=((3.81679389312977)*(pz));
IKReal x1303=((0.110687022900763)*(cj3));
IKReal x1304=((34.4827586206897)*(cj3)*(pz));
IKReal x1305=((1.10687022900763)+(x1304)+(x1302)+(x1303)+(sj3));
IKReal x1306=((38.1679389312977)*(cj0)*(px));
IKReal x1307=((38.1679389312977)*(py)*(sj0));
IKReal x1308=((3.81679389312977)*(cj0)*(cj3)*(px));
IKReal x1309=((34.4827586206897)*(py)*(sj0)*(sj3));
IKReal x1310=((sj3)*(x1302));
IKReal x1311=((3.81679389312977)*(cj3)*(py)*(sj0));
IKReal x1312=((34.4827586206897)*(cj0)*(px)*(sj3));
IKReal x1313=((x1306)+(x1307)+(x1308)+(x1309)+(x1312)+(x1311)+(x1310));
IKReal x1314=((x1305)+(((-1.00000000000000)*(x1313))));
dummyeval[0]=x1314;
dummyeval[1]=x1314;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1315=((0.0290000000000000)*(cj3));
IKReal x1316=((0.262000000000000)*(sj3));
IKReal x1317=((0.290000000000000)+(x1316)+(x1315));
IKReal x1318=((0.0290000000000000)*(pz));
IKReal x1319=((0.262000000000000)*(cj3)*(pz));
IKReal x1320=((0.000841000000000000)*(cj3));
IKReal x1321=((0.00759800000000000)*(sj3));
IKReal x1322=((0.00841000000000000)+(x1319)+(x1318)+(x1320)+(x1321));
IKReal x1323=((py)*(sj0)*(x1316));
IKReal x1324=((0.290000000000000)*(cj0)*(px));
IKReal x1325=((cj0)*(px)*(x1316));
IKReal x1326=((0.290000000000000)*(py)*(sj0));
IKReal x1327=((1.00000000000000)*(cj0)*(px)*(x1315));
IKReal x1328=((1.00000000000000)*(py)*(sj0)*(x1315));
IKReal x1329=((1.00000000000000)*(sj3)*(x1318));
IKReal x1330=((x1323)+(x1326)+(x1327)+(x1324)+(x1325)+(x1328)+(x1329));
IKReal x1331=((x1322)+(((-1.00000000000000)*(x1330))));
IKReal x1332=((IKabs(x1331) != 0)?((IKReal)1/(x1331)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1332)*((((x1317)*(x1317))+(((-1.00000000000000)*((pz)*(pz))))))), ((x1332)*(((((x1317)*(((0.0290000000000000)+(((-0.0290000000000000)*(sj3)))+(((0.262000000000000)*(cj3)))))))+(((pz)*(((0.0290000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1333=((0.262000000000000)*(cj3));
IKReal x1334=((0.0290000000000000)+(x1333));
IKReal x1335=((0.0290000000000000)*(sj3));
IKReal x1336=((x1334)+(((-1.00000000000000)*(x1335))));
IKReal x1337=((1.00000000000000)*(cj0)*(px)*(x1335));
IKReal x1338=((1.00000000000000)*(py)*(sj0)*(x1335));
IKReal x1339=((0.00759800000000000)*(cj3));
IKReal x1340=((0.000841000000000000)+(x1339)+(x1338)+(x1337));
IKReal x1341=((0.0290000000000000)*(py)*(sj0));
IKReal x1342=((cj0)*(px)*(x1333));
IKReal x1343=((py)*(sj0)*(x1333));
IKReal x1344=((0.0290000000000000)*(cj0)*(px));
IKReal x1345=((0.0290000000000000)*(cj3)*(pz));
IKReal x1346=((0.290000000000000)*(pz));
IKReal x1347=((0.262000000000000)*(pz)*(sj3));
IKReal x1348=((0.000841000000000000)*(sj3));
IKReal x1349=((x1348)+(x1341)+(x1342)+(x1343)+(x1344)+(x1345)+(x1346)+(x1347));
IKReal x1350=((x1340)+(((-1.00000000000000)*(x1349))));
IKReal x1351=((IKabs(x1350) != 0)?((IKReal)1/(x1350)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1351)*(((((x1336)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))))+(((-1.00000000000000)*(pz)*(((0.0290000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x1351)*(((((-1.00000000000000)*((pz)*(pz))))+((x1336)*(x1336))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1352=((0.0290000000000000)*(cj3));
IKReal x1353=((0.262000000000000)*(sj3));
IKReal x1354=((0.290000000000000)+(x1353)+(x1352));
IKReal x1355=((cj0)*(px));
IKReal x1356=((py)*(sj0));
IKReal x1357=((x1356)+(x1355));
IKReal x1358=((0.0290000000000000)+(((-1.00000000000000)*(x1357))));
IKReal x1359=((0.262000000000000)*(cj3));
IKReal x1360=((0.0290000000000000)+(x1359));
IKReal x1361=((0.0290000000000000)*(sj3));
IKReal x1362=((x1360)+(((-1.00000000000000)*(x1361))));
IKReal x1363=x9;
IKReal x1364=(sj0)*(sj0);
IKReal x1365=(x1356)*(x1356);
IKReal x1366=(pz)*(pz);
IKReal x1367=(cj0)*(cj0);
IKReal x1368=x8;
IKReal x1369=(x1355)*(x1355);
IKReal x1370=((2.00000000000000)*(x1355)*(x1356));
IKReal x1371=((0.000841000000000000)+(x1366)+(x1365)+(x1369)+(x1370));
IKReal x1372=((0.0580000000000000)*(x1356));
IKReal x1373=((0.0580000000000000)*(x1355));
IKReal x1374=((x1373)+(x1372));
IKReal x1375=((x1371)+(((-1.00000000000000)*(x1374))));
IKReal x1376=((IKabs(x1375) != 0)?((IKReal)1/(x1375)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1376)*(((((x1354)*(x1358)))+(((-1.00000000000000)*(pz)*(x1362)))))), ((x1376)*(((((x1358)*(x1362)))+(((pz)*(x1354)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1377=((0.262000000000000)*(cj0)*(cj2)*(cj3)*(px));
IKReal x1378=((0.0290000000000000)*(cj0)*(cj2)*(px));
IKReal x1379=((0.000841000000000000)*(cj2)*(sj3));
IKReal x1380=((0.0290000000000000)*(cj2)*(py)*(sj0));
IKReal x1381=((0.262000000000000)*(cj2)*(cj3)*(py)*(sj0));
IKReal x1382=((x1377)+(x1379)+(x1378)+(x1380)+(x1381));
IKReal x1383=((0.00759800000000000)*(cj2)*(cj3));
IKReal x1384=((1.00000000000000)*(sj3)*(x1380));
IKReal x1385=((0.000841000000000000)*(cj2));
IKReal x1386=((1.00000000000000)*(sj3)*(x1378));
IKReal x1387=((0.0290000000000000)*(cj3)*(pz));
IKReal x1388=((0.290000000000000)*(pz));
IKReal x1389=((0.262000000000000)*(pz)*(sj3));
IKReal x1390=((x1388)+(x1389)+(x1384)+(x1385)+(x1386)+(x1387)+(x1383));
IKReal x1391=((cj0)*(px));
IKReal x1392=((py)*(sj0));
IKReal x1393=((x1392)+(x1391));
IKReal x1394=((0.0290000000000000)+(((-1.00000000000000)*(x1393))));
IKReal x1395=((0.0290000000000000)*(cj3));
IKReal x1396=((0.262000000000000)*(sj3));
IKReal x1397=((0.290000000000000)+(x1396)+(x1395));
j1array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x1382)))+(x1390))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1382)))+(x1390)))):(IKReal)1.0e30))*(((((pz)*(x1394)))+(((x1397)*(((((0.0290000000000000)*(cj2)))+(((-0.0290000000000000)*(cj2)*(sj3)))+(((0.262000000000000)*(cj2)*(cj3)))))))))), ((((IKabs(((x1382)+(((-1.00000000000000)*(x1390))))) != 0)?((IKReal)1/(((x1382)+(((-1.00000000000000)*(x1390)))))):(IKReal)1.0e30))*((((x1394)*(x1394))+(((-1.00000000000000)*((x1397)*(x1397))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1398=((0.0290000000000000)*(cj3));
IKReal x1399=((0.262000000000000)*(sj3));
IKReal x1400=((0.290000000000000)+(x1399)+(x1398));
IKReal x1401=((cj0)*(cj2)*(py));
IKReal x1402=((cj2)*(px)*(sj0));
IKReal x1403=((((-1.00000000000000)*(x1402)))+(x1401));
IKReal x1404=((0.0580000000000000)*(py)*(sj0)*(sj2));
IKReal x1405=((0.0580000000000000)*(cj0)*(px)*(sj2));
IKReal x1406=((x1405)+(x1404));
IKReal x1407=((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x1408=(pz)*(pz);
IKReal x1409=((sj2)*(x1408));
IKReal x1410=(cj0)*(cj0);
IKReal x1411=x8;
IKReal x1412=((sj2)*(x1410)*(x1411));
IKReal x1413=x9;
IKReal x1414=(sj0)*(sj0);
IKReal x1415=((sj2)*(x1413)*(x1414));
IKReal x1416=((0.000841000000000000)*(sj2));
IKReal x1417=((x1412)+(x1415)+(x1416)+(x1409)+(x1407));
IKReal x1418=((((-1.00000000000000)*(x1417)))+(x1406));
IKReal x1419=((IKabs(x1418) != 0)?((IKReal)1/(x1418)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x1419)*(((((x1400)*(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((0.0290000000000000)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))))+(((pz)*(x1403)))))), ((x1419)*(((((x1403)*(((0.0290000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-1.00000000000000)*(pz)*(sj2)*(x1400)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x1420=((0.000841000000000000)*(cj3));
IKReal x1421=((0.0290000000000000)*(cj2)*(pz)*(sj3));
IKReal x1422=((0.00759800000000000)*(sj3));
IKReal x1423=((0.00841000000000000)+(x1421)+(x1420)+(x1422));
IKReal x1424=((0.262000000000000)*(py)*(sj0)*(sj3));
IKReal x1425=((0.290000000000000)*(cj0)*(px));
IKReal x1426=((0.262000000000000)*(cj2)*(cj3)*(pz));
IKReal x1427=((0.262000000000000)*(cj0)*(px)*(sj3));
IKReal x1428=((0.290000000000000)*(py)*(sj0));
IKReal x1429=((0.0290000000000000)*(cj2)*(pz));
IKReal x1430=((0.0290000000000000)*(cj0)*(cj3)*(px));
IKReal x1431=((0.0290000000000000)*(cj3)*(py)*(sj0));
IKReal x1432=((x1425)+(x1424)+(x1427)+(x1426)+(x1429)+(x1428)+(x1430)+(x1431));
IKReal x1433=((((-1.00000000000000)*(x1432)))+(x1423));
IKReal x1434=((IKabs(x1433) != 0)?((IKReal)1/(x1433)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x1434)*(((((-1.00000000000000)*((pz)*(pz))))+((((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3))))))))), ((x1434)*(((((-1.00000000000000)*(((0.290000000000000)+(((0.0290000000000000)*(cj3)))+(((0.262000000000000)*(sj3)))))*(((((0.0290000000000000)*(cj2)))+(((-0.0290000000000000)*(cj2)*(sj3)))+(((0.262000000000000)*(cj2)*(cj3)))))))+(((pz)*(((0.0290000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x80=((cj0)*(cj2));
IKReal x81=((cj1)*(sj0)*(sj2));
IKReal x82=((x80)+(((-1.00000000000000)*(x81))));
IKReal x83=((cj2)*(sj0));
IKReal x84=((cj0)*(cj1)*(sj2));
IKReal x85=((x83)+(x84));
IKReal x86=((-1.00000000000000)*(x85));
IKReal x87=((cj1)*(cj2)*(sj3));
IKReal x88=((cj3)*(sj1));
IKReal x89=((x88)+(x87));
IKReal x90=((-1.00000000000000)*(x89));
IKReal x91=((sj0)*(x90));
IKReal x92=((cj1)*(cj3));
IKReal x93=((cj2)*(sj1)*(sj3));
IKReal x94=((x92)+(((-1.00000000000000)*(x93))));
IKReal x95=((cj0)*(x90));
IKReal x96=((sj0)*(sj2)*(sj3));
IKReal x97=((x95)+(x96));
IKReal x98=((-1.00000000000000)*(cj0)*(sj2)*(sj3));
IKReal x99=((x98)+(x91));
IKReal x100=((cj2)*(x92));
IKReal x101=((sj1)*(sj3));
IKReal x102=((((-1.00000000000000)*(x101)))+(x100));
IKReal x103=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IKReal x104=((cj0)*(x102));
IKReal x105=((x104)+(x103));
IKReal x106=((cj0)*(cj3)*(sj2));
IKReal x107=((sj0)*(x102));
IKReal x108=((x106)+(x107));
IKReal x109=((cj1)*(sj3));
IKReal x110=((cj2)*(x88));
IKReal x111=((x110)+(x109));
new_r00=((((r10)*(x82)))+(((r00)*(x86)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2))));
new_r01=((((r11)*(x82)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x86))));
new_r02=((((r12)*(x82)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r02)*(x86))));
new_r10=((((r10)*(x99)))+(((r00)*(x97)))+(((r20)*(x94))));
new_r11=((((r21)*(x94)))+(((r11)*(((((-1.00000000000000)*(cj0)*(sj2)*(sj3)))+(x91)))))+(((r01)*(x97))));
new_r12=((((r12)*(x99)))+(((r02)*(x97)))+(((r22)*(x94))));
new_r20=((((r10)*(x108)))+(((r20)*(x111)))+(((r00)*(x105))));
new_r21=((((r21)*(x111)))+(((r01)*(x105)))+(((r11)*(x108))));
new_r22=((((r02)*(x105)))+(((r22)*(x111)))+(((r12)*(x108))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
sj5array[0]=new_r22;
if( sj5array[0] >= -1.0001 && sj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r00)*(new_r02)))+(((cj5)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*(new_r01)*(new_r02)))+(((cj5)*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x112=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x112));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x112))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x113=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x113;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x113;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x114=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x114));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x114))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x115=((cj5)*(new_r01)*(new_r02));
IKReal x116=((cj5)*(new_r11)*(new_r12));
IKReal x117=((x116)+(x115));
IKReal x118=((IKabs(x117) != 0)?((IKReal)1/(x117)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r21)*(sj5)*(x118)), ((new_r02)*(new_r21)*(sj5)*(x118)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x119=((cj4)*(new_r12));
IKReal x120=((new_r02)*(sj4));
IKReal x121=((((-1.00000000000000)*(x120)))+(x119));
IKReal x122=((new_r12)*(sj4));
IKReal x123=((cj4)*(new_r02));
IKReal x124=((x122)+(x123));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x121;
evalcond[5]=x121;
evalcond[6]=x124;
evalcond[7]=x124;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x125=((cj4)*(new_r12));
IKReal x126=((new_r02)*(sj4));
IKReal x127=((((-1.00000000000000)*(x126)))+(x125));
IKReal x128=((new_r12)*(sj4));
IKReal x129=((cj4)*(new_r02));
IKReal x130=((x128)+(x129));
IKReal x131=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x131;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x127;
evalcond[5]=x127;
evalcond[6]=x130;
evalcond[7]=((-1.00000000000000)*(x130));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x131;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x132=((cj4)*(new_r12));
IKReal x133=((new_r02)*(sj4));
IKReal x134=((x132)+(((-1.00000000000000)*(x133))));
IKReal x135=((cj4)*(new_r00));
IKReal x136=((new_r10)*(sj4));
IKReal x137=((x135)+(x136));
IKReal x138=((cj4)*(new_r01));
IKReal x139=((new_r11)*(sj4));
IKReal x140=((x139)+(x138));
IKReal x141=((new_r12)*(sj4));
IKReal x142=((cj4)*(new_r02));
IKReal x143=((1.00000000000000)+(x141)+(x142));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x134;
evalcond[3]=x134;
evalcond[4]=x143;
evalcond[5]=x140;
evalcond[6]=x137;
evalcond[7]=new_r22;
evalcond[8]=x137;
evalcond[9]=x140;
evalcond[10]=x143;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x144=((cj4)*(new_r12));
IKReal x145=((new_r02)*(sj4));
IKReal x146=((((-1.00000000000000)*(x145)))+(x144));
IKReal x147=((cj4)*(new_r00));
IKReal x148=((new_r10)*(sj4));
IKReal x149=((x147)+(x148));
IKReal x150=((cj4)*(new_r01));
IKReal x151=((new_r11)*(sj4));
IKReal x152=((x151)+(x150));
IKReal x153=((new_r12)*(sj4));
IKReal x154=((cj4)*(new_r02));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x146;
evalcond[3]=x146;
evalcond[4]=((-1.00000000000000)+(x154)+(x153));
evalcond[5]=x152;
evalcond[6]=x149;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x149));
evalcond[9]=((-1.00000000000000)*(x152));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x155=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x155)), ((new_r20)*(x155)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x156=((cj5)*(new_r00)*(new_r02));
IKReal x157=((cj5)*(new_r10)*(new_r12));
IKReal x158=((x157)+(x156));
IKReal x159=((IKabs(x158) != 0)?((IKReal)1/(x158)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r20)*(sj5)*(x159)), ((new_r02)*(new_r20)*(sj5)*(x159)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x160=((cj4)*(new_r12));
IKReal x161=((new_r02)*(sj4));
IKReal x162=((((-1.00000000000000)*(x161)))+(x160));
IKReal x163=((new_r12)*(sj4));
IKReal x164=((cj4)*(new_r02));
IKReal x165=((x163)+(x164));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x162;
evalcond[5]=x162;
evalcond[6]=x165;
evalcond[7]=x165;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x166=((cj4)*(new_r12));
IKReal x167=((new_r02)*(sj4));
IKReal x168=((((-1.00000000000000)*(x167)))+(x166));
IKReal x169=((new_r12)*(sj4));
IKReal x170=((cj4)*(new_r02));
IKReal x171=((x170)+(x169));
IKReal x172=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=x172;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x168;
evalcond[5]=x168;
evalcond[6]=x171;
evalcond[7]=((-1.00000000000000)*(x171));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x172;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x173=((cj4)*(new_r12));
IKReal x174=((new_r02)*(sj4));
IKReal x175=((((-1.00000000000000)*(x174)))+(x173));
IKReal x176=((cj4)*(new_r00));
IKReal x177=((new_r10)*(sj4));
IKReal x178=((x177)+(x176));
IKReal x179=((cj4)*(new_r01));
IKReal x180=((new_r11)*(sj4));
IKReal x181=((x179)+(x180));
IKReal x182=((new_r12)*(sj4));
IKReal x183=((cj4)*(new_r02));
IKReal x184=((1.00000000000000)+(x182)+(x183));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x175;
evalcond[3]=x175;
evalcond[4]=x184;
evalcond[5]=x181;
evalcond[6]=x178;
evalcond[7]=new_r22;
evalcond[8]=x178;
evalcond[9]=x181;
evalcond[10]=x184;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x185=((cj4)*(new_r12));
IKReal x186=((new_r02)*(sj4));
IKReal x187=((((-1.00000000000000)*(x186)))+(x185));
IKReal x188=((cj4)*(new_r00));
IKReal x189=((new_r10)*(sj4));
IKReal x190=((x188)+(x189));
IKReal x191=((cj4)*(new_r01));
IKReal x192=((new_r11)*(sj4));
IKReal x193=((x192)+(x191));
IKReal x194=((new_r12)*(sj4));
IKReal x195=((cj4)*(new_r02));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=x187;
evalcond[3]=x187;
evalcond[4]=((-1.00000000000000)+(x195)+(x194));
evalcond[5]=x193;
evalcond[6]=x190;
evalcond[7]=((-1.00000000000000)*(new_r22));
evalcond[8]=((-1.00000000000000)*(x190));
evalcond[9]=((-1.00000000000000)*(x193));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(x194)))+(((-1.00000000000000)*(x195))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))*(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x196=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x196)), ((new_r20)*(x196)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x197=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(x197)), ((new_r20)*(x197)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x198=(new_r12)*(new_r12);
IKReal x199=(new_r02)*(new_r02);
IKReal x200=((x199)+(x198));
IKReal x201=((-1.00000000000000)*(x200));
IKReal x202=((IKabs(x201) != 0)?((IKReal)1/(x201)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj5)*(new_r12)*(x202)), ((cj5)*(new_r02)*(x202)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x203=((new_r11)*(new_r12));
IKReal x204=((new_r01)*(new_r02));
IKReal x205=((x204)+(x203));
IKReal x206=((-1.00000000000000)*(x205));
IKReal x207=((IKabs(x206) != 0)?((IKReal)1/(x206)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(sj6)*(x207)), ((new_r02)*(sj5)*(sj6)*(x207)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x208=((new_r02)*(new_r10));
IKReal x209=((new_r00)*(new_r12));
IKReal x210=((((-1.00000000000000)*(x209)))+(x208));
IKReal x211=((IKabs(x210) != 0)?((IKReal)1/(x210)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x211)), ((new_r02)*(sj6)*(x211)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "e8fa20a92720bfa1527d37f468223e9d"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
