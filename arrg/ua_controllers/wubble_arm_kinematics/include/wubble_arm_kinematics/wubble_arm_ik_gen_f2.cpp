/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-02 00:15:33.221648
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[6]);
    x3=IKsin(j[2]);
    x4=IKsin(j[4]);
    x5=IKsin(j[0]);
    x6=IKsin(j[3]);
    x7=IKsin(j[6]);
    x8=IKcos(j[2]);
    x9=IKcos(j[4]);
    x10=IKsin(j[5]);
    x11=IKcos(j[3]);
    x12=IKsin(j[1]);
    x13=IKcos(j[5]);
    eerot[0]=((((x0)*(x1)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x3)*(x9)))+(((x4)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x7)*(x9)))+(((-1.00000000000000)*(x10)*(x2)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x3)*(x5)))+(((-1.00000000000000)*(x0)*(x1)*(x6)*(x7)*(x8)*(x9)))+(((x3)*(x5)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x12)*(x2)*(x4)))+(((x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x2)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x4)*(x6)*(x8))));
    eerot[1]=((((x0)*(x10)*(x11)*(x12)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x2)*(x6)*(x8)*(x9)))+(((x0)*(x1)*(x10)*(x3)*(x7)*(x9)))+(((x0)*(x1)*(x10)*(x4)*(x6)*(x7)*(x8)))+(((x11)*(x13)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x7)*(x8)))+(((x0)*(x1)*(x2)*(x3)*(x4)))+(((x0)*(x12)*(x13)*(x6)*(x7)))+(((x10)*(x5)*(x7)*(x8)*(x9)))+(((x2)*(x4)*(x5)*(x8)))+(((x2)*(x3)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x2)*(x9))));
    eerot[2]=((((-1.00000000000000)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((x13)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x6)))+(((x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((x0)*(x1)*(x10)*(x11)*(x8)))+(((x0)*(x11)*(x12)*(x13)*(x4)))+(((-1.00000000000000)*(x10)*(x11)*(x3)*(x5)))+(((x0)*(x1)*(x13)*(x3)*(x9))));
    eetrans[0]=((0.0290000000000000)+(((-0.178100000119209)*(x0)*(x1)*(x6)*(x7)*(x8)*(x9)))+(((-0.178100000119209)*(x0)*(x1)*(x10)*(x2)*(x4)*(x6)*(x8)))+(((0.0270000003725290)*(x0)*(x10)*(x12)*(x6)))+(((-0.0270000003725290)*(x0)*(x11)*(x12)*(x13)*(x4)))+(((-0.0270000003725290)*(x0)*(x1)*(x10)*(x11)*(x8)))+(((-0.0270000003725290)*(x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((0.178100000119209)*(x3)*(x5)*(x6)*(x7)*(x9)))+(((-0.178100000119209)*(x10)*(x2)*(x5)*(x8)*(x9)))+(((-0.0290000000000000)*(x3)*(x5)))+(((0.0289900000000000)*(x3)*(x5)*(x6)))+(((-0.178100000119209)*(x0)*(x11)*(x12)*(x7)*(x9)))+(((-0.178100000119209)*(x11)*(x13)*(x2)*(x3)*(x5)))+(((0.0270000003725290)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((-0.0270000003725290)*(x0)*(x1)*(x13)*(x3)*(x9)))+(((-0.178100000119209)*(x0)*(x10)*(x11)*(x12)*(x2)*(x4)))+(((-0.261080000000000)*(x0)*(x12)*(x6)))+(((0.178100000119209)*(x0)*(x1)*(x3)*(x4)*(x7)))+(((0.178100000119209)*(x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((0.0290000000000000)*(x0)*(x1)*(x8)))+(((-0.178100000119209)*(x0)*(x12)*(x13)*(x2)*(x6)))+(((-0.0270000003725290)*(x13)*(x5)*(x8)*(x9)))+(((0.178100000119209)*(x4)*(x5)*(x7)*(x8)))+(((0.0270000003725290)*(x10)*(x11)*(x3)*(x5)))+(((0.178100000119209)*(x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((-0.178100000119209)*(x0)*(x1)*(x10)*(x2)*(x3)*(x9)))+(((-0.0289900000000000)*(x0)*(x11)*(x12)))+(((-0.261080000000000)*(x11)*(x3)*(x5)))+(((-0.0289900000000000)*(x0)*(x1)*(x6)*(x8)))+(((-0.289820000000000)*(x0)*(x12)))+(((0.261080000000000)*(x0)*(x1)*(x11)*(x8))));
    eerot[3]=((((x1)*(x13)*(x2)*(x6)))+(((x12)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((x1)*(x11)*(x7)*(x9)))+(((-1.00000000000000)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((x11)*(x12)*(x13)*(x2)*(x8)))+(((x1)*(x10)*(x11)*(x2)*(x4))));
    eerot[4]=((((-1.00000000000000)*(x11)*(x12)*(x13)*(x7)*(x8)))+(((x10)*(x12)*(x3)*(x7)*(x9)))+(((x1)*(x11)*(x2)*(x9)))+(((x10)*(x12)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x4)*(x7)))+(((-1.00000000000000)*(x1)*(x13)*(x6)*(x7)))+(((x12)*(x2)*(x3)*(x4)))+(((-1.00000000000000)*(x12)*(x2)*(x6)*(x8)*(x9))));
    eerot[5]=((((-1.00000000000000)*(x1)*(x11)*(x13)*(x4)))+(((x1)*(x10)*(x6)))+(((x12)*(x13)*(x4)*(x6)*(x8)))+(((x10)*(x11)*(x12)*(x8)))+(((x12)*(x13)*(x3)*(x9))));
    eetrans[1]=((0.0930000000000000)+(((-0.0270000003725290)*(x12)*(x13)*(x4)*(x6)*(x8)))+(((0.261080000000000)*(x11)*(x12)*(x8)))+(((0.178100000119209)*(x1)*(x10)*(x11)*(x2)*(x4)))+(((0.0289900000000000)*(x1)*(x11)))+(((-0.178100000119209)*(x10)*(x12)*(x2)*(x4)*(x6)*(x8)))+(((0.0290000000000000)*(x12)*(x8)))+(((0.178100000119209)*(x1)*(x13)*(x2)*(x6)))+(((-0.178100000119209)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((0.178100000119209)*(x1)*(x11)*(x7)*(x9)))+(((0.178100000119209)*(x11)*(x12)*(x13)*(x2)*(x8)))+(((0.178100000119209)*(x12)*(x3)*(x4)*(x7)))+(((0.261080000000000)*(x1)*(x6)))+(((-0.0270000003725290)*(x1)*(x10)*(x6)))+(((-0.0289900000000000)*(x12)*(x6)*(x8)))+(((-0.0270000003725290)*(x12)*(x13)*(x3)*(x9)))+(((-0.178100000119209)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((0.289820000000000)*(x1)))+(((0.0270000003725290)*(x1)*(x11)*(x13)*(x4)))+(((-0.0270000003725290)*(x10)*(x11)*(x12)*(x8))));
    eerot[6]=((((x11)*(x12)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x5)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x8)*(x9)))+(((x1)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((x1)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((x0)*(x10)*(x2)*(x3)*(x4)*(x6)))+(((x0)*(x4)*(x7)*(x8)))+(((x0)*(x3)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x13)*(x2)*(x3)))+(((-1.00000000000000)*(x1)*(x3)*(x4)*(x5)*(x7)))+(((x1)*(x10)*(x2)*(x3)*(x5)*(x9)))+(((x10)*(x11)*(x12)*(x2)*(x4)*(x5)))+(((x12)*(x13)*(x2)*(x5)*(x6))));
    eerot[7]=((((x0)*(x2)*(x3)*(x6)*(x9)))+(((x1)*(x2)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((x0)*(x2)*(x4)*(x8)))+(((x0)*(x10)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x12)*(x13)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x3)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x6)*(x7)))+(((x1)*(x11)*(x13)*(x5)*(x7)*(x8)))+(((x0)*(x11)*(x13)*(x3)*(x7)))+(((x11)*(x12)*(x2)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x2)*(x3)*(x4)*(x5))));
    eerot[8]=((((-1.00000000000000)*(x1)*(x13)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x13)*(x3)*(x4)*(x6)))+(((x0)*(x13)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x13)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x5)*(x8)))+(((x10)*(x12)*(x5)*(x6)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x3))));
    eetrans[2]=((((0.0289900000000000)*(x1)*(x5)*(x6)*(x8)))+(((0.178100000119209)*(x1)*(x10)*(x2)*(x3)*(x5)*(x9)))+(((0.178100000119209)*(x10)*(x11)*(x12)*(x2)*(x4)*(x5)))+(((0.0270000003725290)*(x1)*(x10)*(x11)*(x5)*(x8)))+(((-0.178100000119209)*(x1)*(x3)*(x4)*(x5)*(x7)))+(((0.178100000119209)*(x12)*(x13)*(x2)*(x5)*(x6)))+(((0.0270000003725290)*(x1)*(x13)*(x3)*(x5)*(x9)))+(((-0.0270000003725290)*(x10)*(x12)*(x5)*(x6)))+(((-0.261080000000000)*(x1)*(x11)*(x5)*(x8)))+(((0.0270000003725290)*(x1)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((0.261080000000000)*(x12)*(x5)*(x6)))+(((-0.261080000000000)*(x0)*(x11)*(x3)))+(((0.178100000119209)*(x0)*(x10)*(x2)*(x3)*(x4)*(x6)))+(((0.178100000119209)*(x0)*(x4)*(x7)*(x8)))+(((0.178100000119209)*(x1)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((-0.178100000119209)*(x0)*(x11)*(x13)*(x2)*(x3)))+(((0.0270000003725290)*(x0)*(x10)*(x11)*(x3)))+(((0.178100000119209)*(x11)*(x12)*(x5)*(x7)*(x9)))+(((-0.178100000119209)*(x1)*(x11)*(x13)*(x2)*(x5)*(x8)))+(((0.0270000003725290)*(x11)*(x12)*(x13)*(x4)*(x5)))+(((0.0289900000000000)*(x0)*(x3)*(x6)))+(((0.0289900000000000)*(x11)*(x12)*(x5)))+(((0.289820000000000)*(x12)*(x5)))+(((-0.0290000000000000)*(x1)*(x5)*(x8)))+(((0.178100000119209)*(x0)*(x3)*(x6)*(x7)*(x9)))+(((-0.0290000000000000)*(x0)*(x3)))+(((-0.178100000119209)*(x0)*(x10)*(x2)*(x8)*(x9)))+(((-0.0270000003725290)*(x0)*(x13)*(x8)*(x9)))+(((0.178100000119209)*(x1)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((0.0270000003725290)*(x0)*(x13)*(x3)*(x4)*(x6))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=((-0.0290000000000000)+(((0.0270000003725290)*(r02)))+(((-0.178100000119209)*(r00)))+(px));
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=((-0.0930000000000000)+(((0.0270000003725290)*(r12)))+(((-0.178100000119209)*(r10)))+(py));
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((((0.0270000003725290)*(r22)))+(pz)+(((-0.178100000119209)*(r20))));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x0=(pz)*(pz);
        IKReal x1=((6.53497184281647)*(x0));
        IKReal x2=(py)*(py);
        IKReal x3=((6.53497184281647)*(x2));
        IKReal x4=(px)*(px);
        IKReal x5=((6.53497184281647)*(x4));
        IKReal x6=((-1.00533888481549)+(x3)+(x1)+(x5));
        if( (x6) < -1.0001 || (x6) > 1.0001 )
            continue;
        IKReal x7=IKasin(x6);
        j3array[0]=((-0.210315898568178)+(x7));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((2.93127675502162)+(((-1.00000000000000)*(x7))));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            if( ((((px)*(px))+((pz)*(pz)))) < (IKReal)-0.00001 )
                continue;
            j0eval[0]=IKabs(IKsqrt((((px)*(px))+((pz)*(pz)))));
            if( IKabs(j0eval[0]) < 0.000001  )
            {
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        if( ((((((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3)))))*(((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3))))))+((((((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))+(((-0.0289900000000000)*(cj2)*(sj3)))))*(((((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))+(((-0.0289900000000000)*(cj2)*(sj3)))))))) < (IKReal)-0.00001 )
                            continue;
                        j1eval[0]=IKabs(IKsqrt((((((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3)))))*(((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3))))))+((((((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))+(((-0.0289900000000000)*(cj2)*(sj3)))))*(((((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))+(((-0.0289900000000000)*(cj2)*(sj3)))))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[2], cj1array[2], sj1array[2];
                            bool j1valid[2]={false};
                            IKReal x8=((0.261080000000000)*(sj3));
                            IKReal x9=((0.0289900000000000)*(cj3));
                            IKReal x10=((0.289820000000000)+(x9)+(x8));
                            IKReal x11=((0.261080000000000)*(cj2)*(cj3));
                            IKReal x12=((0.0290000000000000)*(cj2));
                            IKReal x13=((x11)+(x12));
                            IKReal x14=((0.0289900000000000)*(cj2)*(sj3));
                            IKReal x15=((((-1.00000000000000)*(x14)))+(x13));
                            IKReal x16=IKatan2(x10, x15);
                            IKReal x17=(x10)*(x10);
                            IKReal x18=(x15)*(x15);
                            IKReal x19=((x17)+(x18));
                            if( (x19) < (IKReal)-0.00001 )
                                continue;
                            IKReal x20=IKsqrt(x19);
                            IKReal x21=IKabs(x20);
                            IKReal x22=((IKabs(x21) != 0)?((IKReal)1/(x21)):(IKReal)1.0e30);
                            IKReal x23=((py)*(x22));
                            if( (x23) < -1.0001 || (x23) > 1.0001 )
                                continue;
                            IKReal x24=IKasin(x23);
                            j1array[0]=((((-1.00000000000000)*(x16)))+(x24));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x16)))+(((-1.00000000000000)*(x24))));
                            sj1array[1]=IKsin(j1array[1]);
                            cj1array[1]=IKcos(j1array[1]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            if( j1array[1] > IKPI )
                                j1array[1]-=IK2PI;
                            else if( j1array[1] < -IKPI )
                                j1array[1]+=IK2PI;
                            j1valid[1] = true;
                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                j1valid[1]=false;
                            for(int ij1 = 0; ij1 < 2; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            {
                                IKReal j0eval[1];
                                j0eval[0]=((((-1.00000000000000)*(sj1)*((pz)*(pz))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
                                if( IKabs(j0eval[0]) < 0.000001  )
                                {
                                    {
                                    IKReal evalcond[4];
                                        IKReal x25=x9;
                                        IKReal x26=x8;
                                        IKReal x27=((0.289820000000000)+(x25)+(x26));
                                        IKReal x28=((x27)+(((-1.00000000000000)*(py))));
                                        evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                        evalcond[2]=x28;
                                        evalcond[3]=x28;
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((px)*(((((-1.00000000000000)*(cj2)*(px)))+(((pz)*(sj2)))))))+(((-1.00000000000000)*(pz)*(((((cj2)*(pz)))+(((px)*(sj2))))))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[4];
                                                                IKReal x29=x9;
                                                                IKReal x30=x8;
                                                                IKReal x31=x27;
                                                                IKReal x32=((x31)+(((-1.00000000000000)*(py))));
                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=x32;
                                                                evalcond[3]=x32;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x33=x4;
                                                                        IKReal x34=x0;
                                                                        IKReal x35=((x33)+(x34));
                                                                        IKReal x36=((0.261080000000000)*(cj3));
                                                                        IKReal x37=((0.0290000000000000)+(x36));
                                                                        IKReal x38=((0.0289900000000000)*(sj3));
                                                                        IKReal x39=((((-1.00000000000000)*(x38)))+(x37));
                                                                        j0array[0]=IKatan2(((-1.00000000000000)*(px)*(x39)*(((IKabs(x35) != 0)?((IKReal)1/(x35)):(IKReal)1.0e30))), ((-1.00000000000000)*(pz)*(x39)*(((IKabs(x35) != 0)?((IKReal)1/(x35)):(IKReal)1.0e30))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                IKReal x79=x9;
                                                                IKReal x80=x8;
                                                                IKReal x81=x27;
                                                                IKReal x82=((x81)+(((-1.00000000000000)*(py))));
                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=x82;
                                                                evalcond[3]=x82;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x83=x4;
                                                                        IKReal x84=x0;
                                                                        IKReal x85=((x83)+(x84));
                                                                        IKReal x86=((0.261080000000000)*(cj3));
                                                                        IKReal x87=((0.0290000000000000)+(x86));
                                                                        IKReal x88=((0.0289900000000000)*(sj3));
                                                                        IKReal x89=((x87)+(((-1.00000000000000)*(x88))));
                                                                        j0array[0]=IKatan2(((px)*(x89)*(((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30))), ((pz)*(x89)*(((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x90=((cj2)*(pz));
                                                            IKReal x91=((px)*(sj2));
                                                            IKReal x92=((x91)+(x90));
                                                            IKReal x93=((-1.00000000000000)*(x92));
                                                            IKReal x94=x12;
                                                            IKReal x95=x11;
                                                            IKReal x96=((x95)+(x94));
                                                            IKReal x97=x14;
                                                            IKReal x98=((x96)+(((-1.00000000000000)*(x97))));
                                                            IKReal x99=((pz)*(sj2));
                                                            IKReal x100=((cj2)*(px));
                                                            IKReal x101=((((-1.00000000000000)*(x100)))+(x99));
                                                            IKReal x102=((pz)*(x93));
                                                            IKReal x103=((px)*(x101));
                                                            IKReal x104=((x102)+(x103));
                                                            j0array[0]=IKatan2(((-1.00000000000000)*(x93)*(x98)*(((IKabs(x104) != 0)?((IKReal)1/(x104)):(IKReal)1.0e30))), ((x101)*(x98)*(((IKabs(x104) != 0)?((IKReal)1/(x104)):(IKReal)1.0e30))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x105=x4;
                                                IKReal x106=x0;
                                                IKReal x107=((x105)+(x106));
                                                IKReal x108=((IKabs(x107) != 0)?((IKReal)1/(x107)):(IKReal)1.0e30);
                                                IKReal x109=x12;
                                                IKReal x110=x11;
                                                IKReal x111=((x110)+(x109));
                                                IKReal x112=x14;
                                                IKReal x113=((((-1.00000000000000)*(x112)))+(x111));
                                                IKReal x114=((0.0289900000000000)*(sj2)*(sj3));
                                                IKReal x115=((0.0290000000000000)*(sj2));
                                                IKReal x116=((0.261080000000000)*(cj3)*(sj2));
                                                IKReal x117=((x116)+(x115));
                                                IKReal x118=((((-1.00000000000000)*(x117)))+(x114));
                                                j0array[0]=IKatan2(((x108)*(((((px)*(x118)))+(((-1.00000000000000)*(pz)*(x113)))))), ((x108)*(((((pz)*(x118)))+(((px)*(x113)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        IKReal x119=x9;
                                        IKReal x120=x8;
                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                        evalcond[2]=((0.289820000000000)+(x120)+(x119)+(py));
                                        evalcond[3]=((-0.289820000000000)+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(py))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((pz)*(((((-1.00000000000000)*(cj2)*(pz)))+(((px)*(sj2)))))))+(((-1.00000000000000)*(px)*(((((cj2)*(px)))+(((pz)*(sj2))))))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[4];
                                                                IKReal x121=x9;
                                                                IKReal x122=x8;
                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=((0.289820000000000)+(x122)+(x121)+(py));
                                                                evalcond[3]=((-0.289820000000000)+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(py))));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x123=x4;
                                                                        IKReal x124=x0;
                                                                        IKReal x125=((x124)+(x123));
                                                                        IKReal x126=((0.261080000000000)*(cj3));
                                                                        IKReal x127=((0.0290000000000000)+(x126));
                                                                        IKReal x128=((0.0289900000000000)*(sj3));
                                                                        IKReal x129=((((-1.00000000000000)*(x128)))+(x127));
                                                                        j0array[0]=IKatan2(((-1.00000000000000)*(px)*(x129)*(((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30))), ((-1.00000000000000)*(pz)*(x129)*(((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                IKReal x130=x9;
                                                                IKReal x131=x8;
                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=((0.289820000000000)+(x131)+(x130)+(py));
                                                                evalcond[3]=((-0.289820000000000)+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(py))));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x132=x4;
                                                                        IKReal x133=x0;
                                                                        IKReal x134=((x133)+(x132));
                                                                        IKReal x135=((0.261080000000000)*(cj3));
                                                                        IKReal x136=((0.0290000000000000)+(x135));
                                                                        IKReal x137=((0.0289900000000000)*(sj3));
                                                                        IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
                                                                        j0array[0]=IKatan2(((px)*(x138)*(((IKabs(x134) != 0)?((IKReal)1/(x134)):(IKReal)1.0e30))), ((pz)*(x138)*(((IKabs(x134) != 0)?((IKReal)1/(x134)):(IKReal)1.0e30))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x139=((px)*(sj2));
                                                            IKReal x140=((cj2)*(pz));
                                                            IKReal x141=((((-1.00000000000000)*(x140)))+(x139));
                                                            IKReal x142=x12;
                                                            IKReal x143=x11;
                                                            IKReal x144=((x142)+(x143));
                                                            IKReal x145=x14;
                                                            IKReal x146=((((-1.00000000000000)*(x145)))+(x144));
                                                            IKReal x147=((cj2)*(px));
                                                            IKReal x148=((pz)*(sj2));
                                                            IKReal x149=((x147)+(x148));
                                                            IKReal x150=((-1.00000000000000)*(x149));
                                                            j0array[0]=IKatan2(((x141)*(x146)*(((IKabs(((((pz)*(x141)))+(((px)*(x150))))) != 0)?((IKReal)1/(((((pz)*(x141)))+(((px)*(x150)))))):(IKReal)1.0e30))), ((x146)*(x150)*(((IKabs(((((-1.00000000000000)*(pz)*(x141)))+(((-1.00000000000000)*(px)*(x150))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(pz)*(x141)))+(((-1.00000000000000)*(px)*(x150)))))):(IKReal)1.0e30))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x151=x12;
                                                IKReal x152=x11;
                                                IKReal x153=((x152)+(x151));
                                                IKReal x154=x14;
                                                IKReal x155=((((-1.00000000000000)*(x154)))+(x153));
                                                IKReal x156=((0.0289900000000000)*(sj2)*(sj3));
                                                IKReal x157=((0.0290000000000000)*(sj2));
                                                IKReal x158=((0.261080000000000)*(cj3)*(sj2));
                                                IKReal x159=((x157)+(x158));
                                                IKReal x160=((((-1.00000000000000)*(x159)))+(x156));
                                                IKReal x161=x4;
                                                IKReal x162=x0;
                                                IKReal x163=((x162)+(x161));
                                                IKReal x164=((-1.00000000000000)*(x163));
                                                IKReal x165=((IKabs(x164) != 0)?((IKReal)1/(x164)):(IKReal)1.0e30);
                                                j0array[0]=IKatan2(((x165)*(((((-1.00000000000000)*(pz)*(x155)))+(((-1.00000000000000)*(px)*(x160)))))), ((x165)*(((((-1.00000000000000)*(pz)*(x160)))+(((px)*(x155)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        if( 1 )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((cj1)*((pz)*(pz))))+(((cj1)*((px)*(px)))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[4];
                                                    IKReal x166=x12;
                                                    IKReal x167=x11;
                                                    IKReal x168=((x166)+(x167));
                                                    IKReal x169=x14;
                                                    IKReal x170=((x169)+(py));
                                                    IKReal x171=((((-1.00000000000000)*(x170)))+(x168));
                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
                                                    evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                    evalcond[2]=x171;
                                                    evalcond[3]=x171;
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((cj2)*((pz)*(pz))))+(((cj2)*((px)*(px)))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[5];
                                                                IKReal x172=((-1.00000000000000)*(py));
                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=x172;
                                                                evalcond[3]=x172;
                                                                evalcond[4]=x172;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j0eval[1];
                                                                                j0eval[0]=((((pz)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3)))))))+(((px)*(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))))));
                                                                                if( IKabs(j0eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1]={false};
                                                                                    IKReal x173=x9;
                                                                                    IKReal x174=x8;
                                                                                    IKReal x175=((0.289820000000000)+(x173)+(x174));
                                                                                    IKReal x176=((0.261080000000000)*(cj3));
                                                                                    IKReal x177=((0.0290000000000000)+(x176));
                                                                                    IKReal x178=((0.0289900000000000)*(sj3));
                                                                                    IKReal x179=((((-1.00000000000000)*(x178)))+(x177));
                                                                                    IKReal x180=((px)*(x179));
                                                                                    IKReal x181=((pz)*(x175));
                                                                                    IKReal x182=((x180)+(x181));
                                                                                    IKReal x183=((IKabs(x182) != 0)?((IKReal)1/(x182)):(IKReal)1.0e30);
                                                                                    j0array[0]=IKatan2(((x183)*(((((-1.00000000000000)*((px)*(px))))+((x175)*(x175))))), ((x183)*(((((-1.00000000000000)*(x179)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3)))))))+(((-1.00000000000000)*(px)*(pz)))))));
                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                    if( j0array[0] > IKPI )
                                                                                        j0array[0]-=IK2PI;
                                                                                    else if( j0array[0] < -IKPI )
                                                                                        j0array[0]+=IK2PI;
                                                                                    j0valid[0] = true;
                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                    if( !j0valid[ij0] ) { continue; }
                                                                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x184=((0.261080000000000)*(cj3));
                                                                        IKReal x185=((0.0290000000000000)+(x184));
                                                                        IKReal x186=((0.0289900000000000)*(sj3));
                                                                        IKReal x187=((((-1.00000000000000)*(x186)))+(x185));
                                                                        IKReal x188=x9;
                                                                        IKReal x189=x8;
                                                                        IKReal x190=((0.289820000000000)+(x188)+(x189));
                                                                        IKReal x191=x4;
                                                                        IKReal x192=x0;
                                                                        IKReal x193=((x192)+(x191));
                                                                        IKReal x194=((-1.00000000000000)*(x193));
                                                                        IKReal x195=((IKabs(x194) != 0)?((IKReal)1/(x194)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x195)*(((((-1.00000000000000)*(pz)*(x190)))+(((px)*(x187)))))), ((x195)*(((((pz)*(x187)))+(((px)*(x190)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=((-1.00000000000000)*(py));
                                                                evalcond[3]=py;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j0eval[1];
                                                                                j0eval[0]=((((pz)*(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))))+(((px)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3))))))));
                                                                                if( IKabs(j0eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1]={false};
                                                                                    IKReal x196=x9;
                                                                                    IKReal x197=x8;
                                                                                    IKReal x198=((0.289820000000000)+(x197)+(x196));
                                                                                    IKReal x199=((0.261080000000000)*(cj3));
                                                                                    IKReal x200=((0.0290000000000000)+(x199));
                                                                                    IKReal x201=((0.0289900000000000)*(sj3));
                                                                                    IKReal x202=((((-1.00000000000000)*(x201)))+(x200));
                                                                                    IKReal x203=((pz)*(x202));
                                                                                    IKReal x204=((px)*(x198));
                                                                                    IKReal x205=((x204)+(x203));
                                                                                    IKReal x206=((IKabs(x205) != 0)?((IKReal)1/(x205)):(IKReal)1.0e30);
                                                                                    j0array[0]=IKatan2(((x206)*(((((x198)*(x202)))+(((px)*(pz)))))), ((x206)*(((((-1.00000000000000)*((px)*(px))))+((x202)*(x202))))));
                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                    if( j0array[0] > IKPI )
                                                                                        j0array[0]-=IK2PI;
                                                                                    else if( j0array[0] < -IKPI )
                                                                                        j0array[0]+=IK2PI;
                                                                                    j0valid[0] = true;
                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                    if( !j0valid[ij0] ) { continue; }
                                                                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x207=((0.261080000000000)*(cj3));
                                                                        IKReal x208=((0.0290000000000000)+(x207));
                                                                        IKReal x209=((0.0289900000000000)*(sj3));
                                                                        IKReal x210=((((-1.00000000000000)*(x209)))+(x208));
                                                                        IKReal x211=x9;
                                                                        IKReal x212=x8;
                                                                        IKReal x213=((0.289820000000000)+(x211)+(x212));
                                                                        IKReal x214=x4;
                                                                        IKReal x215=x0;
                                                                        IKReal x216=((x214)+(x215));
                                                                        IKReal x217=((-1.00000000000000)*(x216));
                                                                        IKReal x218=((IKabs(x217) != 0)?((IKReal)1/(x217)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x218)*(((((-1.00000000000000)*(pz)*(x213)))+(((-1.00000000000000)*(px)*(x210)))))), ((x218)*(((((-1.00000000000000)*(pz)*(x210)))+(((px)*(x213)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x219=x9;
                                                                        IKReal x220=x8;
                                                                        IKReal x221=((0.289820000000000)+(x219)+(x220));
                                                                        IKReal x222=((0.0289900000000000)*(sj2)*(sj3));
                                                                        IKReal x223=((0.0290000000000000)*(sj2));
                                                                        IKReal x224=((0.261080000000000)*(cj3)*(sj2));
                                                                        IKReal x225=((x223)+(x224));
                                                                        IKReal x226=((x222)+(((-1.00000000000000)*(x225))));
                                                                        IKReal x227=x4;
                                                                        IKReal x228=x0;
                                                                        IKReal x229=((x228)+(x227));
                                                                        IKReal x230=((-1.00000000000000)*(x229));
                                                                        IKReal x231=((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x231)*(((((-1.00000000000000)*(pz)*(x221)))+(((-1.00000000000000)*(px)*(x226)))))), ((x231)*(((((px)*(x221)))+(((-1.00000000000000)*(pz)*(x226)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x232=x0;
                                                            IKReal x233=((cj2)*(x232));
                                                            IKReal x234=x4;
                                                            IKReal x235=((cj2)*(x234));
                                                            IKReal x236=((x233)+(x235));
                                                            IKReal x237=((IKabs(x236) != 0)?((IKReal)1/(x236)):(IKReal)1.0e30);
                                                            IKReal x238=x9;
                                                            IKReal x239=x8;
                                                            IKReal x240=((0.289820000000000)+(x238)+(x239));
                                                            j0array[0]=IKatan2(((x237)*(((((-1.00000000000000)*(px)*(py)*(sj2)))+(((cj2)*(pz)*(x240)))))), ((x237)*(((((-1.00000000000000)*(cj2)*(px)*(x240)))+(((-1.00000000000000)*(py)*(pz)*(sj2)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    IKReal x241=x14;
                                                    IKReal x242=x12;
                                                    IKReal x243=x11;
                                                    IKReal x244=((x243)+(x242)+(py));
                                                    evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                    evalcond[2]=((x244)+(((-1.00000000000000)*(x241))));
                                                    evalcond[3]=((x241)+(((-1.00000000000000)*(x244))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((-1.00000000000000)*(cj2)*((pz)*(pz))))+(((-1.00000000000000)*(cj2)*((px)*(px)))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[5];
                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=py;
                                                                evalcond[3]=py;
                                                                evalcond[4]=((-1.00000000000000)*(py));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j0eval[1];
                                                                                j0eval[0]=((((-1.00000000000000)*(px)*(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3)))))))+(((pz)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3))))))));
                                                                                if( IKabs(j0eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1]={false};
                                                                                    IKReal x245=x9;
                                                                                    IKReal x246=x8;
                                                                                    IKReal x247=((0.289820000000000)+(x246)+(x245));
                                                                                    IKReal x248=((0.261080000000000)*(cj3));
                                                                                    IKReal x249=((0.0290000000000000)+(x248));
                                                                                    IKReal x250=((0.0289900000000000)*(sj3));
                                                                                    IKReal x251=((x249)+(((-1.00000000000000)*(x250))));
                                                                                    IKReal x252=((pz)*(x247));
                                                                                    IKReal x253=((px)*(x251));
                                                                                    IKReal x254=((x252)+(((-1.00000000000000)*(x253))));
                                                                                    IKReal x255=((IKabs(x254) != 0)?((IKReal)1/(x254)):(IKReal)1.0e30);
                                                                                    j0array[0]=IKatan2(((x255)*((((px)*(px))+(((-1.00000000000000)*((x247)*(x247))))))), ((x255)*(((((-1.00000000000000)*(x251)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3)))))))+(((px)*(pz)))))));
                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                    if( j0array[0] > IKPI )
                                                                                        j0array[0]-=IK2PI;
                                                                                    else if( j0array[0] < -IKPI )
                                                                                        j0array[0]+=IK2PI;
                                                                                    j0valid[0] = true;
                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                    if( !j0valid[ij0] ) { continue; }
                                                                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x256=x4;
                                                                        IKReal x257=x0;
                                                                        IKReal x258=((x256)+(x257));
                                                                        IKReal x259=((IKabs(x258) != 0)?((IKReal)1/(x258)):(IKReal)1.0e30);
                                                                        IKReal x260=((0.261080000000000)*(cj3));
                                                                        IKReal x261=((0.0290000000000000)+(x260));
                                                                        IKReal x262=((0.0289900000000000)*(sj3));
                                                                        IKReal x263=((x261)+(((-1.00000000000000)*(x262))));
                                                                        IKReal x264=x9;
                                                                        IKReal x265=x8;
                                                                        IKReal x266=((0.289820000000000)+(x265)+(x264));
                                                                        j0array[0]=IKatan2(((x259)*(((((-1.00000000000000)*(px)*(x263)))+(((-1.00000000000000)*(pz)*(x266)))))), ((x259)*(((((-1.00000000000000)*(pz)*(x263)))+(((px)*(x266)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                evalcond[1]=((0.153839818900000)+(((0.149650991200000)*(sj3)))+(((0.0319464036000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                                evalcond[2]=py;
                                                                evalcond[3]=((-1.00000000000000)*(py));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j0eval[1];
                                                                                j0eval[0]=((((pz)*(((0.289820000000000)+(((0.0289900000000000)*(cj3)))+(((0.261080000000000)*(sj3)))))))+(((px)*(((0.0290000000000000)+(((-0.0289900000000000)*(sj3)))+(((0.261080000000000)*(cj3))))))));
                                                                                if( IKabs(j0eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1]={false};
                                                                                    IKReal x267=x9;
                                                                                    IKReal x268=x8;
                                                                                    IKReal x269=((0.289820000000000)+(x267)+(x268));
                                                                                    IKReal x270=((0.261080000000000)*(cj3));
                                                                                    IKReal x271=((0.0290000000000000)+(x270));
                                                                                    IKReal x272=((0.0289900000000000)*(sj3));
                                                                                    IKReal x273=((x271)+(((-1.00000000000000)*(x272))));
                                                                                    IKReal x274=((px)*(x273));
                                                                                    IKReal x275=((pz)*(x269));
                                                                                    IKReal x276=((x274)+(x275));
                                                                                    IKReal x277=((IKabs(x276) != 0)?((IKReal)1/(x276)):(IKReal)1.0e30);
                                                                                    j0array[0]=IKatan2(((x277)*(((((-1.00000000000000)*((x269)*(x269))))+((px)*(px))))), ((x277)*(((((x269)*(x273)))+(((px)*(pz)))))));
                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                    if( j0array[0] > IKPI )
                                                                                        j0array[0]-=IK2PI;
                                                                                    else if( j0array[0] < -IKPI )
                                                                                        j0array[0]+=IK2PI;
                                                                                    j0valid[0] = true;
                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                    if( !j0valid[ij0] ) { continue; }
                                                                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x278=x4;
                                                                        IKReal x279=x0;
                                                                        IKReal x280=((x278)+(x279));
                                                                        IKReal x281=((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30);
                                                                        IKReal x282=((0.261080000000000)*(cj3));
                                                                        IKReal x283=((0.0290000000000000)+(x282));
                                                                        IKReal x284=((0.0289900000000000)*(sj3));
                                                                        IKReal x285=((x283)+(((-1.00000000000000)*(x284))));
                                                                        IKReal x286=x9;
                                                                        IKReal x287=x8;
                                                                        IKReal x288=((0.289820000000000)+(x287)+(x286));
                                                                        j0array[0]=IKatan2(((x281)*(((((-1.00000000000000)*(pz)*(x288)))+(((px)*(x285)))))), ((x281)*(((((px)*(x288)))+(((pz)*(x285)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x289=x4;
                                                                        IKReal x290=x0;
                                                                        IKReal x291=((x290)+(x289));
                                                                        IKReal x292=((IKabs(x291) != 0)?((IKReal)1/(x291)):(IKReal)1.0e30);
                                                                        IKReal x293=((0.0289900000000000)*(sj2)*(sj3));
                                                                        IKReal x294=((0.0290000000000000)*(sj2));
                                                                        IKReal x295=((0.261080000000000)*(cj3)*(sj2));
                                                                        IKReal x296=((x294)+(x295));
                                                                        IKReal x297=((((-1.00000000000000)*(x296)))+(x293));
                                                                        IKReal x298=x9;
                                                                        IKReal x299=x8;
                                                                        IKReal x300=((0.289820000000000)+(x298)+(x299));
                                                                        j0array[0]=IKatan2(((x292)*(((((px)*(x297)))+(((-1.00000000000000)*(pz)*(x300)))))), ((x292)*(((((px)*(x300)))+(((pz)*(x297)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x301=x9;
                                                            IKReal x302=x8;
                                                            IKReal x303=((0.289820000000000)+(x302)+(x301));
                                                            IKReal x304=x0;
                                                            IKReal x305=((cj2)*(x304));
                                                            IKReal x306=x4;
                                                            IKReal x307=((cj2)*(x306));
                                                            IKReal x308=((x307)+(x305));
                                                            IKReal x309=((-1.00000000000000)*(x308));
                                                            IKReal x310=((IKabs(x309) != 0)?((IKReal)1/(x309)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x310)*(((((cj2)*(pz)*(x303)))+(((-1.00000000000000)*(px)*(py)*(sj2)))))), ((x310)*(((((-1.00000000000000)*(py)*(pz)*(sj2)))+(((-1.00000000000000)*(cj2)*(px)*(x303)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x311=x0;
                                                IKReal x312=((cj1)*(x311));
                                                IKReal x313=x4;
                                                IKReal x314=((cj1)*(x313));
                                                IKReal x315=((x314)+(x312));
                                                IKReal x316=((IKabs(x315) != 0)?((IKReal)1/(x315)):(IKReal)1.0e30);
                                                IKReal x317=x11;
                                                IKReal x318=x12;
                                                IKReal x319=((x318)+(x317));
                                                IKReal x320=((py)*(sj1));
                                                IKReal x321=x14;
                                                IKReal x322=((x320)+(x321));
                                                IKReal x323=((((-1.00000000000000)*(x322)))+(x319));
                                                IKReal x324=((0.0289900000000000)*(sj2)*(sj3));
                                                IKReal x325=((0.0290000000000000)*(sj2));
                                                IKReal x326=((0.261080000000000)*(cj3)*(sj2));
                                                IKReal x327=((x325)+(x326));
                                                IKReal x328=((((-1.00000000000000)*(x327)))+(x324));
                                                j0array[0]=IKatan2(((x316)*(((((cj1)*(px)*(x328)))+(((-1.00000000000000)*(pz)*(x323)))))), ((x316)*(((((cj1)*(pz)*(x328)))+(((px)*(x323)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                    }
                                    }
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x329=x8;
                                    IKReal x330=x9;
                                    IKReal x331=((0.289820000000000)+(x330)+(x329));
                                    IKReal x332=((cj1)*(py));
                                    IKReal x333=((x331)+(((-1.00000000000000)*(x332))));
                                    IKReal x334=((0.0289900000000000)*(sj2)*(sj3));
                                    IKReal x335=((0.0290000000000000)*(sj2));
                                    IKReal x336=((0.261080000000000)*(cj3)*(sj2));
                                    IKReal x337=((x336)+(x335));
                                    IKReal x338=((x334)+(((-1.00000000000000)*(x337))));
                                    IKReal x339=x4;
                                    IKReal x340=((sj1)*(x339));
                                    IKReal x341=x0;
                                    IKReal x342=((sj1)*(x341));
                                    IKReal x343=((x342)+(x340));
                                    IKReal x344=((-1.00000000000000)*(x343));
                                    IKReal x345=((IKabs(x344) != 0)?((IKReal)1/(x344)):(IKReal)1.0e30);
                                    j0array[0]=IKatan2(((x345)*(((((-1.00000000000000)*(pz)*(x333)))+(((-1.00000000000000)*(px)*(sj1)*(x338)))))), ((x345)*(((((-1.00000000000000)*(pz)*(sj1)*(x338)))+(((px)*(x333)))))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                    {
                                    if( !j0valid[ij0] ) { continue; }
                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
            
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x346=x4;
                IKReal x347=x0;
                IKReal x348=((x346)+(x347));
                if( (x348) < (IKReal)-0.00001 )
                    continue;
                IKReal x349=IKsqrt(x348);
                IKReal x350=IKabs(x349);
                IKReal x351=((IKabs(x350) != 0)?((IKReal)1/(x350)):(IKReal)1.0e30);
                IKReal x352=((0.0289900000000000)*(sj2)*(sj3));
                IKReal x353=((0.0290000000000000)*(sj2));
                IKReal x354=((0.261080000000000)*(cj3)*(sj2));
                IKReal x355=((x353)+(x354));
                IKReal x356=((((-1.00000000000000)*(x355)))+(x352));
                IKReal x357=((x351)*(x356));
                if( (x357) < -1.0001 || (x357) > 1.0001 )
                    continue;
                IKReal x358=IKasin(x357);
                IKReal x359=((-1.00000000000000)*(pz));
                IKReal x360=((-1.00000000000000)*(px));
                IKReal x361=IKatan2(x359, x360);
                j0array[0]=((((-1.00000000000000)*(x361)))+(((-1.00000000000000)*(x358))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x361)))+(x358));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0)
                {
                if( !j0valid[ij0] ) { continue; }
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                    IKReal j1eval[1];
                    j1eval[0]=((((py)*(((((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))+(((-0.0289900000000000)*(cj2)*(sj3)))))))+(((((((-1.00000000000000)*(pz)*(sj0)))+(((cj0)*(px)))))*(((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3))))))));
                    if( IKabs(j1eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j1eval[1];
                                IKReal x362=((pz)*(sj0));
                                IKReal x363=((cj0)*(px));
                                j1eval[0]=((((((((-1.00000000000000)*(x362)))+(x363)))*(((((-1.00000000000000)*(x363)))+(x362)))))+(((-1.00000000000000)*((py)*(py)))));
                                if( IKabs(j1eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x364=((cj0)*(px));
                                    IKReal x365=((pz)*(sj0));
                                    IKReal x366=((((-1.00000000000000)*(x364)))+(x365));
                                    IKReal x367=((0.0289900000000000)*(cj2)*(sj3));
                                    IKReal x368=((((-1.00000000000000)*(x365)))+(x364));
                                    IKReal x369=((x366)*(x368));
                                    IKReal x370=x2;
                                    IKReal x371=((((-1.00000000000000)*(x370)))+(x369));
                                    IKReal x372=((IKabs(x371) != 0)?((IKReal)1/(x371)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((x372)*(((((-1.00000000000000)*(py)*(((((-1.00000000000000)*(x367)))+(((0.261080000000000)*(cj2)*(cj3)))+(((0.0290000000000000)*(cj2)))))))+(((-1.00000000000000)*(x366)*(((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3)))))))))), ((x372)*(((((x368)*(((((-0.261080000000000)*(cj2)*(cj3)))+(x367)+(((-0.0290000000000000)*(cj2)))))))+(((-1.00000000000000)*(py)*(((0.289820000000000)+(((0.261080000000000)*(sj3)))+(((0.0289900000000000)*(cj3)))))))))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                    {
                                    if( !j1valid[ij1] ) { continue; }
                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                        
                        } else
                        {
                        }
                        }
                    
                    } else
                    {
                        {
                        IKReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1]={false};
                        IKReal x373=((0.261080000000000)*(sj3));
                        IKReal x374=((0.0289900000000000)*(cj3));
                        IKReal x375=((0.289820000000000)+(x374)+(x373));
                        IKReal x376=((cj0)*(px));
                        IKReal x377=((pz)*(sj0));
                        IKReal x378=((((-1.00000000000000)*(x377)))+(x376));
                        IKReal x379=((x375)*(x378));
                        IKReal x380=((0.261080000000000)*(cj2)*(cj3));
                        IKReal x381=((0.0290000000000000)*(cj2));
                        IKReal x382=((x380)+(x381));
                        IKReal x383=((0.0289900000000000)*(cj2)*(sj3));
                        IKReal x384=((x382)+(((-1.00000000000000)*(x383))));
                        IKReal x385=((py)*(x384));
                        IKReal x386=((x385)+(x379));
                        IKReal x387=((IKabs(x386) != 0)?((IKReal)1/(x386)):(IKReal)1.0e30);
                        j1array[0]=IKatan2(((x387)*(((((-1.00000000000000)*((x375)*(x375))))+((py)*(py))))), ((x387)*(((((py)*(x378)))+(((x375)*(x384)))))));
                        sj1array[0]=IKsin(j1array[0]);
                        cj1array[0]=IKcos(j1array[0]);
                        if( j1array[0] > IKPI )
                            j1array[0]-=IK2PI;
                        else if( j1array[0] < -IKPI )
                            j1array[0]+=IK2PI;
                        j1valid[0] = true;
                        for(int ij1 = 0; ij1 < 1; ++ij1)
                        {
                        if( !j1valid[ij1] ) { continue; }
                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                    
                    }
                
                }
                }
                }
            
            }
        
        }
        }
        }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x40=((cj1)*(sj3));
        IKReal x41=((cj2)*(cj3)*(sj1));
        IKReal x42=((x40)+(x41));
        IKReal x43=((sj0)*(sj1)*(sj3));
        IKReal x44=((cj0)*(cj3)*(sj2));
        IKReal x45=((cj1)*(cj2)*(cj3)*(sj0));
        IKReal x46=((x44)+(x45));
        IKReal x47=((((-1.00000000000000)*(x46)))+(x43));
        IKReal x48=((cj0)*(cj1)*(cj2)*(cj3));
        IKReal x49=((cj3)*(sj0)*(sj2));
        IKReal x50=((cj0)*(sj1)*(sj3));
        IKReal x51=((x49)+(x50));
        IKReal x52=((x48)+(((-1.00000000000000)*(x51))));
        IKReal x53=((cj1)*(cj3));
        IKReal x54=((cj2)*(sj1)*(sj3));
        IKReal x55=((x53)+(((-1.00000000000000)*(x54))));
        IKReal x56=((sj0)*(sj2)*(sj3));
        IKReal x57=((cj0)*(cj3)*(sj1));
        IKReal x58=((cj0)*(cj2)*(x40));
        IKReal x59=((x58)+(x57));
        IKReal x60=((x56)+(((-1.00000000000000)*(x59))));
        IKReal x61=((cj2)*(sj0)*(x40));
        IKReal x62=((cj3)*(sj0)*(sj1));
        IKReal x63=((cj0)*(sj2)*(sj3));
        IKReal x64=((x61)+(x62)+(x63));
        IKReal x65=((cj2)*(sj0));
        IKReal x66=((cj0)*(cj1)*(sj2));
        IKReal x67=((x65)+(x66));
        IKReal x68=((cj0)*(cj2));
        IKReal x69=((cj1)*(sj0)*(sj2));
        IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
        new_r00=((((r20)*(x47)))+(((r10)*(x42)))+(((r00)*(x52))));
        new_r01=((((r01)*(x52)))+(((r11)*(x42)))+(((r21)*(x47))));
        new_r02=((((r02)*(x52)))+(((r22)*(x47)))+(((r12)*(x42))));
        new_r10=((((r10)*(x55)))+(((r20)*(x64)))+(((r00)*(x60))));
        new_r11=((((r11)*(x55)))+(((r01)*(x60)))+(((r21)*(x64))));
        new_r12=((((r22)*(x64)))+(((r02)*(x60)))+(((r12)*(x55))));
        new_r20=((((r10)*(sj1)*(sj2)))+(((r00)*(x67)))+(((r20)*(x70))));
        new_r21=((((r21)*(x70)))+(((r01)*(x67)))+(((r11)*(sj1)*(sj2))));
        new_r22=((((r02)*(x67)))+(((r22)*(x70)))+(((r12)*(sj1)*(sj2))));
        {
        IKReal j5eval;
        j5eval=new_r02;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r21, new_r20)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(new_r21, new_r20))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r12)), new_r22);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKcos(j4);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(new_r02, ((-1.00000000000000)*(new_r12)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x71=IKsin(j4);
                IKReal x72=((IKabs(x71) != 0)?((IKReal)1/(x71)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((new_r20)*(x72)), ((new_r21)*(x72)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(new_r02, ((new_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKcos(j5);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x73=IKsin(j5);
                    IKReal x74=((IKabs(x73) != 0)?((IKReal)1/(x73)):(IKReal)1.0e30);
                    IKReal x75=IKsin(j4);
                    IKReal x76=IKcos(j4);
                    j6array[0]=IKatan2(((((new_r21)*(x74)*(x76)))+(((-1.00000000000000)*(new_r11)*(x74)*(x75)))), ((((new_r11)*(x76)))+(((new_r21)*(x75)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x77=IKcos(j5);
                    IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x78)), ((new_r00)*(x78)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
