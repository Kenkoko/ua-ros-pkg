<!-- -*- mode: XML -*- -->

<launch>
    <!-- start the hokuyo laser at the neck -->
    <node name="neck_laser" pkg="hokuyo_node" type="hokuyo_node" respawn="false" output="screen">
        <remap from="scan" to="neck_scan/scan"/>
        <param name="port" value="/dev/wubble2NeckLaser"/>
        <param name="min_ang" value="-2.08"/>
        <param name="max_ang" value="2.08"/>
        <param name="frame_id" value="neck_scan_link"/>
    </node>

    <!-- start tilting the laser up and down -->
    <node type="tilt_laser_action_node" pkg="wubble2_robot" name="laser_tilting_action" output="screen" >
        <param name="error_threshold" value="0.02" />
        <param name="tilt_controller" value="neck_tilt_controller" />
    </node>
    <node name="tilt_neck_laser" pkg="wubble2_robot" type="tilt_neck_laser.py" respawn="true" output="screen" />




    <!-- ************ navigation related stuff *************** -->
    <!-- Filter for tilt laser shadowing/veiling -->
    <node name="tilt_shadow_filter" pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true">
        <remap from="scan" to="neck_scan/scan" />
        <remap from="cloud_filtered" to="neck_scan/shadow_filtered" />
        <param name="target_frame" value="base_link" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find wubble_description)/params/shadow_filter.yaml" />
    </node>

    <!-- Filter for tilt laser scans that hit the body of the robot -->
    <node name="tilt_laser_self_filter" pkg="wubble_navigation_self_filter" type="self_filter" respawn="true" output="screen">
        <remap from="cloud_in" to="neck_scan/shadow_filtered" />
        <remap from="cloud_out" to="neck_scan/filtered" />
        <rosparam file="$(find wubble_description)/params/w2_self_filter.yaml" command="load" />
        <param name="sensor_frame" type="string" value="neck_scan_link" />
    </node>

    <node name="sac_ground_removal" pkg="semantic_point_annotator" type="sac_inc_ground_removal_node">
        <remap from="tilt_laser_cloud_filtered" to="neck_scan/filtered" />
        <remap from="cloud_ground_filtered" to="neck_scan/ground_object_cloud" />
        <param name="z_threshold" value="0.2" />
        <param name="sac_min_points_per_model" value="40" />
        <param name="sac_distance_threshold" value="0.05" />
        <param name="planar_refine" value="1" />
        <param name="laser_tilt_mount_frame" value="neck_scan_mount_link" />
    </node>
    <!-- ************************ -->




    <!-- convert scan to cloud and filter bad hits -->
    <node name="neck_shadow_filter" pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true">
        <remap from="scan" to="neck_scan/scan" />
        <remap from="cloud_filtered" to="neck_scan/cloud" />
        <param name="target_frame" value="base_link" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find wubble_description)/params/shadow_filter.yaml" />
    </node>

    <node name="point_cloud_converter_preself" pkg="point_cloud_converter" type="point_cloud_converter">
        <remap from="/points_in" to="neck_scan/cloud" />
        <remap from="/points2_out" to="neck_scan/cloud2" />
    </node>

    <!-- remove parts of the robot that show up in laser cloud -->
    <node name="laser_self_filter" pkg="robot_self_filter" type="self_filter" respawn="true" output="screen">
        <remap from="cloud_in" to="neck_scan/cloud2" />
        <remap from="cloud_out" to="neck_scan/cloud_filtered2" />
        <param name="sensor_frame" value="neck_scan_link" />
        <param name="subsample_value" type="double" value=".01"/>
        <rosparam file="$(find wubble_description)/params/w2_self_filter.yaml" command="load" />
    </node>

    <node name="point_cloud_converter_postself" pkg="point_cloud_converter" type="point_cloud_converter">
        <remap from="/points2_in" to="neck_scan/cloud_filtered2" />
        <remap from="/points_out" to="neck_scan/cloud_filtered" />
    </node>

    <!-- assemble pointcloud into a full world view -->
    <node pkg="laser_assembler" type="point_cloud_assembler" output="screen"  name="point_cloud_assembler">
        <remap from="cloud" to="neck_scan/cloud_filtered"/>
        <param name="tf_cache_time_secs" type="double" value="15.0" />
        <param name="tf_tolerance_secs" type="double" value="0.0" />
        <param name="max_clouds" type="int" value="400" />
        <param name="ignore_laser_skew" type="bool" value="true" />
        <param name="fixed_frame" type="string" value="base_link" />
    </node>

    <node pkg="pr2_arm_navigation_perception" type="pr2_laser_snapshotter" output="screen" name="snapshotter">
        <remap from="laser_scanner_signal" to="laser_scanner_signal"/>
        <remap from="build_cloud" to="point_cloud_assembler/build_cloud" />
        <remap from="full_cloud" to="neck_scan/full_cloud_filtered" />
    </node>
</launch>

