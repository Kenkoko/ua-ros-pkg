# autogenerated by genmsg_py from TargetPositionRequest.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude TargetPositionRequest.msg.html

class TargetPositionRequest(roslib.message.Message):
  _md5sum = "4a842b65f413084dc2b10fb484ea7f17"
  _type = "wubble_teleop/TargetPositionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z

"""
  __slots__ = ['x','y','z']
  _slot_types = ['float64','float64','float64']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   x,y,z
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(TargetPositionRequest, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.x is None:
      self.x = 0.
    if self.y is None:
      self.y = 0.
    if self.z is None:
      self.z = 0.

  ## internal API method
  def _get_types(self): return TargetPositionRequest._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3d', self.x, self.y, self.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 24
      (self.x, self.y, self.z,) = struct.unpack('<3d',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3d', self.x, self.y, self.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 24
      (self.x, self.y, self.z,) = struct.unpack('<3d',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

# autogenerated by genmsg_py from TargetPositionResponse.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude TargetPositionResponse.msg.html

class TargetPositionResponse(roslib.message.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "wubble_teleop/TargetPositionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   success
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(TargetPositionResponse, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.success is None:
      self.success = False

  ## internal API method
  def _get_types(self): return TargetPositionResponse._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<B', self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = struct.unpack('<B',str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<B', self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = struct.unpack('<B',str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

class TargetPosition(roslib.message.ServiceDefinition):
  _type          = 'wubble_teleop/TargetPosition'
  _md5sum = '14fb54e9e518f55d418823395ca25d0b'
  _request_class  = TargetPositionRequest
  _response_class = TargetPositionResponse
